{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { isNan } from '../util/DataUtils';\n/**\n * These chart options are decided internally, by Recharts,\n * and will not change during the lifetime of the chart.\n *\n * Changing these options can be done by swapping the root element\n * which will make a brand-new Redux store.\n *\n * If you want to store options that can be changed by the user,\n * use UpdatableChartOptions in rootPropsSlice.ts.\n */\n\nexport function arrayTooltipSearcher(data, strIndex) {\n  if (!strIndex) return undefined;\n  var numIndex = Number.parseInt(strIndex, 10);\n\n  if (isNan(numIndex)) {\n    return undefined;\n  }\n\n  return data === null || data === void 0 ? void 0 : data[numIndex];\n}\nvar initialState = {\n  chartName: '',\n  tooltipPayloadSearcher: undefined,\n  eventEmitter: undefined,\n  defaultTooltipEventType: 'axis'\n};\nvar optionsSlice = createSlice({\n  name: 'options',\n  initialState,\n  reducers: {\n    createEventEmitter: state => {\n      if (state.eventEmitter == null) {\n        state.eventEmitter = Symbol('rechartsEventEmitter');\n      }\n    }\n  }\n});\nexport var optionsReducer = optionsSlice.reducer;\nexport var {\n  createEventEmitter\n} = optionsSlice.actions;","map":{"version":3,"sources":["/Users/emiliamamedova/charts/project_corona_tracker/node_modules/recharts/es6/state/optionsSlice.js"],"names":["createSlice","isNan","arrayTooltipSearcher","data","strIndex","undefined","numIndex","Number","parseInt","initialState","chartName","tooltipPayloadSearcher","eventEmitter","defaultTooltipEventType","optionsSlice","name","reducers","createEventEmitter","state","Symbol","optionsReducer","reducer","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,KAAT,QAAsB,mBAAtB;AAEA;;;;;;;;;;;AAWA,OAAO,SAASC,oBAAT,CAA8BC,IAA9B,EAAoCC,QAApC,EAA8C;AACnD,MAAI,CAACA,QAAL,EAAe,OAAOC,SAAP;AACf,MAAIC,QAAQ,GAAGC,MAAM,CAACC,QAAP,CAAgBJ,QAAhB,EAA0B,EAA1B,CAAf;;AACA,MAAIH,KAAK,CAACK,QAAD,CAAT,EAAqB;AACnB,WAAOD,SAAP;AACD;;AACD,SAAOF,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACG,QAAD,CAAvD;AACD;AACD,IAAIG,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE,EADM;AAEjBC,EAAAA,sBAAsB,EAAEN,SAFP;AAGjBO,EAAAA,YAAY,EAAEP,SAHG;AAIjBQ,EAAAA,uBAAuB,EAAE;AAJR,CAAnB;AAMA,IAAIC,YAAY,GAAGd,WAAW,CAAC;AAC7Be,EAAAA,IAAI,EAAE,SADuB;AAE7BN,EAAAA,YAF6B;AAG7BO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBAAkB,EAAEC,KAAK,IAAI;AAC3B,UAAIA,KAAK,CAACN,YAAN,IAAsB,IAA1B,EAAgC;AAC9BM,QAAAA,KAAK,CAACN,YAAN,GAAqBO,MAAM,CAAC,sBAAD,CAA3B;AACD;AACF;AALO;AAHmB,CAAD,CAA9B;AAWA,OAAO,IAAIC,cAAc,GAAGN,YAAY,CAACO,OAAlC;AACP,OAAO,IAAI;AACTJ,EAAAA;AADS,IAEPH,YAAY,CAACQ,OAFV","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { isNan } from '../util/DataUtils';\n\n/**\n * These chart options are decided internally, by Recharts,\n * and will not change during the lifetime of the chart.\n *\n * Changing these options can be done by swapping the root element\n * which will make a brand-new Redux store.\n *\n * If you want to store options that can be changed by the user,\n * use UpdatableChartOptions in rootPropsSlice.ts.\n */\n\nexport function arrayTooltipSearcher(data, strIndex) {\n  if (!strIndex) return undefined;\n  var numIndex = Number.parseInt(strIndex, 10);\n  if (isNan(numIndex)) {\n    return undefined;\n  }\n  return data === null || data === void 0 ? void 0 : data[numIndex];\n}\nvar initialState = {\n  chartName: '',\n  tooltipPayloadSearcher: undefined,\n  eventEmitter: undefined,\n  defaultTooltipEventType: 'axis'\n};\nvar optionsSlice = createSlice({\n  name: 'options',\n  initialState,\n  reducers: {\n    createEventEmitter: state => {\n      if (state.eventEmitter == null) {\n        state.eventEmitter = Symbol('rechartsEventEmitter');\n      }\n    }\n  }\n});\nexport var optionsReducer = optionsSlice.reducer;\nexport var {\n  createEventEmitter\n} = optionsSlice.actions;"]},"metadata":{},"sourceType":"module"}