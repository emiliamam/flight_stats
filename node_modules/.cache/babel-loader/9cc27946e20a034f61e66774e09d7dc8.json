{"ast":null,"code":"import { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector';\nimport { useContext } from 'react';\nimport { RechartsReduxContext } from './RechartsReduxContext';\n\nvar noopDispatch = a => a;\n\nexport var useAppDispatch = () => {\n  var context = useContext(RechartsReduxContext);\n\n  if (context) {\n    return context.store.dispatch;\n  }\n\n  return noopDispatch;\n};\n\nvar noop = () => {};\n\nvar addNestedSubNoop = () => noop;\n\nvar refEquality = (a, b) => a === b;\n/**\n * This is a recharts variant of `useSelector` from 'react-redux' package.\n *\n * The difference is that react-redux version will throw an Error when used outside of Redux context.\n *\n * This, recharts version, will return undefined instead.\n *\n * This is because we want to allow using our components outside the Chart wrapper,\n * and have people provide all props explicitly.\n *\n * If however they use the component inside a chart wrapper then those props become optional,\n * and we read them from Redux state instead.\n *\n * @param selector for pulling things out of Redux store; will not be called if the store is not accessible\n * @return whatever the selector returned; or undefined when outside of Redux store\n */\n\n\nexport function useAppSelector(selector) {\n  var context = useContext(RechartsReduxContext);\n  return useSyncExternalStoreWithSelector(context ? context.subscription.addNestedSub : addNestedSubNoop, context ? context.store.getState : noop, context ? context.store.getState : noop, context ? selector : noop, refEquality);\n}","map":{"version":3,"sources":["/Users/emiliamamedova/charts/project_corona_tracker/node_modules/recharts/es6/state/hooks.js"],"names":["useSyncExternalStoreWithSelector","useContext","RechartsReduxContext","noopDispatch","a","useAppDispatch","context","store","dispatch","noop","addNestedSubNoop","refEquality","b","useAppSelector","selector","subscription","addNestedSub","getState"],"mappings":"AAAA,SAASA,gCAAT,QAAiD,4CAAjD;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,oBAAT,QAAqC,wBAArC;;AACA,IAAIC,YAAY,GAAGC,CAAC,IAAIA,CAAxB;;AACA,OAAO,IAAIC,cAAc,GAAG,MAAM;AAChC,MAAIC,OAAO,GAAGL,UAAU,CAACC,oBAAD,CAAxB;;AACA,MAAII,OAAJ,EAAa;AACX,WAAOA,OAAO,CAACC,KAAR,CAAcC,QAArB;AACD;;AACD,SAAOL,YAAP;AACD,CANM;;AAOP,IAAIM,IAAI,GAAG,MAAM,CAAE,CAAnB;;AACA,IAAIC,gBAAgB,GAAG,MAAMD,IAA7B;;AACA,IAAIE,WAAW,GAAG,CAACP,CAAD,EAAIQ,CAAJ,KAAUR,CAAC,KAAKQ,CAAlC;AAEA;;;;;;;;;;;;;;;;;;AAgBA,OAAO,SAASC,cAAT,CAAwBC,QAAxB,EAAkC;AACvC,MAAIR,OAAO,GAAGL,UAAU,CAACC,oBAAD,CAAxB;AACA,SAAOF,gCAAgC,CAACM,OAAO,GAAGA,OAAO,CAACS,YAAR,CAAqBC,YAAxB,GAAuCN,gBAA/C,EAAiEJ,OAAO,GAAGA,OAAO,CAACC,KAAR,CAAcU,QAAjB,GAA4BR,IAApG,EAA0GH,OAAO,GAAGA,OAAO,CAACC,KAAR,CAAcU,QAAjB,GAA4BR,IAA7I,EAAmJH,OAAO,GAAGQ,QAAH,GAAcL,IAAxK,EAA8KE,WAA9K,CAAvC;AACD","sourcesContent":["import { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector';\nimport { useContext } from 'react';\nimport { RechartsReduxContext } from './RechartsReduxContext';\nvar noopDispatch = a => a;\nexport var useAppDispatch = () => {\n  var context = useContext(RechartsReduxContext);\n  if (context) {\n    return context.store.dispatch;\n  }\n  return noopDispatch;\n};\nvar noop = () => {};\nvar addNestedSubNoop = () => noop;\nvar refEquality = (a, b) => a === b;\n\n/**\n * This is a recharts variant of `useSelector` from 'react-redux' package.\n *\n * The difference is that react-redux version will throw an Error when used outside of Redux context.\n *\n * This, recharts version, will return undefined instead.\n *\n * This is because we want to allow using our components outside the Chart wrapper,\n * and have people provide all props explicitly.\n *\n * If however they use the component inside a chart wrapper then those props become optional,\n * and we read them from Redux state instead.\n *\n * @param selector for pulling things out of Redux store; will not be called if the store is not accessible\n * @return whatever the selector returned; or undefined when outside of Redux store\n */\nexport function useAppSelector(selector) {\n  var context = useContext(RechartsReduxContext);\n  return useSyncExternalStoreWithSelector(context ? context.subscription.addNestedSub : addNestedSubNoop, context ? context.store.getState : noop, context ? context.store.getState : noop, context ? selector : noop, refEquality);\n}"]},"metadata":{},"sourceType":"module"}