{"ast":null,"code":"import * as React from 'react';\nimport { createContext, useContext, useState } from 'react';\nimport { uniqueId } from '../util/DataUtils';\nimport { usePlotArea } from '../hooks';\nvar ClipPathIdContext = /*#__PURE__*/createContext(undefined);\n/**\n * Generates a unique clip path ID for use in SVG elements,\n * and puts it in a context provider.\n *\n * To read the clip path ID, use the `useClipPathId` hook,\n * or render `<ClipPath>` component which will automatically use the ID from this context.\n *\n * @param props children - React children to be wrapped by the provider\n * @returns React Context Provider\n */\n\nexport var ClipPathProvider = _ref => {\n  var {\n    children\n  } = _ref;\n  var [clipPathId] = useState(\"\".concat(uniqueId('recharts'), \"-clip\"));\n  var plotArea = usePlotArea();\n\n  if (plotArea == null) {\n    return null;\n  }\n\n  var {\n    x,\n    y,\n    width,\n    height\n  } = plotArea;\n  return /*#__PURE__*/React.createElement(ClipPathIdContext.Provider, {\n    value: clipPathId\n  }, /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: clipPathId\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    x: x,\n    y: y,\n    height: height,\n    width: width\n  }))), children);\n};\nexport var useClipPathId = () => {\n  return useContext(ClipPathIdContext);\n};","map":{"version":3,"sources":["/Users/emiliamamedova/charts/flightStats/node_modules/recharts/es6/container/ClipPathProvider.js"],"names":["React","createContext","useContext","useState","uniqueId","usePlotArea","ClipPathIdContext","undefined","ClipPathProvider","_ref","children","clipPathId","concat","plotArea","x","y","width","height","createElement","Provider","value","id","useClipPathId"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,IAAIC,iBAAiB,GAAG,aAAaL,aAAa,CAACM,SAAD,CAAlD;AAEA;;;;;;;;;;;AAUA,OAAO,IAAIC,gBAAgB,GAAGC,IAAI,IAAI;AACpC,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAGA,MAAI,CAACE,UAAD,IAAeR,QAAQ,CAAC,GAAGS,MAAH,CAAUR,QAAQ,CAAC,UAAD,CAAlB,EAAgC,OAAhC,CAAD,CAA3B;AACA,MAAIS,QAAQ,GAAGR,WAAW,EAA1B;;AACA,MAAIQ,QAAQ,IAAI,IAAhB,EAAsB;AACpB,WAAO,IAAP;AACD;;AACD,MAAI;AACFC,IAAAA,CADE;AAEFC,IAAAA,CAFE;AAGFC,IAAAA,KAHE;AAIFC,IAAAA;AAJE,MAKAJ,QALJ;AAMA,SAAO,aAAab,KAAK,CAACkB,aAAN,CAAoBZ,iBAAiB,CAACa,QAAtC,EAAgD;AAClEC,IAAAA,KAAK,EAAET;AAD2D,GAAhD,EAEjB,aAAaX,KAAK,CAACkB,aAAN,CAAoB,MAApB,EAA4B,IAA5B,EAAkC,aAAalB,KAAK,CAACkB,aAAN,CAAoB,UAApB,EAAgC;AAC7FG,IAAAA,EAAE,EAAEV;AADyF,GAAhC,EAE5D,aAAaX,KAAK,CAACkB,aAAN,CAAoB,MAApB,EAA4B;AAC1CJ,IAAAA,CAAC,EAAEA,CADuC;AAE1CC,IAAAA,CAAC,EAAEA,CAFuC;AAG1CE,IAAAA,MAAM,EAAEA,MAHkC;AAI1CD,IAAAA,KAAK,EAAEA;AAJmC,GAA5B,CAF+C,CAA/C,CAFI,EASdN,QATc,CAApB;AAUD,CAzBM;AA0BP,OAAO,IAAIY,aAAa,GAAG,MAAM;AAC/B,SAAOpB,UAAU,CAACI,iBAAD,CAAjB;AACD,CAFM","sourcesContent":["import * as React from 'react';\nimport { createContext, useContext, useState } from 'react';\nimport { uniqueId } from '../util/DataUtils';\nimport { usePlotArea } from '../hooks';\nvar ClipPathIdContext = /*#__PURE__*/createContext(undefined);\n\n/**\n * Generates a unique clip path ID for use in SVG elements,\n * and puts it in a context provider.\n *\n * To read the clip path ID, use the `useClipPathId` hook,\n * or render `<ClipPath>` component which will automatically use the ID from this context.\n *\n * @param props children - React children to be wrapped by the provider\n * @returns React Context Provider\n */\nexport var ClipPathProvider = _ref => {\n  var {\n    children\n  } = _ref;\n  var [clipPathId] = useState(\"\".concat(uniqueId('recharts'), \"-clip\"));\n  var plotArea = usePlotArea();\n  if (plotArea == null) {\n    return null;\n  }\n  var {\n    x,\n    y,\n    width,\n    height\n  } = plotArea;\n  return /*#__PURE__*/React.createElement(ClipPathIdContext.Provider, {\n    value: clipPathId\n  }, /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: clipPathId\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    x: x,\n    y: y,\n    height: height,\n    width: width\n  }))), children);\n};\nexport var useClipPathId = () => {\n  return useContext(ClipPathIdContext);\n};"]},"metadata":{},"sourceType":"module"}