{"ast":null,"code":"/**\n * @fileOverview Some common arithmetic methods\n * @author xile611\n * @date 2015-09-17\n */\nimport Decimal from 'decimal.js-light';\nimport { curry } from './utils';\n/**\n * Get the digit count of a number.\n * If the absolute value is in the interval [0.1, 1), the result is 0.\n * If the absolute value is in the interval [0.01, 0.1), the digit count is -1.\n * If the absolute value is in the interval [0.001, 0.01), the digit count is -2.\n *\n * @param  {Number} value The number\n * @return {Integer}      Digit count\n */\n\nfunction getDigitCount(value) {\n  var result;\n\n  if (value === 0) {\n    result = 1;\n  } else {\n    result = Math.floor(new Decimal(value).abs().log(10).toNumber()) + 1;\n  }\n\n  return result;\n}\n/**\n * Get the data in the interval [start, end) with a fixed step.\n * Also handles JS calculation precision issues.\n *\n * @param  {Decimal} start Start point\n * @param  {Decimal} end   End point, not included\n * @param  {Decimal} step  Step size\n * @return {Array}         Array of numbers\n */\n\n\nfunction rangeStep(start, end, step) {\n  var num = new Decimal(start);\n  var i = 0;\n  var result = []; // magic number to prevent infinite loop\n\n  while (num.lt(end) && i < 100000) {\n    result.push(num.toNumber());\n    num = num.add(step);\n    i++;\n  }\n\n  return result;\n}\n/**\n * Linear interpolation of numbers.\n *\n * @param  {Number} a  Endpoint of the domain\n * @param  {Number} b  Endpoint of the domain\n * @param  {Number} t  A value in [0, 1]\n * @return {Number}    A value in the domain\n */\n\n\nvar interpolateNumber = curry((a, b, t) => {\n  var newA = +a;\n  var newB = +b;\n  return newA + t * (newB - newA);\n});\n/**\n * Inverse operation of linear interpolation.\n *\n * @param  {Number} a Endpoint of the domain\n * @param  {Number} b Endpoint of the domain\n * @param  {Number} x Can be considered as an output value after interpolation\n * @return {Number}   When x is in the range a ~ b, the return value is in [0, 1]\n */\n\nvar uninterpolateNumber = curry((a, b, x) => {\n  var diff = b - +a;\n  diff = diff || Infinity;\n  return (x - a) / diff;\n});\n/**\n * Inverse operation of linear interpolation with truncation.\n *\n * @param  {Number} a Endpoint of the domain\n * @param  {Number} b Endpoint of the domain\n * @param  {Number} x Can be considered as an output value after interpolation\n * @return {Number}   When x is in the interval a ~ b, the return value is in [0, 1].\n *                    When x is not in the interval a ~ b, it will be truncated to the interval a ~ b.\n */\n\nvar uninterpolateTruncation = curry((a, b, x) => {\n  var diff = b - +a;\n  diff = diff || Infinity;\n  return Math.max(0, Math.min(1, (x - a) / diff));\n});\nexport { rangeStep, getDigitCount, interpolateNumber, uninterpolateNumber, uninterpolateTruncation };","map":{"version":3,"sources":["/Users/emiliamamedova/charts/flightStats/node_modules/recharts/es6/util/scale/util/arithmetic.js"],"names":["Decimal","curry","getDigitCount","value","result","Math","floor","abs","log","toNumber","rangeStep","start","end","step","num","i","lt","push","add","interpolateNumber","a","b","t","newA","newB","uninterpolateNumber","x","diff","Infinity","uninterpolateTruncation","max","min"],"mappings":"AAAA;;;;;AAKA,OAAOA,OAAP,MAAoB,kBAApB;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEA;;;;;;;;;;AASA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,MAAIC,MAAJ;;AACA,MAAID,KAAK,KAAK,CAAd,EAAiB;AACfC,IAAAA,MAAM,GAAG,CAAT;AACD,GAFD,MAEO;AACLA,IAAAA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAW,IAAIN,OAAJ,CAAYG,KAAZ,EAAmBI,GAAnB,GAAyBC,GAAzB,CAA6B,EAA7B,EAAiCC,QAAjC,EAAX,IAA0D,CAAnE;AACD;;AACD,SAAOL,MAAP;AACD;AAED;;;;;;;;;;;AASA,SAASM,SAAT,CAAmBC,KAAnB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqC;AACnC,MAAIC,GAAG,GAAG,IAAId,OAAJ,CAAYW,KAAZ,CAAV;AACA,MAAII,CAAC,GAAG,CAAR;AACA,MAAIX,MAAM,GAAG,EAAb,CAHmC,CAKnC;;AACA,SAAOU,GAAG,CAACE,EAAJ,CAAOJ,GAAP,KAAeG,CAAC,GAAG,MAA1B,EAAkC;AAChCX,IAAAA,MAAM,CAACa,IAAP,CAAYH,GAAG,CAACL,QAAJ,EAAZ;AACAK,IAAAA,GAAG,GAAGA,GAAG,CAACI,GAAJ,CAAQL,IAAR,CAAN;AACAE,IAAAA,CAAC;AACF;;AACD,SAAOX,MAAP;AACD;AAED;;;;;;;;;;AAQA,IAAIe,iBAAiB,GAAGlB,KAAK,CAAC,CAACmB,CAAD,EAAIC,CAAJ,EAAOC,CAAP,KAAa;AACzC,MAAIC,IAAI,GAAG,CAACH,CAAZ;AACA,MAAII,IAAI,GAAG,CAACH,CAAZ;AACA,SAAOE,IAAI,GAAGD,CAAC,IAAIE,IAAI,GAAGD,IAAX,CAAf;AACD,CAJ4B,CAA7B;AAMA;;;;;;;;;AAQA,IAAIE,mBAAmB,GAAGxB,KAAK,CAAC,CAACmB,CAAD,EAAIC,CAAJ,EAAOK,CAAP,KAAa;AAC3C,MAAIC,IAAI,GAAGN,CAAC,GAAG,CAACD,CAAhB;AACAO,EAAAA,IAAI,GAAGA,IAAI,IAAIC,QAAf;AACA,SAAO,CAACF,CAAC,GAAGN,CAAL,IAAUO,IAAjB;AACD,CAJ8B,CAA/B;AAMA;;;;;;;;;;AASA,IAAIE,uBAAuB,GAAG5B,KAAK,CAAC,CAACmB,CAAD,EAAIC,CAAJ,EAAOK,CAAP,KAAa;AAC/C,MAAIC,IAAI,GAAGN,CAAC,GAAG,CAACD,CAAhB;AACAO,EAAAA,IAAI,GAAGA,IAAI,IAAIC,QAAf;AACA,SAAOvB,IAAI,CAACyB,GAAL,CAAS,CAAT,EAAYzB,IAAI,CAAC0B,GAAL,CAAS,CAAT,EAAY,CAACL,CAAC,GAAGN,CAAL,IAAUO,IAAtB,CAAZ,CAAP;AACD,CAJkC,CAAnC;AAKA,SAASjB,SAAT,EAAoBR,aAApB,EAAmCiB,iBAAnC,EAAsDM,mBAAtD,EAA2EI,uBAA3E","sourcesContent":["/**\n * @fileOverview Some common arithmetic methods\n * @author xile611\n * @date 2015-09-17\n */\nimport Decimal from 'decimal.js-light';\nimport { curry } from './utils';\n\n/**\n * Get the digit count of a number.\n * If the absolute value is in the interval [0.1, 1), the result is 0.\n * If the absolute value is in the interval [0.01, 0.1), the digit count is -1.\n * If the absolute value is in the interval [0.001, 0.01), the digit count is -2.\n *\n * @param  {Number} value The number\n * @return {Integer}      Digit count\n */\nfunction getDigitCount(value) {\n  var result;\n  if (value === 0) {\n    result = 1;\n  } else {\n    result = Math.floor(new Decimal(value).abs().log(10).toNumber()) + 1;\n  }\n  return result;\n}\n\n/**\n * Get the data in the interval [start, end) with a fixed step.\n * Also handles JS calculation precision issues.\n *\n * @param  {Decimal} start Start point\n * @param  {Decimal} end   End point, not included\n * @param  {Decimal} step  Step size\n * @return {Array}         Array of numbers\n */\nfunction rangeStep(start, end, step) {\n  var num = new Decimal(start);\n  var i = 0;\n  var result = [];\n\n  // magic number to prevent infinite loop\n  while (num.lt(end) && i < 100000) {\n    result.push(num.toNumber());\n    num = num.add(step);\n    i++;\n  }\n  return result;\n}\n\n/**\n * Linear interpolation of numbers.\n *\n * @param  {Number} a  Endpoint of the domain\n * @param  {Number} b  Endpoint of the domain\n * @param  {Number} t  A value in [0, 1]\n * @return {Number}    A value in the domain\n */\nvar interpolateNumber = curry((a, b, t) => {\n  var newA = +a;\n  var newB = +b;\n  return newA + t * (newB - newA);\n});\n\n/**\n * Inverse operation of linear interpolation.\n *\n * @param  {Number} a Endpoint of the domain\n * @param  {Number} b Endpoint of the domain\n * @param  {Number} x Can be considered as an output value after interpolation\n * @return {Number}   When x is in the range a ~ b, the return value is in [0, 1]\n */\nvar uninterpolateNumber = curry((a, b, x) => {\n  var diff = b - +a;\n  diff = diff || Infinity;\n  return (x - a) / diff;\n});\n\n/**\n * Inverse operation of linear interpolation with truncation.\n *\n * @param  {Number} a Endpoint of the domain\n * @param  {Number} b Endpoint of the domain\n * @param  {Number} x Can be considered as an output value after interpolation\n * @return {Number}   When x is in the interval a ~ b, the return value is in [0, 1].\n *                    When x is not in the interval a ~ b, it will be truncated to the interval a ~ b.\n */\nvar uninterpolateTruncation = curry((a, b, x) => {\n  var diff = b - +a;\n  diff = diff || Infinity;\n  return Math.max(0, Math.min(1, (x - a) / diff));\n});\nexport { rangeStep, getDigitCount, interpolateNumber, uninterpolateNumber, uninterpolateTruncation };"]},"metadata":{},"sourceType":"module"}