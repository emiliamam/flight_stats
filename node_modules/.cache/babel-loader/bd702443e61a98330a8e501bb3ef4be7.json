{"ast":null,"code":"import { useEffect } from 'react';\nimport { setChartData, setComputedData } from '../state/chartDataSlice';\nimport { useAppDispatch, useAppSelector } from '../state/hooks';\nimport { useIsPanorama } from './PanoramaContext';\nexport var ChartDataContextProvider = props => {\n  var {\n    chartData\n  } = props;\n  var dispatch = useAppDispatch();\n  var isPanorama = useIsPanorama();\n  useEffect(() => {\n    if (isPanorama) {\n      // Panorama mode reuses data from the main chart, so we must not overwrite it here.\n      return () => {// there is nothing to clean up\n      };\n    }\n\n    dispatch(setChartData(chartData));\n    return () => {\n      dispatch(setChartData(undefined));\n    };\n  }, [chartData, dispatch, isPanorama]);\n  return null;\n};\nexport var SetComputedData = props => {\n  var {\n    computedData\n  } = props;\n  var dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(setComputedData(computedData));\n    return () => {\n      dispatch(setChartData(undefined));\n    };\n  }, [computedData, dispatch]);\n  return null;\n};\n\nvar selectChartData = state => state.chartData.chartData;\n/**\n * \"data\" is the data of the chart - it has no type because this part of recharts is very flexible.\n * Basically it's an array of \"something\" and then there's the dataKey property in various places\n * that's meant to pull other things away from the data.\n *\n * Some charts have `data` defined on the chart root, and they will return the array through this hook.\n * For example: <ComposedChart data={data} />.\n *\n * Other charts, such as Pie, have data defined on individual graphical elements.\n * These charts will return `undefined` through this hook, and you need to read the data from children.\n * For example: <PieChart><Pie data={data} />\n *\n * Some charts also allow setting both - data on the parent, and data on the children at the same time!\n * However, this particular selector will only return the ones defined on the parent.\n *\n * @deprecated use one of the other selectors instead - which one, depends on how do you identify the applicable graphical items.\n *\n * @return data array for some charts and undefined for other\n */\n\n\nexport var useChartData = () => useAppSelector(selectChartData);\n\nvar selectDataIndex = state => {\n  var {\n    dataStartIndex,\n    dataEndIndex\n  } = state.chartData;\n  return {\n    startIndex: dataStartIndex,\n    endIndex: dataEndIndex\n  };\n};\n/**\n * startIndex and endIndex are data boundaries, set through Brush.\n *\n * @return object with startIndex and endIndex\n */\n\n\nexport var useDataIndex = () => {\n  return useAppSelector(selectDataIndex);\n};","map":{"version":3,"sources":["/Users/emiliamamedova/charts/flightStats/node_modules/recharts/es6/context/chartDataContext.js"],"names":["useEffect","setChartData","setComputedData","useAppDispatch","useAppSelector","useIsPanorama","ChartDataContextProvider","props","chartData","dispatch","isPanorama","undefined","SetComputedData","computedData","selectChartData","state","useChartData","selectDataIndex","dataStartIndex","dataEndIndex","startIndex","endIndex","useDataIndex"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,yBAA9C;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,gBAA/C;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,OAAO,IAAIC,wBAAwB,GAAGC,KAAK,IAAI;AAC7C,MAAI;AACFC,IAAAA;AADE,MAEAD,KAFJ;AAGA,MAAIE,QAAQ,GAAGN,cAAc,EAA7B;AACA,MAAIO,UAAU,GAAGL,aAAa,EAA9B;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,UAAJ,EAAgB;AACd;AACA,aAAO,MAAM,CACX;AACD,OAFD;AAGD;;AACDD,IAAAA,QAAQ,CAACR,YAAY,CAACO,SAAD,CAAb,CAAR;AACA,WAAO,MAAM;AACXC,MAAAA,QAAQ,CAACR,YAAY,CAACU,SAAD,CAAb,CAAR;AACD,KAFD;AAGD,GAXQ,EAWN,CAACH,SAAD,EAAYC,QAAZ,EAAsBC,UAAtB,CAXM,CAAT;AAYA,SAAO,IAAP;AACD,CAnBM;AAoBP,OAAO,IAAIE,eAAe,GAAGL,KAAK,IAAI;AACpC,MAAI;AACFM,IAAAA;AADE,MAEAN,KAFJ;AAGA,MAAIE,QAAQ,GAAGN,cAAc,EAA7B;AACAH,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,QAAQ,CAACP,eAAe,CAACW,YAAD,CAAhB,CAAR;AACA,WAAO,MAAM;AACXJ,MAAAA,QAAQ,CAACR,YAAY,CAACU,SAAD,CAAb,CAAR;AACD,KAFD;AAGD,GALQ,EAKN,CAACE,YAAD,EAAeJ,QAAf,CALM,CAAT;AAMA,SAAO,IAAP;AACD,CAZM;;AAaP,IAAIK,eAAe,GAAGC,KAAK,IAAIA,KAAK,CAACP,SAAN,CAAgBA,SAA/C;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAIQ,YAAY,GAAG,MAAMZ,cAAc,CAACU,eAAD,CAAvC;;AACP,IAAIG,eAAe,GAAGF,KAAK,IAAI;AAC7B,MAAI;AACFG,IAAAA,cADE;AAEFC,IAAAA;AAFE,MAGAJ,KAAK,CAACP,SAHV;AAIA,SAAO;AACLY,IAAAA,UAAU,EAAEF,cADP;AAELG,IAAAA,QAAQ,EAAEF;AAFL,GAAP;AAID,CATD;AAWA;;;;;;;AAKA,OAAO,IAAIG,YAAY,GAAG,MAAM;AAC9B,SAAOlB,cAAc,CAACa,eAAD,CAArB;AACD,CAFM","sourcesContent":["import { useEffect } from 'react';\nimport { setChartData, setComputedData } from '../state/chartDataSlice';\nimport { useAppDispatch, useAppSelector } from '../state/hooks';\nimport { useIsPanorama } from './PanoramaContext';\nexport var ChartDataContextProvider = props => {\n  var {\n    chartData\n  } = props;\n  var dispatch = useAppDispatch();\n  var isPanorama = useIsPanorama();\n  useEffect(() => {\n    if (isPanorama) {\n      // Panorama mode reuses data from the main chart, so we must not overwrite it here.\n      return () => {\n        // there is nothing to clean up\n      };\n    }\n    dispatch(setChartData(chartData));\n    return () => {\n      dispatch(setChartData(undefined));\n    };\n  }, [chartData, dispatch, isPanorama]);\n  return null;\n};\nexport var SetComputedData = props => {\n  var {\n    computedData\n  } = props;\n  var dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(setComputedData(computedData));\n    return () => {\n      dispatch(setChartData(undefined));\n    };\n  }, [computedData, dispatch]);\n  return null;\n};\nvar selectChartData = state => state.chartData.chartData;\n\n/**\n * \"data\" is the data of the chart - it has no type because this part of recharts is very flexible.\n * Basically it's an array of \"something\" and then there's the dataKey property in various places\n * that's meant to pull other things away from the data.\n *\n * Some charts have `data` defined on the chart root, and they will return the array through this hook.\n * For example: <ComposedChart data={data} />.\n *\n * Other charts, such as Pie, have data defined on individual graphical elements.\n * These charts will return `undefined` through this hook, and you need to read the data from children.\n * For example: <PieChart><Pie data={data} />\n *\n * Some charts also allow setting both - data on the parent, and data on the children at the same time!\n * However, this particular selector will only return the ones defined on the parent.\n *\n * @deprecated use one of the other selectors instead - which one, depends on how do you identify the applicable graphical items.\n *\n * @return data array for some charts and undefined for other\n */\nexport var useChartData = () => useAppSelector(selectChartData);\nvar selectDataIndex = state => {\n  var {\n    dataStartIndex,\n    dataEndIndex\n  } = state.chartData;\n  return {\n    startIndex: dataStartIndex,\n    endIndex: dataEndIndex\n  };\n};\n\n/**\n * startIndex and endIndex are data boundaries, set through Brush.\n *\n * @return object with startIndex and endIndex\n */\nexport var useDataIndex = () => {\n  return useAppSelector(selectDataIndex);\n};"]},"metadata":{},"sourceType":"module"}