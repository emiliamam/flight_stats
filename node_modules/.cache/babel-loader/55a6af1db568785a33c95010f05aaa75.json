{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, Symbol.toStringTag, {\n  value: 'Module'\n});\n\nconst isMatch = require('./isMatch.js');\n\nconst isObject = require('./isObject.js');\n\nconst isPrimitive = require('../../predicate/isPrimitive.js');\n\nconst eq = require('../util/eq.js');\n\nfunction isMatchWith(target, source, compare) {\n  if (typeof compare !== 'function') {\n    return isMatch.isMatch(target, source);\n  }\n\n  return isMatchWithInternal(target, source, function doesMatch(objValue, srcValue, key, object, source, stack) {\n    const isEqual = compare(objValue, srcValue, key, object, source, stack);\n\n    if (isEqual !== undefined) {\n      return Boolean(isEqual);\n    }\n\n    return isMatchWithInternal(objValue, srcValue, doesMatch, stack);\n  }, new Map());\n}\n\nfunction isMatchWithInternal(target, source, compare, stack) {\n  if (source === target) {\n    return true;\n  }\n\n  switch (typeof source) {\n    case 'object':\n      {\n        return isObjectMatch(target, source, compare, stack);\n      }\n\n    case 'function':\n      {\n        const sourceKeys = Object.keys(source);\n\n        if (sourceKeys.length > 0) {\n          return isMatchWithInternal(target, { ...source\n          }, compare, stack);\n        }\n\n        return eq.eq(target, source);\n      }\n\n    default:\n      {\n        if (!isObject.isObject(target)) {\n          return eq.eq(target, source);\n        }\n\n        if (typeof source === 'string') {\n          return source === '';\n        }\n\n        return true;\n      }\n  }\n}\n\nfunction isObjectMatch(target, source, compare, stack) {\n  if (source == null) {\n    return true;\n  }\n\n  if (Array.isArray(source)) {\n    return isArrayMatch(target, source, compare, stack);\n  }\n\n  if (source instanceof Map) {\n    return isMapMatch(target, source, compare, stack);\n  }\n\n  if (source instanceof Set) {\n    return isSetMatch(target, source, compare, stack);\n  }\n\n  const keys = Object.keys(source);\n\n  if (target == null) {\n    return keys.length === 0;\n  }\n\n  if (keys.length === 0) {\n    return true;\n  }\n\n  if (stack && stack.has(source)) {\n    return stack.get(source) === target;\n  }\n\n  if (stack) {\n    stack.set(source, target);\n  }\n\n  try {\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n\n      if (!isPrimitive.isPrimitive(target) && !(key in target)) {\n        return false;\n      }\n\n      if (source[key] === undefined && target[key] !== undefined) {\n        return false;\n      }\n\n      if (source[key] === null && target[key] !== null) {\n        return false;\n      }\n\n      const isEqual = compare(target[key], source[key], key, target, source, stack);\n\n      if (!isEqual) {\n        return false;\n      }\n    }\n\n    return true;\n  } finally {\n    if (stack) {\n      stack.delete(source);\n    }\n  }\n}\n\nfunction isMapMatch(target, source, compare, stack) {\n  if (source.size === 0) {\n    return true;\n  }\n\n  if (!(target instanceof Map)) {\n    return false;\n  }\n\n  for (const [key, sourceValue] of source.entries()) {\n    const targetValue = target.get(key);\n    const isEqual = compare(targetValue, sourceValue, key, target, source, stack);\n\n    if (isEqual === false) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isArrayMatch(target, source, compare, stack) {\n  if (source.length === 0) {\n    return true;\n  }\n\n  if (!Array.isArray(target)) {\n    return false;\n  }\n\n  const countedIndex = new Set();\n\n  for (let i = 0; i < source.length; i++) {\n    const sourceItem = source[i];\n    let found = false;\n\n    for (let j = 0; j < target.length; j++) {\n      if (countedIndex.has(j)) {\n        continue;\n      }\n\n      const targetItem = target[j];\n      let matches = false;\n      const isEqual = compare(targetItem, sourceItem, i, target, source, stack);\n\n      if (isEqual) {\n        matches = true;\n      }\n\n      if (matches) {\n        countedIndex.add(j);\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isSetMatch(target, source, compare, stack) {\n  if (source.size === 0) {\n    return true;\n  }\n\n  if (!(target instanceof Set)) {\n    return false;\n  }\n\n  return isArrayMatch([...target], [...source], compare, stack);\n}\n\nexports.isMatchWith = isMatchWith;\nexports.isSetMatch = isSetMatch;","map":{"version":3,"sources":["/Users/emiliamamedova/charts/project_corona_tracker/node_modules/es-toolkit/dist/compat/predicate/isMatchWith.js"],"names":["Object","defineProperty","exports","Symbol","toStringTag","value","isMatch","require","isObject","isPrimitive","eq","isMatchWith","target","source","compare","isMatchWithInternal","doesMatch","objValue","srcValue","key","object","stack","isEqual","undefined","Boolean","Map","isObjectMatch","sourceKeys","keys","length","Array","isArray","isArrayMatch","isMapMatch","Set","isSetMatch","has","get","set","i","delete","size","sourceValue","entries","targetValue","countedIndex","sourceItem","found","j","targetItem","matches","add"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isMatch = require('./isMatch.js');\nconst isObject = require('./isObject.js');\nconst isPrimitive = require('../../predicate/isPrimitive.js');\nconst eq = require('../util/eq.js');\n\nfunction isMatchWith(target, source, compare) {\n    if (typeof compare !== 'function') {\n        return isMatch.isMatch(target, source);\n    }\n    return isMatchWithInternal(target, source, function doesMatch(objValue, srcValue, key, object, source, stack) {\n        const isEqual = compare(objValue, srcValue, key, object, source, stack);\n        if (isEqual !== undefined) {\n            return Boolean(isEqual);\n        }\n        return isMatchWithInternal(objValue, srcValue, doesMatch, stack);\n    }, new Map());\n}\nfunction isMatchWithInternal(target, source, compare, stack) {\n    if (source === target) {\n        return true;\n    }\n    switch (typeof source) {\n        case 'object': {\n            return isObjectMatch(target, source, compare, stack);\n        }\n        case 'function': {\n            const sourceKeys = Object.keys(source);\n            if (sourceKeys.length > 0) {\n                return isMatchWithInternal(target, { ...source }, compare, stack);\n            }\n            return eq.eq(target, source);\n        }\n        default: {\n            if (!isObject.isObject(target)) {\n                return eq.eq(target, source);\n            }\n            if (typeof source === 'string') {\n                return source === '';\n            }\n            return true;\n        }\n    }\n}\nfunction isObjectMatch(target, source, compare, stack) {\n    if (source == null) {\n        return true;\n    }\n    if (Array.isArray(source)) {\n        return isArrayMatch(target, source, compare, stack);\n    }\n    if (source instanceof Map) {\n        return isMapMatch(target, source, compare, stack);\n    }\n    if (source instanceof Set) {\n        return isSetMatch(target, source, compare, stack);\n    }\n    const keys = Object.keys(source);\n    if (target == null) {\n        return keys.length === 0;\n    }\n    if (keys.length === 0) {\n        return true;\n    }\n    if (stack && stack.has(source)) {\n        return stack.get(source) === target;\n    }\n    if (stack) {\n        stack.set(source, target);\n    }\n    try {\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            if (!isPrimitive.isPrimitive(target) && !(key in target)) {\n                return false;\n            }\n            if (source[key] === undefined && target[key] !== undefined) {\n                return false;\n            }\n            if (source[key] === null && target[key] !== null) {\n                return false;\n            }\n            const isEqual = compare(target[key], source[key], key, target, source, stack);\n            if (!isEqual) {\n                return false;\n            }\n        }\n        return true;\n    }\n    finally {\n        if (stack) {\n            stack.delete(source);\n        }\n    }\n}\nfunction isMapMatch(target, source, compare, stack) {\n    if (source.size === 0) {\n        return true;\n    }\n    if (!(target instanceof Map)) {\n        return false;\n    }\n    for (const [key, sourceValue] of source.entries()) {\n        const targetValue = target.get(key);\n        const isEqual = compare(targetValue, sourceValue, key, target, source, stack);\n        if (isEqual === false) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isArrayMatch(target, source, compare, stack) {\n    if (source.length === 0) {\n        return true;\n    }\n    if (!Array.isArray(target)) {\n        return false;\n    }\n    const countedIndex = new Set();\n    for (let i = 0; i < source.length; i++) {\n        const sourceItem = source[i];\n        let found = false;\n        for (let j = 0; j < target.length; j++) {\n            if (countedIndex.has(j)) {\n                continue;\n            }\n            const targetItem = target[j];\n            let matches = false;\n            const isEqual = compare(targetItem, sourceItem, i, target, source, stack);\n            if (isEqual) {\n                matches = true;\n            }\n            if (matches) {\n                countedIndex.add(j);\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isSetMatch(target, source, compare, stack) {\n    if (source.size === 0) {\n        return true;\n    }\n    if (!(target instanceof Set)) {\n        return false;\n    }\n    return isArrayMatch([...target], [...source], compare, stack);\n}\n\nexports.isMatchWith = isMatchWith;\nexports.isSetMatch = isSetMatch;\n"]},"metadata":{},"sourceType":"script"}