{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ordinal;\nexports.implicit = void 0;\n\nvar _index = require(\"../../../lib-vendor/d3-array/src/index.js\");\n\nvar _init = require(\"./init.js\");\n\nconst implicit = exports.implicit = Symbol(\"implicit\");\n\nfunction ordinal() {\n  var index = new _index.InternMap(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    let i = index.get(d);\n\n    if (i === undefined) {\n      if (unknown !== implicit) return unknown;\n      index.set(d, i = domain.push(d) - 1);\n    }\n\n    return range[i % range.length];\n  }\n\n  scale.domain = function (_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = new _index.InternMap();\n\n    for (const value of _) {\n      if (index.has(value)) continue;\n      index.set(value, domain.push(value) - 1);\n    }\n\n    return scale;\n  };\n\n  scale.range = function (_) {\n    return arguments.length ? (range = Array.from(_), scale) : range.slice();\n  };\n\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function () {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  _init.initRange.apply(scale, arguments);\n\n  return scale;\n}","map":{"version":3,"sources":["/Users/emiliamamedova/charts/project_corona_tracker/node_modules/victory-vendor/lib-vendor/d3-scale/src/ordinal.js"],"names":["Object","defineProperty","exports","value","default","ordinal","implicit","_index","require","_init","Symbol","index","InternMap","domain","range","unknown","scale","d","i","get","undefined","set","push","length","_","arguments","slice","has","Array","from","copy","initRange","apply"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,OAAlB;AACAH,OAAO,CAACI,QAAR,GAAmB,KAAK,CAAxB;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,2CAAD,CAApB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMF,QAAQ,GAAGJ,OAAO,CAACI,QAAR,GAAmBI,MAAM,CAAC,UAAD,CAA1C;;AACA,SAASL,OAAT,GAAmB;AACjB,MAAIM,KAAK,GAAG,IAAIJ,MAAM,CAACK,SAAX,EAAZ;AAAA,MACEC,MAAM,GAAG,EADX;AAAA,MAEEC,KAAK,GAAG,EAFV;AAAA,MAGEC,OAAO,GAAGT,QAHZ;;AAIA,WAASU,KAAT,CAAeC,CAAf,EAAkB;AAChB,QAAIC,CAAC,GAAGP,KAAK,CAACQ,GAAN,CAAUF,CAAV,CAAR;;AACA,QAAIC,CAAC,KAAKE,SAAV,EAAqB;AACnB,UAAIL,OAAO,KAAKT,QAAhB,EAA0B,OAAOS,OAAP;AAC1BJ,MAAAA,KAAK,CAACU,GAAN,CAAUJ,CAAV,EAAaC,CAAC,GAAGL,MAAM,CAACS,IAAP,CAAYL,CAAZ,IAAiB,CAAlC;AACD;;AACD,WAAOH,KAAK,CAACI,CAAC,GAAGJ,KAAK,CAACS,MAAX,CAAZ;AACD;;AACDP,EAAAA,KAAK,CAACH,MAAN,GAAe,UAAUW,CAAV,EAAa;AAC1B,QAAI,CAACC,SAAS,CAACF,MAAf,EAAuB,OAAOV,MAAM,CAACa,KAAP,EAAP;AACvBb,IAAAA,MAAM,GAAG,EAAT,EAAaF,KAAK,GAAG,IAAIJ,MAAM,CAACK,SAAX,EAArB;;AACA,SAAK,MAAMT,KAAX,IAAoBqB,CAApB,EAAuB;AACrB,UAAIb,KAAK,CAACgB,GAAN,CAAUxB,KAAV,CAAJ,EAAsB;AACtBQ,MAAAA,KAAK,CAACU,GAAN,CAAUlB,KAAV,EAAiBU,MAAM,CAACS,IAAP,CAAYnB,KAAZ,IAAqB,CAAtC;AACD;;AACD,WAAOa,KAAP;AACD,GARD;;AASAA,EAAAA,KAAK,CAACF,KAAN,GAAc,UAAUU,CAAV,EAAa;AACzB,WAAOC,SAAS,CAACF,MAAV,IAAoBT,KAAK,GAAGc,KAAK,CAACC,IAAN,CAAWL,CAAX,CAAR,EAAuBR,KAA3C,IAAoDF,KAAK,CAACY,KAAN,EAA3D;AACD,GAFD;;AAGAV,EAAAA,KAAK,CAACD,OAAN,GAAgB,UAAUS,CAAV,EAAa;AAC3B,WAAOC,SAAS,CAACF,MAAV,IAAoBR,OAAO,GAAGS,CAAV,EAAaR,KAAjC,IAA0CD,OAAjD;AACD,GAFD;;AAGAC,EAAAA,KAAK,CAACc,IAAN,GAAa,YAAY;AACvB,WAAOzB,OAAO,CAACQ,MAAD,EAASC,KAAT,CAAP,CAAuBC,OAAvB,CAA+BA,OAA/B,CAAP;AACD,GAFD;;AAGAN,EAAAA,KAAK,CAACsB,SAAN,CAAgBC,KAAhB,CAAsBhB,KAAtB,EAA6BS,SAA7B;;AACA,SAAOT,KAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ordinal;\nexports.implicit = void 0;\nvar _index = require(\"../../../lib-vendor/d3-array/src/index.js\");\nvar _init = require(\"./init.js\");\nconst implicit = exports.implicit = Symbol(\"implicit\");\nfunction ordinal() {\n  var index = new _index.InternMap(),\n    domain = [],\n    range = [],\n    unknown = implicit;\n  function scale(d) {\n    let i = index.get(d);\n    if (i === undefined) {\n      if (unknown !== implicit) return unknown;\n      index.set(d, i = domain.push(d) - 1);\n    }\n    return range[i % range.length];\n  }\n  scale.domain = function (_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = new _index.InternMap();\n    for (const value of _) {\n      if (index.has(value)) continue;\n      index.set(value, domain.push(value) - 1);\n    }\n    return scale;\n  };\n  scale.range = function (_) {\n    return arguments.length ? (range = Array.from(_), scale) : range.slice();\n  };\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n  scale.copy = function () {\n    return ordinal(domain, range).unknown(unknown);\n  };\n  _init.initRange.apply(scale, arguments);\n  return scale;\n}"]},"metadata":{},"sourceType":"script"}