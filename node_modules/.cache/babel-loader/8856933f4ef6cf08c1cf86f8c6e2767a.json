{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n}; // src/utils/react.ts\n\n\nimport * as React from \"react\"; // src/utils/react-is.ts\n\nvar IS_REACT_19 = /* @__PURE__ */React.version.startsWith(\"19\");\nvar REACT_ELEMENT_TYPE = /* @__PURE__ */Symbol.for(IS_REACT_19 ? \"react.transitional.element\" : \"react.element\");\nvar REACT_PORTAL_TYPE = /* @__PURE__ */Symbol.for(\"react.portal\");\nvar REACT_FRAGMENT_TYPE = /* @__PURE__ */Symbol.for(\"react.fragment\");\nvar REACT_STRICT_MODE_TYPE = /* @__PURE__ */Symbol.for(\"react.strict_mode\");\nvar REACT_PROFILER_TYPE = /* @__PURE__ */Symbol.for(\"react.profiler\");\nvar REACT_CONSUMER_TYPE = /* @__PURE__ */Symbol.for(\"react.consumer\");\nvar REACT_CONTEXT_TYPE = /* @__PURE__ */Symbol.for(\"react.context\");\nvar REACT_FORWARD_REF_TYPE = /* @__PURE__ */Symbol.for(\"react.forward_ref\");\nvar REACT_SUSPENSE_TYPE = /* @__PURE__ */Symbol.for(\"react.suspense\");\nvar REACT_SUSPENSE_LIST_TYPE = /* @__PURE__ */Symbol.for(\"react.suspense_list\");\nvar REACT_MEMO_TYPE = /* @__PURE__ */Symbol.for(\"react.memo\");\nvar REACT_LAZY_TYPE = /* @__PURE__ */Symbol.for(\"react.lazy\");\nvar REACT_OFFSCREEN_TYPE = /* @__PURE__ */Symbol.for(\"react.offscreen\");\nvar REACT_CLIENT_REFERENCE = /* @__PURE__ */Symbol.for(\"react.client.reference\");\nvar ForwardRef = REACT_FORWARD_REF_TYPE;\nvar Memo = REACT_MEMO_TYPE;\n\nfunction isValidElementType(type) {\n  return typeof type === \"string\" || typeof type === \"function\" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE || typeof type === \"object\" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE || type.getModuleId !== void 0) ? true : false;\n}\n\nfunction typeOf(object) {\n  if (typeof object === \"object\" && object !== null) {\n    const {\n      $$typeof\n    } = object;\n\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        switch (object = object.type, object) {\n          case REACT_FRAGMENT_TYPE:\n          case REACT_PROFILER_TYPE:\n          case REACT_STRICT_MODE_TYPE:\n          case REACT_SUSPENSE_TYPE:\n          case REACT_SUSPENSE_LIST_TYPE:\n            return object;\n\n          default:\n            switch (object = object && object.$$typeof, object) {\n              case REACT_CONTEXT_TYPE:\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_LAZY_TYPE:\n              case REACT_MEMO_TYPE:\n                return object;\n\n              case REACT_CONSUMER_TYPE:\n                return object;\n\n              default:\n                return $$typeof;\n            }\n\n        }\n\n      case REACT_PORTAL_TYPE:\n        return $$typeof;\n    }\n  }\n}\n\nfunction isContextConsumer(object) {\n  return IS_REACT_19 ? typeOf(object) === REACT_CONSUMER_TYPE : typeOf(object) === REACT_CONTEXT_TYPE;\n}\n\nfunction isMemo(object) {\n  return typeOf(object) === REACT_MEMO_TYPE;\n} // src/utils/warning.ts\n\n\nfunction warning(message) {\n  if (typeof console !== \"undefined\" && typeof console.error === \"function\") {\n    console.error(message);\n  }\n\n  try {\n    throw new Error(message);\n  } catch (e) {}\n} // src/connect/verifySubselectors.ts\n\n\nfunction verify(selector, methodName) {\n  if (!selector) {\n    throw new Error(`Unexpected value for ${methodName} in connect.`);\n  } else if (methodName === \"mapStateToProps\" || methodName === \"mapDispatchToProps\") {\n    if (!Object.prototype.hasOwnProperty.call(selector, \"dependsOnOwnProps\")) {\n      warning(`The selector for ${methodName} of connect did not specify a value for dependsOnOwnProps.`);\n    }\n  }\n}\n\nfunction verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps) {\n  verify(mapStateToProps, \"mapStateToProps\");\n  verify(mapDispatchToProps, \"mapDispatchToProps\");\n  verify(mergeProps, \"mergeProps\");\n} // src/connect/selectorFactory.ts\n\n\nfunction pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, {\n  areStatesEqual,\n  areOwnPropsEqual,\n  areStatePropsEqual\n}) {\n  let hasRunAtLeastOnce = false;\n  let state;\n  let ownProps;\n  let stateProps;\n  let dispatchProps;\n  let mergedProps;\n\n  function handleFirstCall(firstState, firstOwnProps) {\n    state = firstState;\n    ownProps = firstOwnProps;\n    stateProps = mapStateToProps(state, ownProps);\n    dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    hasRunAtLeastOnce = true;\n    return mergedProps;\n  }\n\n  function handleNewPropsAndNewState() {\n    stateProps = mapStateToProps(state, ownProps);\n    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleNewProps() {\n    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);\n    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleNewState() {\n    const nextStateProps = mapStateToProps(state, ownProps);\n    const statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);\n    stateProps = nextStateProps;\n    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleSubsequentCalls(nextState, nextOwnProps) {\n    const propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);\n    const stateChanged = !areStatesEqual(nextState, state, nextOwnProps, ownProps);\n    state = nextState;\n    ownProps = nextOwnProps;\n    if (propsChanged && stateChanged) return handleNewPropsAndNewState();\n    if (propsChanged) return handleNewProps();\n    if (stateChanged) return handleNewState();\n    return mergedProps;\n  }\n\n  return function pureFinalPropsSelector(nextState, nextOwnProps) {\n    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);\n  };\n}\n\nfunction finalPropsSelectorFactory(dispatch, _a) {\n  var _b = _a,\n      {\n    initMapStateToProps,\n    initMapDispatchToProps,\n    initMergeProps\n  } = _b,\n      options = __objRest(_b, [\"initMapStateToProps\", \"initMapDispatchToProps\", \"initMergeProps\"]);\n\n  const mapStateToProps = initMapStateToProps(dispatch, options);\n  const mapDispatchToProps = initMapDispatchToProps(dispatch, options);\n  const mergeProps = initMergeProps(dispatch, options);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps);\n  }\n\n  return pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);\n} // src/utils/bindActionCreators.ts\n\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  const boundActionCreators = {};\n\n  for (const key in actionCreators) {\n    const actionCreator = actionCreators[key];\n\n    if (typeof actionCreator === \"function\") {\n      boundActionCreators[key] = (...args) => dispatch(actionCreator(...args));\n    }\n  }\n\n  return boundActionCreators;\n} // src/utils/isPlainObject.ts\n\n\nfunction isPlainObject(obj) {\n  if (typeof obj !== \"object\" || obj === null) return false;\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null) return true;\n  let baseProto = proto;\n\n  while (Object.getPrototypeOf(baseProto) !== null) {\n    baseProto = Object.getPrototypeOf(baseProto);\n  }\n\n  return proto === baseProto;\n} // src/utils/verifyPlainObject.ts\n\n\nfunction verifyPlainObject(value, displayName, methodName) {\n  if (!isPlainObject(value)) {\n    warning(`${methodName}() in ${displayName} must return a plain object. Instead received ${value}.`);\n  }\n} // src/connect/wrapMapToProps.ts\n\n\nfunction wrapMapToPropsConstant(getConstant) {\n  return function initConstantSelector(dispatch) {\n    const constant = getConstant(dispatch);\n\n    function constantSelector() {\n      return constant;\n    }\n\n    constantSelector.dependsOnOwnProps = false;\n    return constantSelector;\n  };\n}\n\nfunction getDependsOnOwnProps(mapToProps) {\n  return mapToProps.dependsOnOwnProps ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;\n}\n\nfunction wrapMapToPropsFunc(mapToProps, methodName) {\n  return function initProxySelector(dispatch, {\n    displayName\n  }) {\n    const proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {\n      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch, void 0);\n    };\n\n    proxy.dependsOnOwnProps = true;\n\n    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {\n      proxy.mapToProps = mapToProps;\n      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);\n      let props = proxy(stateOrDispatch, ownProps);\n\n      if (typeof props === \"function\") {\n        proxy.mapToProps = props;\n        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);\n        props = proxy(stateOrDispatch, ownProps);\n      }\n\n      if (process.env.NODE_ENV !== \"production\") verifyPlainObject(props, displayName, methodName);\n      return props;\n    };\n\n    return proxy;\n  };\n} // src/connect/invalidArgFactory.ts\n\n\nfunction createInvalidArgFactory(arg, name) {\n  return (dispatch, options) => {\n    throw new Error(`Invalid value of type ${typeof arg} for ${name} argument when connecting component ${options.wrappedComponentName}.`);\n  };\n} // src/connect/mapDispatchToProps.ts\n\n\nfunction mapDispatchToPropsFactory(mapDispatchToProps) {\n  return mapDispatchToProps && typeof mapDispatchToProps === \"object\" ? wrapMapToPropsConstant(dispatch => // @ts-ignore\n  bindActionCreators(mapDispatchToProps, dispatch)) : !mapDispatchToProps ? wrapMapToPropsConstant(dispatch => ({\n    dispatch\n  })) : typeof mapDispatchToProps === \"function\" ? // @ts-ignore\n  wrapMapToPropsFunc(mapDispatchToProps, \"mapDispatchToProps\") : createInvalidArgFactory(mapDispatchToProps, \"mapDispatchToProps\");\n} // src/connect/mapStateToProps.ts\n\n\nfunction mapStateToPropsFactory(mapStateToProps) {\n  return !mapStateToProps ? wrapMapToPropsConstant(() => ({})) : typeof mapStateToProps === \"function\" ? // @ts-ignore\n  wrapMapToPropsFunc(mapStateToProps, \"mapStateToProps\") : createInvalidArgFactory(mapStateToProps, \"mapStateToProps\");\n} // src/connect/mergeProps.ts\n\n\nfunction defaultMergeProps(stateProps, dispatchProps, ownProps) {\n  return __spreadValues(__spreadValues(__spreadValues({}, ownProps), stateProps), dispatchProps);\n}\n\nfunction wrapMergePropsFunc(mergeProps) {\n  return function initMergePropsProxy(dispatch, {\n    displayName,\n    areMergedPropsEqual\n  }) {\n    let hasRunOnce = false;\n    let mergedProps;\n    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {\n      const nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n\n      if (hasRunOnce) {\n        if (!areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;\n      } else {\n        hasRunOnce = true;\n        mergedProps = nextMergedProps;\n        if (process.env.NODE_ENV !== \"production\") verifyPlainObject(mergedProps, displayName, \"mergeProps\");\n      }\n\n      return mergedProps;\n    };\n  };\n}\n\nfunction mergePropsFactory(mergeProps) {\n  return !mergeProps ? () => defaultMergeProps : typeof mergeProps === \"function\" ? wrapMergePropsFunc(mergeProps) : createInvalidArgFactory(mergeProps, \"mergeProps\");\n} // src/utils/batch.ts\n\n\nfunction defaultNoopBatch(callback) {\n  callback();\n} // src/utils/Subscription.ts\n\n\nfunction createListenerCollection() {\n  let first = null;\n  let last = null;\n  return {\n    clear() {\n      first = null;\n      last = null;\n    },\n\n    notify() {\n      defaultNoopBatch(() => {\n        let listener = first;\n\n        while (listener) {\n          listener.callback();\n          listener = listener.next;\n        }\n      });\n    },\n\n    get() {\n      const listeners = [];\n      let listener = first;\n\n      while (listener) {\n        listeners.push(listener);\n        listener = listener.next;\n      }\n\n      return listeners;\n    },\n\n    subscribe(callback) {\n      let isSubscribed = true;\n      const listener = last = {\n        callback,\n        next: null,\n        prev: last\n      };\n\n      if (listener.prev) {\n        listener.prev.next = listener;\n      } else {\n        first = listener;\n      }\n\n      return function unsubscribe() {\n        if (!isSubscribed || first === null) return;\n        isSubscribed = false;\n\n        if (listener.next) {\n          listener.next.prev = listener.prev;\n        } else {\n          last = listener.prev;\n        }\n\n        if (listener.prev) {\n          listener.prev.next = listener.next;\n        } else {\n          first = listener.next;\n        }\n      };\n    }\n\n  };\n}\n\nvar nullListeners = {\n  notify() {},\n\n  get: () => []\n};\n\nfunction createSubscription(store, parentSub) {\n  let unsubscribe;\n  let listeners = nullListeners;\n  let subscriptionsAmount = 0;\n  let selfSubscribed = false;\n\n  function addNestedSub(listener) {\n    trySubscribe();\n    const cleanupListener = listeners.subscribe(listener);\n    let removed = false;\n    return () => {\n      if (!removed) {\n        removed = true;\n        cleanupListener();\n        tryUnsubscribe();\n      }\n    };\n  }\n\n  function notifyNestedSubs() {\n    listeners.notify();\n  }\n\n  function handleChangeWrapper() {\n    if (subscription.onStateChange) {\n      subscription.onStateChange();\n    }\n  }\n\n  function isSubscribed() {\n    return selfSubscribed;\n  }\n\n  function trySubscribe() {\n    subscriptionsAmount++;\n\n    if (!unsubscribe) {\n      unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);\n      listeners = createListenerCollection();\n    }\n  }\n\n  function tryUnsubscribe() {\n    subscriptionsAmount--;\n\n    if (unsubscribe && subscriptionsAmount === 0) {\n      unsubscribe();\n      unsubscribe = void 0;\n      listeners.clear();\n      listeners = nullListeners;\n    }\n  }\n\n  function trySubscribeSelf() {\n    if (!selfSubscribed) {\n      selfSubscribed = true;\n      trySubscribe();\n    }\n  }\n\n  function tryUnsubscribeSelf() {\n    if (selfSubscribed) {\n      selfSubscribed = false;\n      tryUnsubscribe();\n    }\n  }\n\n  const subscription = {\n    addNestedSub,\n    notifyNestedSubs,\n    handleChangeWrapper,\n    isSubscribed,\n    trySubscribe: trySubscribeSelf,\n    tryUnsubscribe: tryUnsubscribeSelf,\n    getListeners: () => listeners\n  };\n  return subscription;\n} // src/utils/useIsomorphicLayoutEffect.ts\n\n\nvar canUseDOM = () => !!(typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\");\n\nvar isDOM = /* @__PURE__ */canUseDOM();\n\nvar isRunningInReactNative = () => typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\";\n\nvar isReactNative = /* @__PURE__ */isRunningInReactNative();\n\nvar getUseIsomorphicLayoutEffect = () => isDOM || isReactNative ? React.useLayoutEffect : React.useEffect;\n\nvar useIsomorphicLayoutEffect = /* @__PURE__ */getUseIsomorphicLayoutEffect(); // src/utils/shallowEqual.ts\n\nfunction is(x, y) {\n  if (x === y) {\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\nfunction shallowEqual(objA, objB) {\n  if (is(objA, objB)) return true;\n\n  if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n  if (keysA.length !== keysB.length) return false;\n\n  for (let i = 0; i < keysA.length; i++) {\n    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n} // src/utils/hoistStatics.ts\n\n\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  $$typeof: true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  $$typeof: true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {\n  [ForwardRef]: FORWARD_REF_STATICS,\n  [Memo]: MEMO_STATICS\n};\n\nfunction getStatics(component) {\n  if (isMemo(component)) {\n    return MEMO_STATICS;\n  }\n\n  return TYPE_STATICS[component[\"$$typeof\"]] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\n\nfunction hoistNonReactStatics(targetComponent, sourceComponent) {\n  if (typeof sourceComponent !== \"string\") {\n    if (objectPrototype) {\n      const inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent);\n      }\n    }\n\n    let keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    const targetStatics = getStatics(targetComponent);\n    const sourceStatics = getStatics(sourceComponent);\n\n    for (let i = 0; i < keys.length; ++i) {\n      const key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        const descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n} // src/components/Context.ts\n\n\nvar ContextKey = /* @__PURE__ */Symbol.for(`react-redux-context`);\nvar gT = typeof globalThis !== \"undefined\" ? globalThis :\n/* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */\n{};\n\nfunction getContext() {\n  var _a;\n\n  if (!React.createContext) return {};\n  const contextMap = (_a = gT[ContextKey]) != null ? _a : gT[ContextKey] = /* @__PURE__ */new Map();\n  let realContext = contextMap.get(React.createContext);\n\n  if (!realContext) {\n    realContext = React.createContext(null);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      realContext.displayName = \"ReactRedux\";\n    }\n\n    contextMap.set(React.createContext, realContext);\n  }\n\n  return realContext;\n}\n\nvar ReactReduxContext = /* @__PURE__ */getContext(); // src/components/connect.tsx\n\nvar NO_SUBSCRIPTION_ARRAY = [null, null];\n\nvar stringifyComponent = Comp => {\n  try {\n    return JSON.stringify(Comp);\n  } catch (err) {\n    return String(Comp);\n  }\n};\n\nfunction useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {\n  useIsomorphicLayoutEffect(() => effectFunc(...effectArgs), dependencies);\n}\n\nfunction captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs) {\n  lastWrapperProps.current = wrapperProps;\n  renderIsScheduled.current = false;\n\n  if (childPropsFromStoreUpdate.current) {\n    childPropsFromStoreUpdate.current = null;\n    notifyNestedSubs();\n  }\n}\n\nfunction subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, additionalSubscribeListener) {\n  if (!shouldHandleStateChanges) return () => {};\n  let didUnsubscribe = false;\n  let lastThrownError = null;\n\n  const checkForUpdates = () => {\n    if (didUnsubscribe || !isMounted.current) {\n      return;\n    }\n\n    const latestStoreState = store.getState();\n    let newChildProps, error;\n\n    try {\n      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);\n    } catch (e) {\n      error = e;\n      lastThrownError = e;\n    }\n\n    if (!error) {\n      lastThrownError = null;\n    }\n\n    if (newChildProps === lastChildProps.current) {\n      if (!renderIsScheduled.current) {\n        notifyNestedSubs();\n      }\n    } else {\n      lastChildProps.current = newChildProps;\n      childPropsFromStoreUpdate.current = newChildProps;\n      renderIsScheduled.current = true;\n      additionalSubscribeListener();\n    }\n  };\n\n  subscription.onStateChange = checkForUpdates;\n  subscription.trySubscribe();\n  checkForUpdates();\n\n  const unsubscribeWrapper = () => {\n    didUnsubscribe = true;\n    subscription.tryUnsubscribe();\n    subscription.onStateChange = null;\n\n    if (lastThrownError) {\n      throw lastThrownError;\n    }\n  };\n\n  return unsubscribeWrapper;\n}\n\nfunction strictEqual(a, b) {\n  return a === b;\n}\n\nvar hasWarnedAboutDeprecatedPureOption = false;\n\nfunction connect(mapStateToProps, mapDispatchToProps, mergeProps, {\n  // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.\n  // @ts-ignore\n  pure,\n  areStatesEqual = strictEqual,\n  areOwnPropsEqual = shallowEqual,\n  areStatePropsEqual = shallowEqual,\n  areMergedPropsEqual = shallowEqual,\n  // use React's forwardRef to expose a ref of the wrapped component\n  forwardRef = false,\n  // the context consumer to use\n  context = ReactReduxContext\n} = {}) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (pure !== void 0 && !hasWarnedAboutDeprecatedPureOption) {\n      hasWarnedAboutDeprecatedPureOption = true;\n      warning('The `pure` option has been removed. `connect` is now always a \"pure/memoized\" component');\n    }\n  }\n\n  const Context = context;\n  const initMapStateToProps = mapStateToPropsFactory(mapStateToProps);\n  const initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps);\n  const initMergeProps = mergePropsFactory(mergeProps);\n  const shouldHandleStateChanges = Boolean(mapStateToProps);\n\n  const wrapWithConnect = WrappedComponent => {\n    if (process.env.NODE_ENV !== \"production\") {\n      const isValid = /* @__PURE__ */isValidElementType(WrappedComponent);\n      if (!isValid) throw new Error(`You must pass a component to the function returned by connect. Instead received ${stringifyComponent(WrappedComponent)}`);\n    }\n\n    const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n    const displayName = `Connect(${wrappedComponentName})`;\n    const selectorFactoryOptions = {\n      shouldHandleStateChanges,\n      displayName,\n      wrappedComponentName,\n      WrappedComponent,\n      // @ts-ignore\n      initMapStateToProps,\n      initMapDispatchToProps,\n      initMergeProps,\n      areStatesEqual,\n      areStatePropsEqual,\n      areOwnPropsEqual,\n      areMergedPropsEqual\n    };\n\n    function ConnectFunction(props) {\n      const [propsContext, reactReduxForwardedRef, wrapperProps] = React.useMemo(() => {\n        const _a = props,\n              {\n          reactReduxForwardedRef: reactReduxForwardedRef2\n        } = _a,\n              wrapperProps2 = __objRest(_a, [\"reactReduxForwardedRef\"]);\n\n        return [props.context, reactReduxForwardedRef2, wrapperProps2];\n      }, [props]);\n      const ContextToUse = React.useMemo(() => {\n        let ResultContext = Context;\n\n        if (propsContext == null ? void 0 : propsContext.Consumer) {\n          if (process.env.NODE_ENV !== \"production\") {\n            const isValid = /* @__PURE__ */isContextConsumer( // @ts-ignore\n\n            /* @__PURE__ */\n            React.createElement(propsContext.Consumer, null));\n\n            if (!isValid) {\n              throw new Error(\"You must pass a valid React context consumer as `props.context`\");\n            }\n\n            ResultContext = propsContext;\n          }\n        }\n\n        return ResultContext;\n      }, [propsContext, Context]);\n      const contextValue = React.useContext(ContextToUse);\n      const didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);\n      const didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);\n\n      if (process.env.NODE_ENV !== \"production\" && !didStoreComeFromProps && !didStoreComeFromContext) {\n        throw new Error(`Could not find \"store\" in the context of \"${displayName}\". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to ${displayName} in connect options.`);\n      }\n\n      const store = didStoreComeFromProps ? props.store : contextValue.store;\n      const getServerState = didStoreComeFromContext ? contextValue.getServerState : store.getState;\n      const childPropsSelector = React.useMemo(() => {\n        return finalPropsSelectorFactory(store.dispatch, selectorFactoryOptions);\n      }, [store]);\n      const [subscription, notifyNestedSubs] = React.useMemo(() => {\n        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY;\n        const subscription2 = createSubscription(store, didStoreComeFromProps ? void 0 : contextValue.subscription);\n        const notifyNestedSubs2 = subscription2.notifyNestedSubs.bind(subscription2);\n        return [subscription2, notifyNestedSubs2];\n      }, [store, didStoreComeFromProps, contextValue]);\n      const overriddenContextValue = React.useMemo(() => {\n        if (didStoreComeFromProps) {\n          return contextValue;\n        }\n\n        return __spreadProps(__spreadValues({}, contextValue), {\n          subscription\n        });\n      }, [didStoreComeFromProps, contextValue, subscription]);\n      const lastChildProps = React.useRef(void 0);\n      const lastWrapperProps = React.useRef(wrapperProps);\n      const childPropsFromStoreUpdate = React.useRef(void 0);\n      const renderIsScheduled = React.useRef(false);\n      const isMounted = React.useRef(false);\n      const latestSubscriptionCallbackError = React.useRef(void 0);\n      useIsomorphicLayoutEffect(() => {\n        isMounted.current = true;\n        return () => {\n          isMounted.current = false;\n        };\n      }, []);\n      const actualChildPropsSelector = React.useMemo(() => {\n        const selector = () => {\n          if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {\n            return childPropsFromStoreUpdate.current;\n          }\n\n          return childPropsSelector(store.getState(), wrapperProps);\n        };\n\n        return selector;\n      }, [store, wrapperProps]);\n      const subscribeForReact = React.useMemo(() => {\n        const subscribe = reactListener => {\n          if (!subscription) {\n            return () => {};\n          }\n\n          return subscribeUpdates(shouldHandleStateChanges, store, subscription, // @ts-ignore\n          childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, reactListener);\n        };\n\n        return subscribe;\n      }, [subscription]);\n      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs]);\n      let actualChildProps;\n\n      try {\n        actualChildProps = React.useSyncExternalStore( // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing\n        subscribeForReact, // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,\n        // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.\n        actualChildPropsSelector, getServerState ? () => childPropsSelector(getServerState(), wrapperProps) : actualChildPropsSelector);\n      } catch (err) {\n        if (latestSubscriptionCallbackError.current) {\n          ;\n          err.message += `\nThe error may be correlated with this previous error:\n${latestSubscriptionCallbackError.current.stack}\n\n`;\n        }\n\n        throw err;\n      }\n\n      useIsomorphicLayoutEffect(() => {\n        latestSubscriptionCallbackError.current = void 0;\n        childPropsFromStoreUpdate.current = void 0;\n        lastChildProps.current = actualChildProps;\n      });\n      const renderedWrappedComponent = React.useMemo(() => {\n        return (// @ts-ignore\n\n          /* @__PURE__ */\n          React.createElement(WrappedComponent, __spreadProps(__spreadValues({}, actualChildProps), {\n            ref: reactReduxForwardedRef\n          }))\n        );\n      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]);\n      const renderedChild = React.useMemo(() => {\n        if (shouldHandleStateChanges) {\n          return /* @__PURE__ */React.createElement(ContextToUse.Provider, {\n            value: overriddenContextValue\n          }, renderedWrappedComponent);\n        }\n\n        return renderedWrappedComponent;\n      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);\n      return renderedChild;\n    }\n\n    const _Connect = React.memo(ConnectFunction);\n\n    const Connect = _Connect;\n    Connect.WrappedComponent = WrappedComponent;\n    Connect.displayName = ConnectFunction.displayName = displayName;\n\n    if (forwardRef) {\n      const _forwarded = React.forwardRef(function forwardConnectRef(props, ref) {\n        return /* @__PURE__ */React.createElement(Connect, __spreadProps(__spreadValues({}, props), {\n          reactReduxForwardedRef: ref\n        }));\n      });\n\n      const forwarded = _forwarded;\n      forwarded.displayName = displayName;\n      forwarded.WrappedComponent = WrappedComponent;\n      return /* @__PURE__ */hoistNonReactStatics(forwarded, WrappedComponent);\n    }\n\n    return /* @__PURE__ */hoistNonReactStatics(Connect, WrappedComponent);\n  };\n\n  return wrapWithConnect;\n}\n\nvar connect_default = connect; // src/components/Provider.tsx\n\nfunction Provider(providerProps) {\n  const {\n    children,\n    context,\n    serverState,\n    store\n  } = providerProps;\n  const contextValue = React.useMemo(() => {\n    const subscription = createSubscription(store);\n    const baseContextValue = {\n      store,\n      subscription,\n      getServerState: serverState ? () => serverState : void 0\n    };\n\n    if (process.env.NODE_ENV === \"production\") {\n      return baseContextValue;\n    } else {\n      const {\n        identityFunctionCheck = \"once\",\n        stabilityCheck = \"once\"\n      } = providerProps;\n      return /* @__PURE__ */Object.assign(baseContextValue, {\n        stabilityCheck,\n        identityFunctionCheck\n      });\n    }\n  }, [store, serverState]);\n  const previousState = React.useMemo(() => store.getState(), [store]);\n  useIsomorphicLayoutEffect(() => {\n    const {\n      subscription\n    } = contextValue;\n    subscription.onStateChange = subscription.notifyNestedSubs;\n    subscription.trySubscribe();\n\n    if (previousState !== store.getState()) {\n      subscription.notifyNestedSubs();\n    }\n\n    return () => {\n      subscription.tryUnsubscribe();\n      subscription.onStateChange = void 0;\n    };\n  }, [contextValue, previousState]);\n  const Context = context || ReactReduxContext;\n  return /* @__PURE__ */React.createElement(Context.Provider, {\n    value: contextValue\n  }, children);\n}\n\nvar Provider_default = Provider; // src/hooks/useReduxContext.ts\n\nfunction createReduxContextHook(context = ReactReduxContext) {\n  return function useReduxContext2() {\n    const contextValue = React.useContext(context);\n\n    if (process.env.NODE_ENV !== \"production\" && !contextValue) {\n      throw new Error(\"could not find react-redux context value; please ensure the component is wrapped in a <Provider>\");\n    }\n\n    return contextValue;\n  };\n}\n\nvar useReduxContext = /* @__PURE__ */createReduxContextHook(); // src/hooks/useStore.ts\n\nfunction createStoreHook(context = ReactReduxContext) {\n  const useReduxContext2 = context === ReactReduxContext ? useReduxContext : // @ts-ignore\n  createReduxContextHook(context);\n\n  const useStore2 = () => {\n    const {\n      store\n    } = useReduxContext2();\n    return store;\n  };\n\n  Object.assign(useStore2, {\n    withTypes: () => useStore2\n  });\n  return useStore2;\n}\n\nvar useStore = /* @__PURE__ */createStoreHook(); // src/hooks/useDispatch.ts\n\nfunction createDispatchHook(context = ReactReduxContext) {\n  const useStore2 = context === ReactReduxContext ? useStore : createStoreHook(context);\n\n  const useDispatch2 = () => {\n    const store = useStore2();\n    return store.dispatch;\n  };\n\n  Object.assign(useDispatch2, {\n    withTypes: () => useDispatch2\n  });\n  return useDispatch2;\n}\n\nvar useDispatch = /* @__PURE__ */createDispatchHook(); // src/hooks/useSelector.ts\n\nimport { useSyncExternalStoreWithSelector } from \"use-sync-external-store/with-selector.js\";\n\nvar refEquality = (a, b) => a === b;\n\nfunction createSelectorHook(context = ReactReduxContext) {\n  const useReduxContext2 = context === ReactReduxContext ? useReduxContext : createReduxContextHook(context);\n\n  const useSelector2 = (selector, equalityFnOrOptions = {}) => {\n    const {\n      equalityFn = refEquality\n    } = typeof equalityFnOrOptions === \"function\" ? {\n      equalityFn: equalityFnOrOptions\n    } : equalityFnOrOptions;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!selector) {\n        throw new Error(`You must pass a selector to useSelector`);\n      }\n\n      if (typeof selector !== \"function\") {\n        throw new Error(`You must pass a function as a selector to useSelector`);\n      }\n\n      if (typeof equalityFn !== \"function\") {\n        throw new Error(`You must pass a function as an equality function to useSelector`);\n      }\n    }\n\n    const reduxContext = useReduxContext2();\n    const {\n      store,\n      subscription,\n      getServerState\n    } = reduxContext;\n    const firstRun = React.useRef(true);\n    const wrappedSelector = React.useCallback({\n      [selector.name](state) {\n        const selected = selector(state);\n\n        if (process.env.NODE_ENV !== \"production\") {\n          const {\n            devModeChecks = {}\n          } = typeof equalityFnOrOptions === \"function\" ? {} : equalityFnOrOptions;\n          const {\n            identityFunctionCheck,\n            stabilityCheck\n          } = reduxContext;\n\n          const {\n            identityFunctionCheck: finalIdentityFunctionCheck,\n            stabilityCheck: finalStabilityCheck\n          } = __spreadValues({\n            stabilityCheck,\n            identityFunctionCheck\n          }, devModeChecks);\n\n          if (finalStabilityCheck === \"always\" || finalStabilityCheck === \"once\" && firstRun.current) {\n            const toCompare = selector(state);\n\n            if (!equalityFn(selected, toCompare)) {\n              let stack = void 0;\n\n              try {\n                throw new Error();\n              } catch (e) {\n                ;\n                ({\n                  stack\n                } = e);\n              }\n\n              console.warn(\"Selector \" + (selector.name || \"unknown\") + \" returned a different result when called with the same parameters. This can lead to unnecessary rerenders.\\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization\", {\n                state,\n                selected,\n                selected2: toCompare,\n                stack\n              });\n            }\n          }\n\n          if (finalIdentityFunctionCheck === \"always\" || finalIdentityFunctionCheck === \"once\" && firstRun.current) {\n            if (selected === state) {\n              let stack = void 0;\n\n              try {\n                throw new Error();\n              } catch (e) {\n                ;\n                ({\n                  stack\n                } = e);\n              }\n\n              console.warn(\"Selector \" + (selector.name || \"unknown\") + \" returned the root state when called. This can lead to unnecessary rerenders.\\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.\", {\n                stack\n              });\n            }\n          }\n\n          if (firstRun.current) firstRun.current = false;\n        }\n\n        return selected;\n      }\n\n    }[selector.name], [selector]);\n    const selectedState = useSyncExternalStoreWithSelector(subscription.addNestedSub, store.getState, getServerState || store.getState, wrappedSelector, equalityFn);\n    React.useDebugValue(selectedState);\n    return selectedState;\n  };\n\n  Object.assign(useSelector2, {\n    withTypes: () => useSelector2\n  });\n  return useSelector2;\n}\n\nvar useSelector = /* @__PURE__ */createSelectorHook(); // src/exports.ts\n\nvar batch = defaultNoopBatch;\nexport { Provider_default as Provider, ReactReduxContext, batch, connect_default as connect, createDispatchHook, createSelectorHook, createStoreHook, shallowEqual, useDispatch, useSelector, useStore };","map":{"version":3,"sources":["../src/utils/react.ts","../src/utils/react-is.ts","../src/utils/warning.ts","../src/connect/verifySubselectors.ts","../src/connect/selectorFactory.ts","../src/utils/bindActionCreators.ts","../src/utils/isPlainObject.ts","../src/utils/verifyPlainObject.ts","../src/connect/wrapMapToProps.ts","../src/connect/invalidArgFactory.ts","../src/connect/mapDispatchToProps.ts","../src/connect/mapStateToProps.ts","../src/connect/mergeProps.ts","../src/utils/batch.ts","../src/utils/Subscription.ts","../src/utils/useIsomorphicLayoutEffect.ts","../src/utils/shallowEqual.ts","../src/utils/hoistStatics.ts","../src/components/Context.ts","../src/components/connect.tsx","../src/components/Provider.tsx","../src/hooks/useReduxContext.ts","../src/hooks/useStore.ts","../src/hooks/useDispatch.ts","../src/hooks/useSelector.ts","../src/exports.ts"],"names":["wrapperProps","reactReduxForwardedRef","subscription","notifyNestedSubs","useReduxContext","useStore","useDispatch","useSelector"],"mappings":"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","sourcesContent":["import * as React from 'react'\n\nexport { React }\n","import type { ElementType, MemoExoticComponent, ReactElement } from 'react'\nimport { React } from './react'\n\n// Directly ported from:\n// https://unpkg.com/browse/react-is@19.0.0/cjs/react-is.production.js\n// It's very possible this could change in the future, but given that\n// we only use these in `connect`, this is a low priority.\n\nexport const IS_REACT_19 = /* @__PURE__ */ React.version.startsWith('19')\n\nconst REACT_ELEMENT_TYPE = /* @__PURE__ */ Symbol.for(\n  IS_REACT_19 ? 'react.transitional.element' : 'react.element',\n)\nconst REACT_PORTAL_TYPE = /* @__PURE__ */ Symbol.for('react.portal')\nconst REACT_FRAGMENT_TYPE = /* @__PURE__ */ Symbol.for('react.fragment')\nconst REACT_STRICT_MODE_TYPE = /* @__PURE__ */ Symbol.for('react.strict_mode')\nconst REACT_PROFILER_TYPE = /* @__PURE__ */ Symbol.for('react.profiler')\nconst REACT_CONSUMER_TYPE = /* @__PURE__ */ Symbol.for('react.consumer')\nconst REACT_CONTEXT_TYPE = /* @__PURE__ */ Symbol.for('react.context')\nconst REACT_FORWARD_REF_TYPE = /* @__PURE__ */ Symbol.for('react.forward_ref')\nconst REACT_SUSPENSE_TYPE = /* @__PURE__ */ Symbol.for('react.suspense')\nconst REACT_SUSPENSE_LIST_TYPE = /* @__PURE__ */ Symbol.for(\n  'react.suspense_list',\n)\nconst REACT_MEMO_TYPE = /* @__PURE__ */ Symbol.for('react.memo')\nconst REACT_LAZY_TYPE = /* @__PURE__ */ Symbol.for('react.lazy')\nconst REACT_OFFSCREEN_TYPE = /* @__PURE__ */ Symbol.for('react.offscreen')\nconst REACT_CLIENT_REFERENCE = /* @__PURE__ */ Symbol.for(\n  'react.client.reference',\n)\n\nexport const ForwardRef = REACT_FORWARD_REF_TYPE\nexport const Memo = REACT_MEMO_TYPE\n\nexport function isValidElementType(type: any): type is ElementType {\n  return typeof type === 'string' ||\n    typeof type === 'function' ||\n    type === REACT_FRAGMENT_TYPE ||\n    type === REACT_PROFILER_TYPE ||\n    type === REACT_STRICT_MODE_TYPE ||\n    type === REACT_SUSPENSE_TYPE ||\n    type === REACT_SUSPENSE_LIST_TYPE ||\n    type === REACT_OFFSCREEN_TYPE ||\n    (typeof type === 'object' &&\n      type !== null &&\n      (type.$$typeof === REACT_LAZY_TYPE ||\n        type.$$typeof === REACT_MEMO_TYPE ||\n        type.$$typeof === REACT_CONTEXT_TYPE ||\n        type.$$typeof === REACT_CONSUMER_TYPE ||\n        type.$$typeof === REACT_FORWARD_REF_TYPE ||\n        type.$$typeof === REACT_CLIENT_REFERENCE ||\n        type.getModuleId !== undefined))\n    ? !0\n    : !1\n}\n\nfunction typeOf(object: any): symbol | undefined {\n  if (typeof object === 'object' && object !== null) {\n    const { $$typeof } = object\n\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        switch (((object = object.type), object)) {\n          case REACT_FRAGMENT_TYPE:\n          case REACT_PROFILER_TYPE:\n          case REACT_STRICT_MODE_TYPE:\n          case REACT_SUSPENSE_TYPE:\n          case REACT_SUSPENSE_LIST_TYPE:\n            return object\n          default:\n            switch (((object = object && object.$$typeof), object)) {\n              case REACT_CONTEXT_TYPE:\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_LAZY_TYPE:\n              case REACT_MEMO_TYPE:\n                return object\n              case REACT_CONSUMER_TYPE:\n                return object\n              default:\n                return $$typeof\n            }\n        }\n      case REACT_PORTAL_TYPE:\n        return $$typeof\n    }\n  }\n}\n\nexport function isContextConsumer(object: any): object is ReactElement {\n  return IS_REACT_19\n    ? typeOf(object) === REACT_CONSUMER_TYPE\n    : typeOf(object) === REACT_CONTEXT_TYPE\n}\n\nexport function isMemo(object: any): object is MemoExoticComponent<any> {\n  return typeOf(object) === REACT_MEMO_TYPE\n}\n","/**\r\n * Prints a warning in the console if it exists.\r\n *\r\n * @param {String} message The warning message.\r\n * @returns {void}\r\n */\r\nexport default function warning(message: string) {\r\n  /* eslint-disable no-console */\r\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\r\n    console.error(message)\r\n  }\r\n  /* eslint-enable no-console */\r\n  try {\r\n    // This error was thrown as a convenience so that if you enable\r\n    // \"break on all exceptions\" in your console,\r\n    // it would pause the execution at this line.\r\n    throw new Error(message)\r\n    /* eslint-disable no-empty */\r\n  } catch (e) {}\r\n  /* eslint-enable no-empty */\r\n}\r\n","import warning from '../utils/warning'\n\nfunction verify(selector: unknown, methodName: string): void {\n  if (!selector) {\n    throw new Error(`Unexpected value for ${methodName} in connect.`)\n  } else if (\n    methodName === 'mapStateToProps' ||\n    methodName === 'mapDispatchToProps'\n  ) {\n    if (!Object.prototype.hasOwnProperty.call(selector, 'dependsOnOwnProps')) {\n      warning(\n        `The selector for ${methodName} of connect did not specify a value for dependsOnOwnProps.`,\n      )\n    }\n  }\n}\n\nexport default function verifySubselectors(\n  mapStateToProps: unknown,\n  mapDispatchToProps: unknown,\n  mergeProps: unknown,\n): void {\n  verify(mapStateToProps, 'mapStateToProps')\n  verify(mapDispatchToProps, 'mapDispatchToProps')\n  verify(mergeProps, 'mergeProps')\n}\n","import type { Dispatch, Action } from 'redux'\nimport type { ComponentType } from 'react'\nimport verifySubselectors from './verifySubselectors'\nimport type { EqualityFn, ExtendedEqualityFn } from '../types'\n\nexport type SelectorFactory<S, TProps, TOwnProps, TFactoryOptions> = (\n  dispatch: Dispatch<Action<string>>,\n  factoryOptions: TFactoryOptions,\n) => Selector<S, TProps, TOwnProps>\n\nexport type Selector<S, TProps, TOwnProps = null> = TOwnProps extends\n  | null\n  | undefined\n  ? (state: S) => TProps\n  : (state: S, ownProps: TOwnProps) => TProps\n\nexport type MapStateToProps<TStateProps, TOwnProps, State> = (\n  state: State,\n  ownProps: TOwnProps,\n) => TStateProps\n\nexport type MapStateToPropsFactory<TStateProps, TOwnProps, State> = (\n  initialState: State,\n  ownProps: TOwnProps,\n) => MapStateToProps<TStateProps, TOwnProps, State>\n\nexport type MapStateToPropsParam<TStateProps, TOwnProps, State> =\n  | MapStateToPropsFactory<TStateProps, TOwnProps, State>\n  | MapStateToProps<TStateProps, TOwnProps, State>\n  | null\n  | undefined\n\nexport type MapDispatchToPropsFunction<TDispatchProps, TOwnProps> = (\n  dispatch: Dispatch<Action<string>>,\n  ownProps: TOwnProps,\n) => TDispatchProps\n\nexport type MapDispatchToProps<TDispatchProps, TOwnProps> =\n  | MapDispatchToPropsFunction<TDispatchProps, TOwnProps>\n  | TDispatchProps\n\nexport type MapDispatchToPropsFactory<TDispatchProps, TOwnProps> = (\n  dispatch: Dispatch<Action<string>>,\n  ownProps: TOwnProps,\n) => MapDispatchToPropsFunction<TDispatchProps, TOwnProps>\n\nexport type MapDispatchToPropsParam<TDispatchProps, TOwnProps> =\n  | MapDispatchToPropsFactory<TDispatchProps, TOwnProps>\n  | MapDispatchToProps<TDispatchProps, TOwnProps>\n\nexport type MapDispatchToPropsNonObject<TDispatchProps, TOwnProps> =\n  | MapDispatchToPropsFactory<TDispatchProps, TOwnProps>\n  | MapDispatchToPropsFunction<TDispatchProps, TOwnProps>\n\nexport type MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps> = (\n  stateProps: TStateProps,\n  dispatchProps: TDispatchProps,\n  ownProps: TOwnProps,\n) => TMergedProps\n\ninterface PureSelectorFactoryComparisonOptions<TStateProps, TOwnProps, State> {\n  readonly areStatesEqual: ExtendedEqualityFn<State, TOwnProps>\n  readonly areStatePropsEqual: EqualityFn<TStateProps>\n  readonly areOwnPropsEqual: EqualityFn<TOwnProps>\n}\n\nfunction pureFinalPropsSelectorFactory<\n  TStateProps,\n  TOwnProps,\n  TDispatchProps,\n  TMergedProps,\n  State,\n>(\n  mapStateToProps: WrappedMapStateToProps<TStateProps, TOwnProps, State>,\n  mapDispatchToProps: WrappedMapDispatchToProps<TDispatchProps, TOwnProps>,\n  mergeProps: MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>,\n  dispatch: Dispatch<Action<string>>,\n  {\n    areStatesEqual,\n    areOwnPropsEqual,\n    areStatePropsEqual,\n  }: PureSelectorFactoryComparisonOptions<TStateProps, TOwnProps, State>,\n) {\n  let hasRunAtLeastOnce = false\n  let state: State\n  let ownProps: TOwnProps\n  let stateProps: TStateProps\n  let dispatchProps: TDispatchProps\n  let mergedProps: TMergedProps\n\n  function handleFirstCall(firstState: State, firstOwnProps: TOwnProps) {\n    state = firstState\n    ownProps = firstOwnProps\n    stateProps = mapStateToProps(state, ownProps)\n    dispatchProps = mapDispatchToProps(dispatch, ownProps)\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\n    hasRunAtLeastOnce = true\n    return mergedProps\n  }\n\n  function handleNewPropsAndNewState() {\n    stateProps = mapStateToProps(state, ownProps)\n\n    if (mapDispatchToProps.dependsOnOwnProps)\n      dispatchProps = mapDispatchToProps(dispatch, ownProps)\n\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\n    return mergedProps\n  }\n\n  function handleNewProps() {\n    if (mapStateToProps.dependsOnOwnProps)\n      stateProps = mapStateToProps(state, ownProps)\n\n    if (mapDispatchToProps.dependsOnOwnProps)\n      dispatchProps = mapDispatchToProps(dispatch, ownProps)\n\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\n    return mergedProps\n  }\n\n  function handleNewState() {\n    const nextStateProps = mapStateToProps(state, ownProps)\n    const statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps)\n    stateProps = nextStateProps\n\n    if (statePropsChanged)\n      mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\n\n    return mergedProps\n  }\n\n  function handleSubsequentCalls(nextState: State, nextOwnProps: TOwnProps) {\n    const propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps)\n    const stateChanged = !areStatesEqual(\n      nextState,\n      state,\n      nextOwnProps,\n      ownProps,\n    )\n    state = nextState\n    ownProps = nextOwnProps\n\n    if (propsChanged && stateChanged) return handleNewPropsAndNewState()\n    if (propsChanged) return handleNewProps()\n    if (stateChanged) return handleNewState()\n    return mergedProps\n  }\n\n  return function pureFinalPropsSelector(\n    nextState: State,\n    nextOwnProps: TOwnProps,\n  ) {\n    return hasRunAtLeastOnce\n      ? handleSubsequentCalls(nextState, nextOwnProps)\n      : handleFirstCall(nextState, nextOwnProps)\n  }\n}\n\ninterface WrappedMapStateToProps<TStateProps, TOwnProps, State> {\n  (state: State, ownProps: TOwnProps): TStateProps\n  readonly dependsOnOwnProps: boolean\n}\n\ninterface WrappedMapDispatchToProps<TDispatchProps, TOwnProps> {\n  (dispatch: Dispatch<Action<string>>, ownProps: TOwnProps): TDispatchProps\n  readonly dependsOnOwnProps: boolean\n}\n\nexport interface InitOptions<TStateProps, TOwnProps, TMergedProps, State>\n  extends PureSelectorFactoryComparisonOptions<TStateProps, TOwnProps, State> {\n  readonly shouldHandleStateChanges: boolean\n  readonly displayName: string\n  readonly wrappedComponentName: string\n  readonly WrappedComponent: ComponentType<TOwnProps>\n  readonly areMergedPropsEqual: EqualityFn<TMergedProps>\n}\n\nexport interface SelectorFactoryOptions<\n  TStateProps,\n  TOwnProps,\n  TDispatchProps,\n  TMergedProps,\n  State,\n> extends InitOptions<TStateProps, TOwnProps, TMergedProps, State> {\n  readonly initMapStateToProps: (\n    dispatch: Dispatch<Action<string>>,\n    options: InitOptions<TStateProps, TOwnProps, TMergedProps, State>,\n  ) => WrappedMapStateToProps<TStateProps, TOwnProps, State>\n  readonly initMapDispatchToProps: (\n    dispatch: Dispatch<Action<string>>,\n    options: InitOptions<TStateProps, TOwnProps, TMergedProps, State>,\n  ) => WrappedMapDispatchToProps<TDispatchProps, TOwnProps>\n  readonly initMergeProps: (\n    dispatch: Dispatch<Action<string>>,\n    options: InitOptions<TStateProps, TOwnProps, TMergedProps, State>,\n  ) => MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>\n}\n\n// TODO: Add more comments\n\n// The selector returned by selectorFactory will memoize its results,\n// allowing connect's shouldComponentUpdate to return false if final\n// props have not changed.\n\nexport default function finalPropsSelectorFactory<\n  TStateProps,\n  TOwnProps,\n  TDispatchProps,\n  TMergedProps,\n  State,\n>(\n  dispatch: Dispatch<Action<string>>,\n  {\n    initMapStateToProps,\n    initMapDispatchToProps,\n    initMergeProps,\n    ...options\n  }: SelectorFactoryOptions<\n    TStateProps,\n    TOwnProps,\n    TDispatchProps,\n    TMergedProps,\n    State\n  >,\n) {\n  const mapStateToProps = initMapStateToProps(dispatch, options)\n  const mapDispatchToProps = initMapDispatchToProps(dispatch, options)\n  const mergeProps = initMergeProps(dispatch, options)\n\n  if (process.env.NODE_ENV !== 'production') {\n    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps)\n  }\n\n  return pureFinalPropsSelectorFactory<\n    TStateProps,\n    TOwnProps,\n    TDispatchProps,\n    TMergedProps,\n    State\n  >(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options)\n}\n","import type { ActionCreatorsMapObject, Dispatch } from 'redux'\n\nexport default function bindActionCreators(\n  actionCreators: ActionCreatorsMapObject,\n  dispatch: Dispatch,\n): ActionCreatorsMapObject {\n  const boundActionCreators: ActionCreatorsMapObject = {}\n\n  for (const key in actionCreators) {\n    const actionCreator = actionCreators[key]\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = (...args) => dispatch(actionCreator(...args))\n    }\n  }\n  return boundActionCreators\n}\n","/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nexport default function isPlainObject(obj: unknown) {\n  if (typeof obj !== 'object' || obj === null) return false\n\n  const proto = Object.getPrototypeOf(obj)\n  if (proto === null) return true\n\n  let baseProto = proto\n  while (Object.getPrototypeOf(baseProto) !== null) {\n    baseProto = Object.getPrototypeOf(baseProto)\n  }\n\n  return proto === baseProto\n}\n","import isPlainObject from './isPlainObject'\nimport warning from './warning'\n\nexport default function verifyPlainObject(\n  value: unknown,\n  displayName: string,\n  methodName: string,\n) {\n  if (!isPlainObject(value)) {\n    warning(\n      `${methodName}() in ${displayName} must return a plain object. Instead received ${value}.`,\n    )\n  }\n}\n","import type { ActionCreatorsMapObject, Dispatch, ActionCreator } from 'redux'\n\nimport type { FixTypeLater } from '../types'\nimport verifyPlainObject from '../utils/verifyPlainObject'\n\ntype AnyState = { [key: string]: any }\ntype StateOrDispatch<S extends AnyState = AnyState> = S | Dispatch\n\ntype AnyProps = { [key: string]: any }\n\nexport type MapToProps<P extends AnyProps = AnyProps> = {\n  // eslint-disable-next-line no-unused-vars\n  (stateOrDispatch: StateOrDispatch, ownProps?: P): FixTypeLater\n  dependsOnOwnProps?: boolean\n}\n\nexport function wrapMapToPropsConstant(\n  // * Note:\n  //  It seems that the dispatch argument\n  //  could be a dispatch function in some cases (ex: whenMapDispatchToPropsIsMissing)\n  //  and a state object in some others (ex: whenMapStateToPropsIsMissing)\n  // eslint-disable-next-line no-unused-vars\n  getConstant: (dispatch: Dispatch) =>\n    | {\n        dispatch?: Dispatch\n        dependsOnOwnProps?: boolean\n      }\n    | ActionCreatorsMapObject\n    | ActionCreator<any>,\n) {\n  return function initConstantSelector(dispatch: Dispatch) {\n    const constant = getConstant(dispatch)\n\n    function constantSelector() {\n      return constant\n    }\n    constantSelector.dependsOnOwnProps = false\n    return constantSelector\n  }\n}\n\n// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args\n// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine\n// whether mapToProps needs to be invoked when props have changed.\n//\n// A length of one signals that mapToProps does not depend on props from the parent component.\n// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and\n// therefore not reporting its length accurately..\n// TODO Can this get pulled out so that we can subscribe directly to the store if we don't need ownProps?\nfunction getDependsOnOwnProps(mapToProps: MapToProps) {\n  return mapToProps.dependsOnOwnProps\n    ? Boolean(mapToProps.dependsOnOwnProps)\n    : mapToProps.length !== 1\n}\n\n// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,\n// this function wraps mapToProps in a proxy function which does several things:\n//\n//  * Detects whether the mapToProps function being called depends on props, which\n//    is used by selectorFactory to decide if it should reinvoke on props changes.\n//\n//  * On first call, handles mapToProps if returns another function, and treats that\n//    new function as the true mapToProps for subsequent calls.\n//\n//  * On first call, verifies the first result is a plain object, in order to warn\n//    the developer that their mapToProps function is not returning a valid result.\n//\nexport function wrapMapToPropsFunc<P extends AnyProps = AnyProps>(\n  mapToProps: MapToProps,\n  methodName: string,\n) {\n  return function initProxySelector(\n    dispatch: Dispatch,\n    { displayName }: { displayName: string },\n  ) {\n    const proxy = function mapToPropsProxy(\n      stateOrDispatch: StateOrDispatch,\n      ownProps?: P,\n    ): MapToProps {\n      return proxy.dependsOnOwnProps\n        ? proxy.mapToProps(stateOrDispatch, ownProps)\n        : proxy.mapToProps(stateOrDispatch, undefined)\n    }\n\n    // allow detectFactoryAndVerify to get ownProps\n    proxy.dependsOnOwnProps = true\n\n    proxy.mapToProps = function detectFactoryAndVerify(\n      stateOrDispatch: StateOrDispatch,\n      ownProps?: P,\n    ): MapToProps {\n      proxy.mapToProps = mapToProps\n      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps)\n      let props = proxy(stateOrDispatch, ownProps)\n\n      if (typeof props === 'function') {\n        proxy.mapToProps = props\n        proxy.dependsOnOwnProps = getDependsOnOwnProps(props)\n        props = proxy(stateOrDispatch, ownProps)\n      }\n\n      if (process.env.NODE_ENV !== 'production')\n        verifyPlainObject(props, displayName, methodName)\n\n      return props\n    }\n\n    return proxy\n  }\n}\n","import type { Action, Dispatch } from 'redux'\n\nexport function createInvalidArgFactory(arg: unknown, name: string) {\n  return (\n    dispatch: Dispatch<Action<string>>,\n    options: { readonly wrappedComponentName: string },\n  ) => {\n    throw new Error(\n      `Invalid value of type ${typeof arg} for ${name} argument when connecting component ${\n        options.wrappedComponentName\n      }.`,\n    )\n  }\n}\n","import type { Action, Dispatch } from 'redux'\nimport bindActionCreators from '../utils/bindActionCreators'\nimport { wrapMapToPropsConstant, wrapMapToPropsFunc } from './wrapMapToProps'\nimport { createInvalidArgFactory } from './invalidArgFactory'\nimport type { MapDispatchToPropsParam } from './selectorFactory'\n\nexport function mapDispatchToPropsFactory<TDispatchProps, TOwnProps>(\n  mapDispatchToProps:\n    | MapDispatchToPropsParam<TDispatchProps, TOwnProps>\n    | undefined,\n) {\n  return mapDispatchToProps && typeof mapDispatchToProps === 'object'\n    ? wrapMapToPropsConstant((dispatch: Dispatch<Action<string>>) =>\n        // @ts-ignore\n        bindActionCreators(mapDispatchToProps, dispatch),\n      )\n    : !mapDispatchToProps\n      ? wrapMapToPropsConstant((dispatch: Dispatch<Action<string>>) => ({\n          dispatch,\n        }))\n      : typeof mapDispatchToProps === 'function'\n        ? // @ts-ignore\n          wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps')\n        : createInvalidArgFactory(mapDispatchToProps, 'mapDispatchToProps')\n}\n","import { wrapMapToPropsConstant, wrapMapToPropsFunc } from './wrapMapToProps'\nimport { createInvalidArgFactory } from './invalidArgFactory'\nimport type { MapStateToPropsParam } from './selectorFactory'\n\nexport function mapStateToPropsFactory<TStateProps, TOwnProps, State>(\n  mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n) {\n  return !mapStateToProps\n    ? wrapMapToPropsConstant(() => ({}))\n    : typeof mapStateToProps === 'function'\n      ? // @ts-ignore\n        wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps')\n      : createInvalidArgFactory(mapStateToProps, 'mapStateToProps')\n}\n","import type { Action, Dispatch } from 'redux'\nimport verifyPlainObject from '../utils/verifyPlainObject'\nimport { createInvalidArgFactory } from './invalidArgFactory'\nimport type { MergeProps } from './selectorFactory'\nimport type { EqualityFn } from '../types'\n\nfunction defaultMergeProps<\n  TStateProps,\n  TDispatchProps,\n  TOwnProps,\n  TMergedProps,\n>(\n  stateProps: TStateProps,\n  dispatchProps: TDispatchProps,\n  ownProps: TOwnProps,\n): TMergedProps {\n  // @ts-ignore\n  return { ...ownProps, ...stateProps, ...dispatchProps }\n}\n\nfunction wrapMergePropsFunc<\n  TStateProps,\n  TDispatchProps,\n  TOwnProps,\n  TMergedProps,\n>(\n  mergeProps: MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>,\n): (\n  dispatch: Dispatch<Action<string>>,\n  options: {\n    readonly displayName: string\n    readonly areMergedPropsEqual: EqualityFn<TMergedProps>\n  },\n) => MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps> {\n  return function initMergePropsProxy(\n    dispatch,\n    { displayName, areMergedPropsEqual },\n  ) {\n    let hasRunOnce = false\n    let mergedProps: TMergedProps\n\n    return function mergePropsProxy(\n      stateProps: TStateProps,\n      dispatchProps: TDispatchProps,\n      ownProps: TOwnProps,\n    ) {\n      const nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps)\n\n      if (hasRunOnce) {\n        if (!areMergedPropsEqual(nextMergedProps, mergedProps))\n          mergedProps = nextMergedProps\n      } else {\n        hasRunOnce = true\n        mergedProps = nextMergedProps\n\n        if (process.env.NODE_ENV !== 'production')\n          verifyPlainObject(mergedProps, displayName, 'mergeProps')\n      }\n\n      return mergedProps\n    }\n  }\n}\n\nexport function mergePropsFactory<\n  TStateProps,\n  TDispatchProps,\n  TOwnProps,\n  TMergedProps,\n>(\n  mergeProps?: MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>,\n) {\n  return !mergeProps\n    ? () => defaultMergeProps\n    : typeof mergeProps === 'function'\n      ? wrapMergePropsFunc(mergeProps)\n      : createInvalidArgFactory(mergeProps, 'mergeProps')\n}\n","// Default to a dummy \"batch\" implementation that just runs the callback\r\nexport function defaultNoopBatch(callback: () => void) {\r\n  callback()\r\n}\r\n","import { defaultNoopBatch as batch } from './batch'\n\n// encapsulates the subscription logic for connecting a component to the redux store, as\n// well as nesting subscriptions of descendant components, so that we can ensure the\n// ancestor components re-render before descendants\n\ntype VoidFunc = () => void\n\ntype Listener = {\n  callback: VoidFunc\n  next: Listener | null\n  prev: Listener | null\n}\n\nfunction createListenerCollection() {\n  let first: Listener | null = null\n  let last: Listener | null = null\n\n  return {\n    clear() {\n      first = null\n      last = null\n    },\n\n    notify() {\n      batch(() => {\n        let listener = first\n        while (listener) {\n          listener.callback()\n          listener = listener.next\n        }\n      })\n    },\n\n    get() {\n      const listeners: Listener[] = []\n      let listener = first\n      while (listener) {\n        listeners.push(listener)\n        listener = listener.next\n      }\n      return listeners\n    },\n\n    subscribe(callback: () => void) {\n      let isSubscribed = true\n\n      const listener: Listener = (last = {\n        callback,\n        next: null,\n        prev: last,\n      })\n\n      if (listener.prev) {\n        listener.prev.next = listener\n      } else {\n        first = listener\n      }\n\n      return function unsubscribe() {\n        if (!isSubscribed || first === null) return\n        isSubscribed = false\n\n        if (listener.next) {\n          listener.next.prev = listener.prev\n        } else {\n          last = listener.prev\n        }\n        if (listener.prev) {\n          listener.prev.next = listener.next\n        } else {\n          first = listener.next\n        }\n      }\n    },\n  }\n}\n\ntype ListenerCollection = ReturnType<typeof createListenerCollection>\n\nexport interface Subscription {\n  addNestedSub: (listener: VoidFunc) => VoidFunc\n  notifyNestedSubs: VoidFunc\n  handleChangeWrapper: VoidFunc\n  isSubscribed: () => boolean\n  onStateChange?: VoidFunc | null\n  trySubscribe: VoidFunc\n  tryUnsubscribe: VoidFunc\n  getListeners: () => ListenerCollection\n}\n\nconst nullListeners = {\n  notify() {},\n  get: () => [],\n} as unknown as ListenerCollection\n\nexport function createSubscription(store: any, parentSub?: Subscription) {\n  let unsubscribe: VoidFunc | undefined\n  let listeners: ListenerCollection = nullListeners\n\n  // Reasons to keep the subscription active\n  let subscriptionsAmount = 0\n\n  // Is this specific subscription subscribed (or only nested ones?)\n  let selfSubscribed = false\n\n  function addNestedSub(listener: () => void) {\n    trySubscribe()\n\n    const cleanupListener = listeners.subscribe(listener)\n\n    // cleanup nested sub\n    let removed = false\n    return () => {\n      if (!removed) {\n        removed = true\n        cleanupListener()\n        tryUnsubscribe()\n      }\n    }\n  }\n\n  function notifyNestedSubs() {\n    listeners.notify()\n  }\n\n  function handleChangeWrapper() {\n    if (subscription.onStateChange) {\n      subscription.onStateChange()\n    }\n  }\n\n  function isSubscribed() {\n    return selfSubscribed\n  }\n\n  function trySubscribe() {\n    subscriptionsAmount++\n    if (!unsubscribe) {\n      unsubscribe = parentSub\n        ? parentSub.addNestedSub(handleChangeWrapper)\n        : store.subscribe(handleChangeWrapper)\n\n      listeners = createListenerCollection()\n    }\n  }\n\n  function tryUnsubscribe() {\n    subscriptionsAmount--\n    if (unsubscribe && subscriptionsAmount === 0) {\n      unsubscribe()\n      unsubscribe = undefined\n      listeners.clear()\n      listeners = nullListeners\n    }\n  }\n\n  function trySubscribeSelf() {\n    if (!selfSubscribed) {\n      selfSubscribed = true\n      trySubscribe()\n    }\n  }\n\n  function tryUnsubscribeSelf() {\n    if (selfSubscribed) {\n      selfSubscribed = false\n      tryUnsubscribe()\n    }\n  }\n\n  const subscription: Subscription = {\n    addNestedSub,\n    notifyNestedSubs,\n    handleChangeWrapper,\n    isSubscribed,\n    trySubscribe: trySubscribeSelf,\n    tryUnsubscribe: tryUnsubscribeSelf,\n    getListeners: () => listeners,\n  }\n\n  return subscription\n}\n","import { React } from '../utils/react'\n\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\n// subscription callback always has the selector from the latest render commit\n// available, otherwise a store update may happen between render and the effect,\n// which may cause missed updates; we also must ensure the store subscription\n// is created synchronously, otherwise a store update may occur before the\n// subscription is created and an inconsistent state may be observed\n\n// Matches logic in React's `shared/ExecutionEnvironment` file\nconst canUseDOM = () =>\n  !!(\n    typeof window !== 'undefined' &&\n    typeof window.document !== 'undefined' &&\n    typeof window.document.createElement !== 'undefined'\n  )\n\nconst isDOM = /* @__PURE__ */ canUseDOM()\n\n// Under React Native, we know that we always want to use useLayoutEffect\n\n/**\n * Checks if the code is running in a React Native environment.\n *\n * @returns Whether the code is running in a React Native environment.\n *\n * @see {@link https://github.com/facebook/react-native/issues/1331 Reference}\n */\nconst isRunningInReactNative = () =>\n  typeof navigator !== 'undefined' && navigator.product === 'ReactNative'\n\nconst isReactNative = /* @__PURE__ */ isRunningInReactNative()\n\nconst getUseIsomorphicLayoutEffect = () =>\n  isDOM || isReactNative ? React.useLayoutEffect : React.useEffect\n\nexport const useIsomorphicLayoutEffect =\n  /* @__PURE__ */ getUseIsomorphicLayoutEffect()\n","function is(x: unknown, y: unknown) {\r\n  if (x === y) {\r\n    return x !== 0 || y !== 0 || 1 / x === 1 / y\r\n  } else {\r\n    return x !== x && y !== y\r\n  }\r\n}\r\n\r\nexport default function shallowEqual(objA: any, objB: any) {\r\n  if (is(objA, objB)) return true\r\n\r\n  if (\r\n    typeof objA !== 'object' ||\r\n    objA === null ||\r\n    typeof objB !== 'object' ||\r\n    objB === null\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  const keysA = Object.keys(objA)\r\n  const keysB = Object.keys(objB)\r\n\r\n  if (keysA.length !== keysB.length) return false\r\n\r\n  for (let i = 0; i < keysA.length; i++) {\r\n    if (\r\n      !Object.prototype.hasOwnProperty.call(objB, keysA[i]) ||\r\n      !is(objA[keysA[i]], objB[keysA[i]])\r\n    ) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n","// Copied directly from:\n// https://github.com/mridgway/hoist-non-react-statics/blob/main/src/index.js\n// https://unpkg.com/browse/@types/hoist-non-react-statics@3.3.6/index.d.ts\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nimport type { ForwardRefExoticComponent, MemoExoticComponent } from 'react'\nimport { ForwardRef, Memo, isMemo } from '../utils/react-is'\n\nconst REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true,\n} as const\n\nconst KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true,\n} as const\n\nconst FORWARD_REF_STATICS = {\n  $$typeof: true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n} as const\n\nconst MEMO_STATICS = {\n  $$typeof: true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true,\n} as const\n\nconst TYPE_STATICS = {\n  [ForwardRef]: FORWARD_REF_STATICS,\n  [Memo]: MEMO_STATICS,\n} as const\n\nfunction getStatics(component: any) {\n  // React v16.11 and below\n  if (isMemo(component)) {\n    return MEMO_STATICS\n  }\n\n  // React v16.12 and above\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS\n}\n\nexport type NonReactStatics<\n  Source,\n  C extends {\n    [key: string]: true\n  } = {},\n> = {\n  [key in Exclude<\n    keyof Source,\n    Source extends MemoExoticComponent<any>\n      ? keyof typeof MEMO_STATICS | keyof C\n      : Source extends ForwardRefExoticComponent<any>\n        ? keyof typeof FORWARD_REF_STATICS | keyof C\n        : keyof typeof REACT_STATICS | keyof typeof KNOWN_STATICS | keyof C\n  >]: Source[key]\n}\n\nconst defineProperty = Object.defineProperty\nconst getOwnPropertyNames = Object.getOwnPropertyNames\nconst getOwnPropertySymbols = Object.getOwnPropertySymbols\nconst getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor\nconst getPrototypeOf = Object.getPrototypeOf\nconst objectPrototype = Object.prototype\n\nexport default function hoistNonReactStatics<\n  Target,\n  Source,\n  CustomStatic extends {\n    [key: string]: true\n  } = {},\n>(\n  targetComponent: Target,\n  sourceComponent: Source,\n): Target & NonReactStatics<Source, CustomStatic> {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n\n    if (objectPrototype) {\n      const inheritedComponent = getPrototypeOf(sourceComponent)\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent)\n      }\n    }\n\n    let keys: (string | symbol)[] = getOwnPropertyNames(sourceComponent)\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent))\n    }\n\n    const targetStatics = getStatics(targetComponent)\n    const sourceStatics = getStatics(sourceComponent)\n\n    for (let i = 0; i < keys.length; ++i) {\n      const key = keys[i]\n      if (\n        !KNOWN_STATICS[key as keyof typeof KNOWN_STATICS] &&\n        !(sourceStatics && sourceStatics[key as keyof typeof sourceStatics]) &&\n        !(targetStatics && targetStatics[key as keyof typeof targetStatics])\n      ) {\n        const descriptor = getOwnPropertyDescriptor(sourceComponent, key)\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor!)\n        } catch (e) {\n          // ignore\n        }\n      }\n    }\n  }\n\n  return targetComponent as any\n}\n","import type { Context } from 'react'\nimport { React } from '../utils/react'\nimport type { Action, Store, UnknownAction } from 'redux'\nimport type { Subscription } from '../utils/Subscription'\nimport type { ProviderProps } from './Provider'\n\nexport interface ReactReduxContextValue<\n  SS = any,\n  A extends Action<string> = UnknownAction,\n> extends Pick<ProviderProps, 'stabilityCheck' | 'identityFunctionCheck'> {\n  store: Store<SS, A>\n  subscription: Subscription\n  getServerState?: () => SS\n}\n\nconst ContextKey = /* @__PURE__ */ Symbol.for(`react-redux-context`)\nconst gT: {\n  [ContextKey]?: Map<\n    typeof React.createContext,\n    Context<ReactReduxContextValue | null>\n  >\n} = (\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */ {}\n) as any\n\nfunction getContext(): Context<ReactReduxContextValue | null> {\n  if (!React.createContext) return {} as any\n\n  const contextMap = (gT[ContextKey] ??= new Map<\n    typeof React.createContext,\n    Context<ReactReduxContextValue | null>\n  >())\n  let realContext = contextMap.get(React.createContext)\n  if (!realContext) {\n    realContext = React.createContext<ReactReduxContextValue | null>(\n      null as any,\n    )\n    if (process.env.NODE_ENV !== 'production') {\n      realContext.displayName = 'ReactRedux'\n    }\n    contextMap.set(React.createContext, realContext)\n  }\n  return realContext\n}\n\nexport const ReactReduxContext = /*#__PURE__*/ getContext()\n\nexport type ReactReduxContextInstance = typeof ReactReduxContext\n","/* eslint-disable valid-jsdoc, @typescript-eslint/no-unused-vars */\nimport type { ComponentType } from 'react'\nimport { React } from '../utils/react'\nimport { isValidElementType, isContextConsumer } from '../utils/react-is'\n\nimport type { Store } from 'redux'\n\nimport type {\n  ConnectedComponent,\n  InferableComponentEnhancer,\n  InferableComponentEnhancerWithProps,\n  ResolveThunks,\n  DispatchProp,\n  ConnectPropsMaybeWithoutContext,\n} from '../types'\n\nimport type {\n  MapStateToPropsParam,\n  MapDispatchToPropsParam,\n  MergeProps,\n  MapDispatchToPropsNonObject,\n  SelectorFactoryOptions,\n} from '../connect/selectorFactory'\nimport defaultSelectorFactory from '../connect/selectorFactory'\nimport { mapDispatchToPropsFactory } from '../connect/mapDispatchToProps'\nimport { mapStateToPropsFactory } from '../connect/mapStateToProps'\nimport { mergePropsFactory } from '../connect/mergeProps'\n\nimport type { Subscription } from '../utils/Subscription'\nimport { createSubscription } from '../utils/Subscription'\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect'\nimport shallowEqual from '../utils/shallowEqual'\nimport hoistStatics from '../utils/hoistStatics'\nimport warning from '../utils/warning'\n\nimport type {\n  ReactReduxContextValue,\n  ReactReduxContextInstance,\n} from './Context'\nimport { ReactReduxContext } from './Context'\n\n// Define some constant arrays just to avoid re-creating these\nconst EMPTY_ARRAY: [unknown, number] = [null, 0]\nconst NO_SUBSCRIPTION_ARRAY = [null, null]\n\n// Attempts to stringify whatever not-really-a-component value we were given\n// for logging in an error message\nconst stringifyComponent = (Comp: unknown) => {\n  try {\n    return JSON.stringify(Comp)\n  } catch (err) {\n    return String(Comp)\n  }\n}\n\ntype EffectFunc = (...args: any[]) => void | ReturnType<React.EffectCallback>\n\n// This is \"just\" a `useLayoutEffect`, but with two modifications:\n// - we need to fall back to `useEffect` in SSR to avoid annoying warnings\n// - we extract this to a separate function to avoid closing over values\n//   and causing memory leaks\nfunction useIsomorphicLayoutEffectWithArgs(\n  effectFunc: EffectFunc,\n  effectArgs: any[],\n  dependencies?: React.DependencyList,\n) {\n  useIsomorphicLayoutEffect(() => effectFunc(...effectArgs), dependencies)\n}\n\n// Effect callback, extracted: assign the latest props values to refs for later usage\nfunction captureWrapperProps(\n  lastWrapperProps: React.MutableRefObject<unknown>,\n  lastChildProps: React.MutableRefObject<unknown>,\n  renderIsScheduled: React.MutableRefObject<boolean>,\n  wrapperProps: unknown,\n  // actualChildProps: unknown,\n  childPropsFromStoreUpdate: React.MutableRefObject<unknown>,\n  notifyNestedSubs: () => void,\n) {\n  // We want to capture the wrapper props and child props we used for later comparisons\n  lastWrapperProps.current = wrapperProps\n  renderIsScheduled.current = false\n\n  // If the render was from a store update, clear out that reference and cascade the subscriber update\n  if (childPropsFromStoreUpdate.current) {\n    childPropsFromStoreUpdate.current = null\n    notifyNestedSubs()\n  }\n}\n\n// Effect callback, extracted: subscribe to the Redux store or nearest connected ancestor,\n// check for updates after dispatched actions, and trigger re-renders.\nfunction subscribeUpdates(\n  shouldHandleStateChanges: boolean,\n  store: Store,\n  subscription: Subscription,\n  childPropsSelector: (state: unknown, props: unknown) => unknown,\n  lastWrapperProps: React.MutableRefObject<unknown>,\n  lastChildProps: React.MutableRefObject<unknown>,\n  renderIsScheduled: React.MutableRefObject<boolean>,\n  isMounted: React.MutableRefObject<boolean>,\n  childPropsFromStoreUpdate: React.MutableRefObject<unknown>,\n  notifyNestedSubs: () => void,\n  // forceComponentUpdateDispatch: React.Dispatch<any>,\n  additionalSubscribeListener: () => void,\n) {\n  // If we're not subscribed to the store, nothing to do here\n  if (!shouldHandleStateChanges) return () => {}\n\n  // Capture values for checking if and when this component unmounts\n  let didUnsubscribe = false\n  let lastThrownError: Error | null = null\n\n  // We'll run this callback every time a store subscription update propagates to this component\n  const checkForUpdates = () => {\n    if (didUnsubscribe || !isMounted.current) {\n      // Don't run stale listeners.\n      // Redux doesn't guarantee unsubscriptions happen until next dispatch.\n      return\n    }\n\n    // TODO We're currently calling getState ourselves here, rather than letting `uSES` do it\n    const latestStoreState = store.getState()\n\n    let newChildProps, error\n    try {\n      // Actually run the selector with the most recent store state and wrapper props\n      // to determine what the child props should be\n      newChildProps = childPropsSelector(\n        latestStoreState,\n        lastWrapperProps.current,\n      )\n    } catch (e) {\n      error = e\n      lastThrownError = e as Error | null\n    }\n\n    if (!error) {\n      lastThrownError = null\n    }\n\n    // If the child props haven't changed, nothing to do here - cascade the subscription update\n    if (newChildProps === lastChildProps.current) {\n      if (!renderIsScheduled.current) {\n        notifyNestedSubs()\n      }\n    } else {\n      // Save references to the new child props.  Note that we track the \"child props from store update\"\n      // as a ref instead of a useState/useReducer because we need a way to determine if that value has\n      // been processed.  If this went into useState/useReducer, we couldn't clear out the value without\n      // forcing another re-render, which we don't want.\n      lastChildProps.current = newChildProps\n      childPropsFromStoreUpdate.current = newChildProps\n      renderIsScheduled.current = true\n\n      // TODO This is hacky and not how `uSES` is meant to be used\n      // Trigger the React `useSyncExternalStore` subscriber\n      additionalSubscribeListener()\n    }\n  }\n\n  // Actually subscribe to the nearest connected ancestor (or store)\n  subscription.onStateChange = checkForUpdates\n  subscription.trySubscribe()\n\n  // Pull data from the store after first render in case the store has\n  // changed since we began.\n  checkForUpdates()\n\n  const unsubscribeWrapper = () => {\n    didUnsubscribe = true\n    subscription.tryUnsubscribe()\n    subscription.onStateChange = null\n\n    if (lastThrownError) {\n      // It's possible that we caught an error due to a bad mapState function, but the\n      // parent re-rendered without this component and we're about to unmount.\n      // This shouldn't happen as long as we do top-down subscriptions correctly, but\n      // if we ever do those wrong, this throw will surface the error in our tests.\n      // In that case, throw the error from here so it doesn't get lost.\n      throw lastThrownError\n    }\n  }\n\n  return unsubscribeWrapper\n}\n\n// Reducer initial state creation for our update reducer\nconst initStateUpdates = () => EMPTY_ARRAY\n\nexport interface ConnectProps {\n  /** A custom Context instance that the component can use to access the store from an alternate Provider using that same Context instance */\n  context?: ReactReduxContextInstance\n  /** A Redux store instance to be used for subscriptions instead of the store from a Provider */\n  store?: Store\n}\n\ninterface InternalConnectProps extends ConnectProps {\n  reactReduxForwardedRef?: React.ForwardedRef<unknown>\n}\n\nfunction strictEqual(a: unknown, b: unknown) {\n  return a === b\n}\n\n/**\n * Infers the type of props that a connector will inject into a component.\n */\nexport type ConnectedProps<TConnector> =\n  TConnector extends InferableComponentEnhancerWithProps<\n    infer TInjectedProps,\n    any\n  >\n    ? unknown extends TInjectedProps\n      ? TConnector extends InferableComponentEnhancer<infer TInjectedProps>\n        ? TInjectedProps\n        : never\n      : TInjectedProps\n    : never\n\nexport interface ConnectOptions<\n  State = unknown,\n  TStateProps = {},\n  TOwnProps = {},\n  TMergedProps = {},\n> {\n  forwardRef?: boolean\n  context?: typeof ReactReduxContext\n  areStatesEqual?: (\n    nextState: State,\n    prevState: State,\n    nextOwnProps: TOwnProps,\n    prevOwnProps: TOwnProps,\n  ) => boolean\n\n  areOwnPropsEqual?: (\n    nextOwnProps: TOwnProps,\n    prevOwnProps: TOwnProps,\n  ) => boolean\n\n  areStatePropsEqual?: (\n    nextStateProps: TStateProps,\n    prevStateProps: TStateProps,\n  ) => boolean\n  areMergedPropsEqual?: (\n    nextMergedProps: TMergedProps,\n    prevMergedProps: TMergedProps,\n  ) => boolean\n}\n\n/**\n * Connects a React component to a Redux store.\n *\n * - Without arguments, just wraps the component, without changing the behavior / props\n *\n * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior\n * is to override ownProps (as stated in the docs), so what remains is everything that's\n * not a state or dispatch prop\n *\n * - When 3rd param is passed, we don't know if ownProps propagate and whether they\n * should be valid component props, because it depends on mergeProps implementation.\n * As such, it is the user's responsibility to extend ownProps interface from state or\n * dispatch props or both when applicable\n *\n * @param mapStateToProps\n * @param mapDispatchToProps\n * @param mergeProps\n * @param options\n */\nexport interface Connect<DefaultState = unknown> {\n  // tslint:disable:no-unnecessary-generics\n  (): InferableComponentEnhancer<DispatchProp>\n\n  /** mapState only */\n  <TStateProps = {}, no_dispatch = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  ): InferableComponentEnhancerWithProps<TStateProps & DispatchProp, TOwnProps>\n\n  /** mapDispatch only (as a function) */\n  <no_state = {}, TDispatchProps = {}, TOwnProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<TDispatchProps, TOwnProps>\n\n  /** mapDispatch only (as an object) */\n  <no_state = {}, TDispatchProps = {}, TOwnProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<\n    ResolveThunks<TDispatchProps>,\n    TOwnProps\n  >\n\n  /** mapState and mapDispatch (as a function)*/\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<\n    TStateProps & TDispatchProps,\n    TOwnProps\n  >\n\n  /** mapState and mapDispatch (nullish) */\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: null | undefined,\n  ): InferableComponentEnhancerWithProps<TStateProps, TOwnProps>\n\n  /** mapState and mapDispatch (as an object) */\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<\n    TStateProps & ResolveThunks<TDispatchProps>,\n    TOwnProps\n  >\n\n  /** mergeProps only */\n  <no_state = {}, no_dispatch = {}, TOwnProps = {}, TMergedProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: null | undefined,\n    mergeProps: MergeProps<undefined, DispatchProp, TOwnProps, TMergedProps>,\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\n\n  /** mapState and mergeProps */\n  <\n    TStateProps = {},\n    no_dispatch = {},\n    TOwnProps = {},\n    TMergedProps = {},\n    State = DefaultState,\n  >(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: null | undefined,\n    mergeProps: MergeProps<TStateProps, DispatchProp, TOwnProps, TMergedProps>,\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\n\n  /** mapDispatch (as a object) and mergeProps */\n  <no_state = {}, TDispatchProps = {}, TOwnProps = {}, TMergedProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n    mergeProps: MergeProps<undefined, TDispatchProps, TOwnProps, TMergedProps>,\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\n\n  /** mapState and options */\n  <TStateProps = {}, no_dispatch = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: null | undefined,\n    mergeProps: null | undefined,\n    options: ConnectOptions<State, TStateProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<DispatchProp & TStateProps, TOwnProps>\n\n  /** mapDispatch (as a function) and options */\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>,\n    mergeProps: null | undefined,\n    options: ConnectOptions<{}, TStateProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<TDispatchProps, TOwnProps>\n\n  /** mapDispatch (as an object) and options*/\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n    mergeProps: null | undefined,\n    options: ConnectOptions<{}, TStateProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<\n    ResolveThunks<TDispatchProps>,\n    TOwnProps\n  >\n\n  /** mapState,  mapDispatch (as a function), and options */\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>,\n    mergeProps: null | undefined,\n    options: ConnectOptions<State, TStateProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<\n    TStateProps & TDispatchProps,\n    TOwnProps\n  >\n\n  /** mapState,  mapDispatch (as an object), and options */\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n    mergeProps: null | undefined,\n    options: ConnectOptions<State, TStateProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<\n    TStateProps & ResolveThunks<TDispatchProps>,\n    TOwnProps\n  >\n\n  /** mapState, mapDispatch, mergeProps, and options */\n  <\n    TStateProps = {},\n    TDispatchProps = {},\n    TOwnProps = {},\n    TMergedProps = {},\n    State = DefaultState,\n  >(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n    mergeProps: MergeProps<\n      TStateProps,\n      TDispatchProps,\n      TOwnProps,\n      TMergedProps\n    >,\n    options?: ConnectOptions<State, TStateProps, TOwnProps, TMergedProps>,\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\n  // tslint:enable:no-unnecessary-generics\n}\n\nlet hasWarnedAboutDeprecatedPureOption = false\n\n/**\n * Connects a React component to a Redux store.\n *\n * - Without arguments, just wraps the component, without changing the behavior / props\n *\n * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior\n * is to override ownProps (as stated in the docs), so what remains is everything that's\n * not a state or dispatch prop\n *\n * - When 3rd param is passed, we don't know if ownProps propagate and whether they\n * should be valid component props, because it depends on mergeProps implementation.\n * As such, it is the user's responsibility to extend ownProps interface from state or\n * dispatch props or both when applicable\n *\n * @param mapStateToProps A function that extracts values from state\n * @param mapDispatchToProps Setup for dispatching actions\n * @param mergeProps Optional callback to merge state and dispatch props together\n * @param options Options for configuring the connection\n *\n */\nfunction connect<\n  TStateProps = {},\n  TDispatchProps = {},\n  TOwnProps = {},\n  TMergedProps = {},\n  State = unknown,\n>(\n  mapStateToProps?: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  mapDispatchToProps?: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  mergeProps?: MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>,\n  {\n    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.\n    // @ts-ignore\n    pure,\n    areStatesEqual = strictEqual,\n    areOwnPropsEqual = shallowEqual,\n    areStatePropsEqual = shallowEqual,\n    areMergedPropsEqual = shallowEqual,\n\n    // use React's forwardRef to expose a ref of the wrapped component\n    forwardRef = false,\n\n    // the context consumer to use\n    context = ReactReduxContext,\n  }: ConnectOptions<unknown, unknown, unknown, unknown> = {},\n): unknown {\n  if (process.env.NODE_ENV !== 'production') {\n    if (pure !== undefined && !hasWarnedAboutDeprecatedPureOption) {\n      hasWarnedAboutDeprecatedPureOption = true\n      warning(\n        'The `pure` option has been removed. `connect` is now always a \"pure/memoized\" component',\n      )\n    }\n  }\n\n  const Context = context\n\n  const initMapStateToProps = mapStateToPropsFactory(mapStateToProps)\n  const initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps)\n  const initMergeProps = mergePropsFactory(mergeProps)\n\n  const shouldHandleStateChanges = Boolean(mapStateToProps)\n\n  const wrapWithConnect = <TProps,>(\n    WrappedComponent: ComponentType<TProps>,\n  ) => {\n    type WrappedComponentProps = TProps &\n      ConnectPropsMaybeWithoutContext<TProps>\n\n    if (process.env.NODE_ENV !== 'production') {\n      const isValid = /*#__PURE__*/ isValidElementType(WrappedComponent)\n      if (!isValid)\n        throw new Error(\n          `You must pass a component to the function returned by connect. Instead received ${stringifyComponent(\n            WrappedComponent,\n          )}`,\n        )\n    }\n\n    const wrappedComponentName =\n      WrappedComponent.displayName || WrappedComponent.name || 'Component'\n\n    const displayName = `Connect(${wrappedComponentName})`\n\n    const selectorFactoryOptions: SelectorFactoryOptions<\n      any,\n      any,\n      any,\n      any,\n      State\n    > = {\n      shouldHandleStateChanges,\n      displayName,\n      wrappedComponentName,\n      WrappedComponent,\n      // @ts-ignore\n      initMapStateToProps,\n      initMapDispatchToProps,\n      initMergeProps,\n      areStatesEqual,\n      areStatePropsEqual,\n      areOwnPropsEqual,\n      areMergedPropsEqual,\n    }\n\n    function ConnectFunction<TOwnProps>(\n      props: InternalConnectProps & TOwnProps,\n    ) {\n      const [propsContext, reactReduxForwardedRef, wrapperProps] =\n        React.useMemo(() => {\n          // Distinguish between actual \"data\" props that were passed to the wrapper component,\n          // and values needed to control behavior (forwarded refs, alternate context instances).\n          // To maintain the wrapperProps object reference, memoize this destructuring.\n          const { reactReduxForwardedRef, ...wrapperProps } = props\n          return [props.context, reactReduxForwardedRef, wrapperProps]\n        }, [props])\n\n      const ContextToUse: ReactReduxContextInstance = React.useMemo(() => {\n        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.\n        // Memoize the check that determines which context instance we should use.\n        let ResultContext = Context\n        if (propsContext?.Consumer) {\n          if (process.env.NODE_ENV !== 'production') {\n            const isValid = /*#__PURE__*/ isContextConsumer(\n              // @ts-ignore\n              <propsContext.Consumer />,\n            )\n            if (!isValid) {\n              throw new Error(\n                'You must pass a valid React context consumer as `props.context`',\n              )\n            }\n            ResultContext = propsContext\n          }\n        }\n        return ResultContext\n      }, [propsContext, Context])\n\n      // Retrieve the store and ancestor subscription via context, if available\n      const contextValue = React.useContext(ContextToUse)\n\n      // The store _must_ exist as either a prop or in context.\n      // We'll check to see if it _looks_ like a Redux store first.\n      // This allows us to pass through a `store` prop that is just a plain value.\n      const didStoreComeFromProps =\n        Boolean(props.store) &&\n        Boolean(props.store!.getState) &&\n        Boolean(props.store!.dispatch)\n      const didStoreComeFromContext =\n        Boolean(contextValue) && Boolean(contextValue!.store)\n\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        !didStoreComeFromProps &&\n        !didStoreComeFromContext\n      ) {\n        throw new Error(\n          `Could not find \"store\" in the context of ` +\n            `\"${displayName}\". Either wrap the root component in a <Provider>, ` +\n            `or pass a custom React context provider to <Provider> and the corresponding ` +\n            `React context consumer to ${displayName} in connect options.`,\n        )\n      }\n\n      // Based on the previous check, one of these must be true\n      const store: Store = didStoreComeFromProps\n        ? props.store!\n        : contextValue!.store\n\n      const getServerState = didStoreComeFromContext\n        ? contextValue!.getServerState\n        : store.getState\n\n      const childPropsSelector = React.useMemo(() => {\n        // The child props selector needs the store reference as an input.\n        // Re-create this selector whenever the store changes.\n        return defaultSelectorFactory(store.dispatch, selectorFactoryOptions)\n      }, [store])\n\n      const [subscription, notifyNestedSubs] = React.useMemo(() => {\n        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY\n\n        // This Subscription's source should match where store came from: props vs. context. A component\n        // connected to the store via props shouldn't use subscription from context, or vice versa.\n        const subscription = createSubscription(\n          store,\n          didStoreComeFromProps ? undefined : contextValue!.subscription,\n        )\n\n        // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in\n        // the middle of the notification loop, where `subscription` will then be null. This can\n        // probably be avoided if Subscription's listeners logic is changed to not call listeners\n        // that have been unsubscribed in the  middle of the notification loop.\n        const notifyNestedSubs =\n          subscription.notifyNestedSubs.bind(subscription)\n\n        return [subscription, notifyNestedSubs]\n      }, [store, didStoreComeFromProps, contextValue])\n\n      // Determine what {store, subscription} value should be put into nested context, if necessary,\n      // and memoize that value to avoid unnecessary context updates.\n      const overriddenContextValue = React.useMemo(() => {\n        if (didStoreComeFromProps) {\n          // This component is directly subscribed to a store from props.\n          // We don't want descendants reading from this store - pass down whatever\n          // the existing context value is from the nearest connected ancestor.\n          return contextValue!\n        }\n\n        // Otherwise, put this component's subscription instance into context, so that\n        // connected descendants won't update until after this component is done\n        return {\n          ...contextValue,\n          subscription,\n        } as ReactReduxContextValue\n      }, [didStoreComeFromProps, contextValue, subscription])\n\n      // Set up refs to coordinate values between the subscription effect and the render logic\n      const lastChildProps = React.useRef<unknown>(undefined)\n      const lastWrapperProps = React.useRef(wrapperProps)\n      const childPropsFromStoreUpdate = React.useRef<unknown>(undefined)\n      const renderIsScheduled = React.useRef(false)\n      const isMounted = React.useRef(false)\n\n      // TODO: Change this to `React.useRef<Error>(undefined)` after upgrading to React 19.\n      /**\n       * @todo Change this to `React.useRef<Error>(undefined)` after upgrading to React 19.\n       */\n      const latestSubscriptionCallbackError = React.useRef<Error | undefined>(\n        undefined,\n      )\n\n      useIsomorphicLayoutEffect(() => {\n        isMounted.current = true\n        return () => {\n          isMounted.current = false\n        }\n      }, [])\n\n      const actualChildPropsSelector = React.useMemo(() => {\n        const selector = () => {\n          // Tricky logic here:\n          // - This render may have been triggered by a Redux store update that produced new child props\n          // - However, we may have gotten new wrapper props after that\n          // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.\n          // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.\n          // So, we'll use the child props from store update only if the wrapper props are the same as last time.\n          if (\n            childPropsFromStoreUpdate.current &&\n            wrapperProps === lastWrapperProps.current\n          ) {\n            return childPropsFromStoreUpdate.current\n          }\n\n          // TODO We're reading the store directly in render() here. Bad idea?\n          // This will likely cause Bad Things (TM) to happen in Concurrent Mode.\n          // Note that we do this because on renders _not_ caused by store updates, we need the latest store state\n          // to determine what the child props should be.\n          return childPropsSelector(store.getState(), wrapperProps)\n        }\n        return selector\n      }, [store, wrapperProps])\n\n      // We need this to execute synchronously every time we re-render. However, React warns\n      // about useLayoutEffect in SSR, so we try to detect environment and fall back to\n      // just useEffect instead to avoid the warning, since neither will run anyway.\n\n      const subscribeForReact = React.useMemo(() => {\n        const subscribe = (reactListener: () => void) => {\n          if (!subscription) {\n            return () => {}\n          }\n\n          return subscribeUpdates(\n            shouldHandleStateChanges,\n            store,\n            subscription,\n            // @ts-ignore\n            childPropsSelector,\n            lastWrapperProps,\n            lastChildProps,\n            renderIsScheduled,\n            isMounted,\n            childPropsFromStoreUpdate,\n            notifyNestedSubs,\n            reactListener,\n          )\n        }\n\n        return subscribe\n      }, [subscription])\n\n      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [\n        lastWrapperProps,\n        lastChildProps,\n        renderIsScheduled,\n        wrapperProps,\n        childPropsFromStoreUpdate,\n        notifyNestedSubs,\n      ])\n\n      let actualChildProps: Record<string, unknown>\n\n      try {\n        actualChildProps = React.useSyncExternalStore(\n          // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing\n          subscribeForReact,\n          // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,\n          // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.\n          actualChildPropsSelector,\n          getServerState\n            ? () => childPropsSelector(getServerState(), wrapperProps)\n            : actualChildPropsSelector,\n        )\n      } catch (err) {\n        if (latestSubscriptionCallbackError.current) {\n          // eslint-disable-next-line no-extra-semi\n          ;(err as Error).message +=\n            `\\nThe error may be correlated with this previous error:\\n${latestSubscriptionCallbackError.current.stack}\\n\\n`\n        }\n\n        throw err\n      }\n\n      useIsomorphicLayoutEffect(() => {\n        latestSubscriptionCallbackError.current = undefined\n        childPropsFromStoreUpdate.current = undefined\n        lastChildProps.current = actualChildProps\n      })\n\n      // Now that all that's done, we can finally try to actually render the child component.\n      // We memoize the elements for the rendered child component as an optimization.\n      const renderedWrappedComponent = React.useMemo(() => {\n        return (\n          // @ts-ignore\n          <WrappedComponent\n            {...actualChildProps}\n            ref={reactReduxForwardedRef}\n          />\n        )\n      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps])\n\n      // If React sees the exact same element reference as last time, it bails out of re-rendering\n      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.\n      const renderedChild = React.useMemo(() => {\n        if (shouldHandleStateChanges) {\n          // If this component is subscribed to store updates, we need to pass its own\n          // subscription instance down to our descendants. That means rendering the same\n          // Context instance, and putting a different value into the context.\n          return (\n            <ContextToUse.Provider value={overriddenContextValue}>\n              {renderedWrappedComponent}\n            </ContextToUse.Provider>\n          )\n        }\n\n        return renderedWrappedComponent\n      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue])\n\n      return renderedChild\n    }\n\n    const _Connect = React.memo(ConnectFunction)\n\n    type ConnectedWrapperComponent = typeof _Connect & {\n      WrappedComponent: typeof WrappedComponent\n    }\n\n    // Add a hacky cast to get the right output type\n    const Connect = _Connect as unknown as ConnectedComponent<\n      typeof WrappedComponent,\n      WrappedComponentProps\n    >\n    Connect.WrappedComponent = WrappedComponent\n    Connect.displayName = ConnectFunction.displayName = displayName\n\n    if (forwardRef) {\n      const _forwarded = React.forwardRef(\n        function forwardConnectRef(props, ref) {\n          // @ts-ignore\n          return <Connect {...props} reactReduxForwardedRef={ref} />\n        },\n      )\n\n      const forwarded = _forwarded as ConnectedWrapperComponent\n      forwarded.displayName = displayName\n      forwarded.WrappedComponent = WrappedComponent\n      return /*#__PURE__*/ hoistStatics(forwarded, WrappedComponent)\n    }\n\n    return /*#__PURE__*/ hoistStatics(Connect, WrappedComponent)\n  }\n\n  return wrapWithConnect\n}\n\nexport default connect as Connect\n","import type { Context, ReactNode } from 'react'\nimport { React } from '../utils/react'\nimport type { Action, Store, UnknownAction } from 'redux'\nimport type { DevModeCheckFrequency } from '../hooks/useSelector'\nimport { createSubscription } from '../utils/Subscription'\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect'\nimport type { ReactReduxContextValue } from './Context'\nimport { ReactReduxContext } from './Context'\n\nexport interface ProviderProps<\n  A extends Action<string> = UnknownAction,\n  S = unknown,\n> {\n  /**\n   * The single Redux store in your application.\n   */\n  store: Store<S, A>\n\n  /**\n   * An optional server state snapshot. Will be used during initial hydration render if available, to ensure that the UI output is consistent with the HTML generated on the server.\n   */\n  serverState?: S\n\n  /**\n   * Optional context to be used internally in react-redux. Use React.createContext() to create a context to be used.\n   * If this is used, you'll need to customize `connect` by supplying the same context provided to the Provider.\n   * Set the initial value to null, and the hooks will error\n   * if this is not overwritten by Provider.\n   */\n  context?: Context<ReactReduxContextValue<S, A> | null>\n\n  /**\n   * Determines the frequency of stability checks for all selectors.\n   * This setting overrides the global configuration for\n   * the `useSelector` stability check, allowing you to specify how often\n   * these checks should occur in development mode.\n   *\n   * @since 8.1.0\n   */\n  stabilityCheck?: DevModeCheckFrequency\n\n  /**\n   * Determines the frequency of identity function checks for all selectors.\n   * This setting overrides the global configuration for\n   * the `useSelector` identity function check, allowing you to specify how often\n   * these checks should occur in development mode.\n   *\n   * **Note**: Previously referred to as `noopCheck`.\n   *\n   * @since 9.0.0\n   */\n  identityFunctionCheck?: DevModeCheckFrequency\n\n  children: ReactNode\n}\n\nfunction Provider<A extends Action<string> = UnknownAction, S = unknown>(\n  providerProps: ProviderProps<A, S>,\n) {\n  const { children, context, serverState, store } = providerProps\n\n  const contextValue = React.useMemo(() => {\n    const subscription = createSubscription(store)\n\n    const baseContextValue = {\n      store,\n      subscription,\n      getServerState: serverState ? () => serverState : undefined,\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n      return baseContextValue\n    } else {\n      const { identityFunctionCheck = 'once', stabilityCheck = 'once' } =\n        providerProps\n\n      return /* @__PURE__ */ Object.assign(baseContextValue, {\n        stabilityCheck,\n        identityFunctionCheck,\n      })\n    }\n  }, [store, serverState])\n\n  const previousState = React.useMemo(() => store.getState(), [store])\n\n  useIsomorphicLayoutEffect(() => {\n    const { subscription } = contextValue\n    subscription.onStateChange = subscription.notifyNestedSubs\n    subscription.trySubscribe()\n\n    if (previousState !== store.getState()) {\n      subscription.notifyNestedSubs()\n    }\n    return () => {\n      subscription.tryUnsubscribe()\n      subscription.onStateChange = undefined\n    }\n  }, [contextValue, previousState])\n\n  const Context = context || ReactReduxContext\n\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>\n}\n\nexport default Provider\n","import { React } from '../utils/react'\nimport { ReactReduxContext } from '../components/Context'\nimport type { ReactReduxContextValue } from '../components/Context'\n\n/**\n * Hook factory, which creates a `useReduxContext` hook bound to a given context. This is a low-level\n * hook that you should usually not need to call directly.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useReduxContext` hook bound to the specified context.\n */\nexport function createReduxContextHook(context = ReactReduxContext) {\n  return function useReduxContext(): ReactReduxContextValue {\n    const contextValue = React.useContext(context)\n\n    if (process.env.NODE_ENV !== 'production' && !contextValue) {\n      throw new Error(\n        'could not find react-redux context value; please ensure the component is wrapped in a <Provider>',\n      )\n    }\n\n    return contextValue!\n  }\n}\n\n/**\n * A hook to access the value of the `ReactReduxContext`. This is a low-level\n * hook that you should usually not need to call directly.\n *\n * @returns {any} the value of the `ReactReduxContext`\n *\n * @example\n *\n * import React from 'react'\n * import { useReduxContext } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const { store } = useReduxContext()\n *   return <div>{store.getState()}</div>\n * }\n */\nexport const useReduxContext = /*#__PURE__*/ createReduxContextHook()\n","import type { Context } from 'react'\nimport type { Action, Store } from 'redux'\nimport type { ReactReduxContextValue } from '../components/Context'\nimport { ReactReduxContext } from '../components/Context'\nimport {\n  createReduxContextHook,\n  useReduxContext as useDefaultReduxContext,\n} from './useReduxContext'\n\n/**\n * Represents a type that extracts the action type from a given Redux store.\n *\n * @template StoreType - The specific type of the Redux store.\n *\n * @since 9.1.0\n * @internal\n */\nexport type ExtractStoreActionType<StoreType extends Store> =\n  StoreType extends Store<any, infer ActionType> ? ActionType : never\n\n/**\n * Represents a custom hook that provides access to the Redux store.\n *\n * @template StoreType - The specific type of the Redux store that gets returned.\n *\n * @since 9.1.0\n * @public\n */\nexport interface UseStore<StoreType extends Store> {\n  /**\n   * Returns the Redux store instance.\n   *\n   * @returns The Redux store instance.\n   */\n  (): StoreType\n\n  /**\n   * Returns the Redux store instance with specific state and action types.\n   *\n   * @returns The Redux store with the specified state and action types.\n   *\n   * @template StateType - The specific type of the state used in the store.\n   * @template ActionType - The specific type of the actions used in the store.\n   */\n  <\n    StateType extends ReturnType<StoreType['getState']> = ReturnType<\n      StoreType['getState']\n    >,\n    ActionType extends Action = ExtractStoreActionType<Store>,\n  >(): Store<StateType, ActionType>\n\n  /**\n   * Creates a \"pre-typed\" version of {@linkcode useStore useStore}\n   * where the type of the Redux `store` is predefined.\n   *\n   * This allows you to set the `store` type once, eliminating the need to\n   * specify it with every {@linkcode useStore useStore} call.\n   *\n   * @returns A pre-typed `useStore` with the store type already defined.\n   *\n   * @example\n   * ```ts\n   * export const useAppStore = useStore.withTypes<AppStore>()\n   * ```\n   *\n   * @template OverrideStoreType - The specific type of the Redux store that gets returned.\n   *\n   * @since 9.1.0\n   */\n  withTypes: <\n    OverrideStoreType extends StoreType,\n  >() => UseStore<OverrideStoreType>\n}\n\n/**\n * Hook factory, which creates a `useStore` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useStore` hook bound to the specified context.\n */\nexport function createStoreHook<\n  StateType = unknown,\n  ActionType extends Action = Action,\n>(\n  // @ts-ignore\n  context?: Context<ReactReduxContextValue<\n    StateType,\n    ActionType\n  > | null> = ReactReduxContext,\n) {\n  const useReduxContext =\n    context === ReactReduxContext\n      ? useDefaultReduxContext\n      : // @ts-ignore\n        createReduxContextHook(context)\n  const useStore = () => {\n    const { store } = useReduxContext()\n    return store\n  }\n\n  Object.assign(useStore, {\n    withTypes: () => useStore,\n  })\n\n  return useStore as UseStore<Store<StateType, ActionType>>\n}\n\n/**\n * A hook to access the redux store.\n *\n * @returns {any} the redux store\n *\n * @example\n *\n * import React from 'react'\n * import { useStore } from 'react-redux'\n *\n * export const ExampleComponent = () => {\n *   const store = useStore()\n *   return <div>{store.getState()}</div>\n * }\n */\nexport const useStore = /*#__PURE__*/ createStoreHook()\n","import type { Context } from 'react'\nimport type { Action, Dispatch, UnknownAction } from 'redux'\n\nimport type { ReactReduxContextValue } from '../components/Context'\nimport { ReactReduxContext } from '../components/Context'\nimport { createStoreHook, useStore as useDefaultStore } from './useStore'\n\n/**\n * Represents a custom hook that provides a dispatch function\n * from the Redux store.\n *\n * @template DispatchType - The specific type of the dispatch function.\n *\n * @since 9.1.0\n * @public\n */\nexport interface UseDispatch<\n  DispatchType extends Dispatch<UnknownAction> = Dispatch<UnknownAction>,\n> {\n  /**\n   * Returns the dispatch function from the Redux store.\n   *\n   * @returns The dispatch function from the Redux store.\n   *\n   * @template AppDispatch - The specific type of the dispatch function.\n   */\n  <AppDispatch extends DispatchType = DispatchType>(): AppDispatch\n\n  /**\n   * Creates a \"pre-typed\" version of {@linkcode useDispatch useDispatch}\n   * where the type of the `dispatch` function is predefined.\n   *\n   * This allows you to set the `dispatch` type once, eliminating the need to\n   * specify it with every {@linkcode useDispatch useDispatch} call.\n   *\n   * @returns A pre-typed `useDispatch` with the dispatch type already defined.\n   *\n   * @example\n   * ```ts\n   * export const useAppDispatch = useDispatch.withTypes<AppDispatch>()\n   * ```\n   *\n   * @template OverrideDispatchType - The specific type of the dispatch function.\n   *\n   * @since 9.1.0\n   */\n  withTypes: <\n    OverrideDispatchType extends DispatchType,\n  >() => UseDispatch<OverrideDispatchType>\n}\n\n/**\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useDispatch` hook bound to the specified context.\n */\nexport function createDispatchHook<\n  StateType = unknown,\n  ActionType extends Action = UnknownAction,\n>(\n  // @ts-ignore\n  context?: Context<ReactReduxContextValue<\n    StateType,\n    ActionType\n  > | null> = ReactReduxContext,\n) {\n  const useStore =\n    context === ReactReduxContext ? useDefaultStore : createStoreHook(context)\n\n  const useDispatch = () => {\n    const store = useStore()\n    return store.dispatch\n  }\n\n  Object.assign(useDispatch, {\n    withTypes: () => useDispatch,\n  })\n\n  return useDispatch as UseDispatch<Dispatch<ActionType>>\n}\n\n/**\n * A hook to access the redux `dispatch` function.\n *\n * @returns {any|function} redux store's `dispatch` function\n *\n * @example\n *\n * import React, { useCallback } from 'react'\n * import { useDispatch } from 'react-redux'\n *\n * export const CounterComponent = ({ value }) => {\n *   const dispatch = useDispatch()\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\n *   return (\n *     <div>\n *       <span>{value}</span>\n *       <button onClick={increaseCounter}>Increase counter</button>\n *     </div>\n *   )\n * }\n */\nexport const useDispatch = /*#__PURE__*/ createDispatchHook()\n","//import * as React from 'react'\nimport { React } from '../utils/react'\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/with-selector.js'\nimport type { ReactReduxContextValue } from '../components/Context'\nimport { ReactReduxContext } from '../components/Context'\nimport type { EqualityFn, NoInfer } from '../types'\nimport {\n  createReduxContextHook,\n  useReduxContext as useDefaultReduxContext,\n} from './useReduxContext'\n\n/**\n * The frequency of development mode checks.\n *\n * @since 8.1.0\n * @internal\n */\nexport type DevModeCheckFrequency = 'never' | 'once' | 'always'\n\n/**\n * Represents the configuration for development mode checks.\n *\n * @since 9.0.0\n * @internal\n */\nexport interface DevModeChecks {\n  /**\n   * Overrides the global stability check for the selector.\n   * - `once` - Run only the first time the selector is called.\n   * - `always` - Run every time the selector is called.\n   * - `never` - Never run the stability check.\n   *\n   * @default 'once'\n   *\n   * @since 8.1.0\n   */\n  stabilityCheck: DevModeCheckFrequency\n\n  /**\n   * Overrides the global identity function check for the selector.\n   * - `once` - Run only the first time the selector is called.\n   * - `always` - Run every time the selector is called.\n   * - `never` - Never run the identity function check.\n   *\n   * **Note**: Previously referred to as `noopCheck`.\n   *\n   * @default 'once'\n   *\n   * @since 9.0.0\n   */\n  identityFunctionCheck: DevModeCheckFrequency\n}\n\nexport interface UseSelectorOptions<Selected = unknown> {\n  equalityFn?: EqualityFn<Selected>\n\n  /**\n   * `useSelector` performs additional checks in development mode to help\n   * identify and warn about potential issues in selector behavior. This\n   * option allows you to customize the behavior of these checks per selector.\n   *\n   * @since 9.0.0\n   */\n  devModeChecks?: Partial<DevModeChecks>\n}\n\n/**\n * Represents a custom hook that allows you to extract data from the\n * Redux store state, using a selector function. The selector function\n * takes the current state as an argument and returns a part of the state\n * or some derived data. The hook also supports an optional equality\n * function or options object to customize its behavior.\n *\n * @template StateType - The specific type of state this hook operates on.\n *\n * @public\n */\nexport interface UseSelector<StateType = unknown> {\n  /**\n   * A function that takes a selector function as its first argument.\n   * The selector function is responsible for selecting a part of\n   * the Redux store's state or computing derived data.\n   *\n   * @param selector - A function that receives the current state and returns a part of the state or some derived data.\n   * @param equalityFnOrOptions - An optional equality function or options object for customizing the behavior of the selector.\n   * @returns The selected part of the state or derived data.\n   *\n   * @template TState - The specific type of state this hook operates on.\n   * @template Selected - The type of the value that the selector function will return.\n   */\n  <TState extends StateType = StateType, Selected = unknown>(\n    selector: (state: TState) => Selected,\n    equalityFnOrOptions?: EqualityFn<Selected> | UseSelectorOptions<Selected>,\n  ): Selected\n\n  /**\n   * Creates a \"pre-typed\" version of {@linkcode useSelector useSelector}\n   * where the `state` type is predefined.\n   *\n   * This allows you to set the `state` type once, eliminating the need to\n   * specify it with every {@linkcode useSelector useSelector} call.\n   *\n   * @returns A pre-typed `useSelector` with the state type already defined.\n   *\n   * @example\n   * ```ts\n   * export const useAppSelector = useSelector.withTypes<RootState>()\n   * ```\n   *\n   * @template OverrideStateType - The specific type of state this hook operates on.\n   *\n   * @since 9.1.0\n   */\n  withTypes: <\n    OverrideStateType extends StateType,\n  >() => UseSelector<OverrideStateType>\n}\n\nconst refEquality: EqualityFn<any> = (a, b) => a === b\n\n/**\n * Hook factory, which creates a `useSelector` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useSelector` hook bound to the specified context.\n */\nexport function createSelectorHook(\n  context: React.Context<ReactReduxContextValue<\n    any,\n    any\n  > | null> = ReactReduxContext,\n): UseSelector {\n  const useReduxContext =\n    context === ReactReduxContext\n      ? useDefaultReduxContext\n      : createReduxContextHook(context)\n\n  const useSelector = <TState, Selected>(\n    selector: (state: TState) => Selected,\n    equalityFnOrOptions:\n      | EqualityFn<NoInfer<Selected>>\n      | UseSelectorOptions<NoInfer<Selected>> = {},\n  ): Selected => {\n    const { equalityFn = refEquality } =\n      typeof equalityFnOrOptions === 'function'\n        ? { equalityFn: equalityFnOrOptions }\n        : equalityFnOrOptions\n    if (process.env.NODE_ENV !== 'production') {\n      if (!selector) {\n        throw new Error(`You must pass a selector to useSelector`)\n      }\n      if (typeof selector !== 'function') {\n        throw new Error(`You must pass a function as a selector to useSelector`)\n      }\n      if (typeof equalityFn !== 'function') {\n        throw new Error(\n          `You must pass a function as an equality function to useSelector`,\n        )\n      }\n    }\n\n    const reduxContext = useReduxContext()\n\n    const { store, subscription, getServerState } = reduxContext\n\n    const firstRun = React.useRef(true)\n\n    const wrappedSelector = React.useCallback<typeof selector>(\n      {\n        [selector.name](state: TState) {\n          const selected = selector(state)\n          if (process.env.NODE_ENV !== 'production') {\n            const { devModeChecks = {} } =\n              typeof equalityFnOrOptions === 'function'\n                ? {}\n                : equalityFnOrOptions\n            const { identityFunctionCheck, stabilityCheck } = reduxContext\n            const {\n              identityFunctionCheck: finalIdentityFunctionCheck,\n              stabilityCheck: finalStabilityCheck,\n            } = {\n              stabilityCheck,\n              identityFunctionCheck,\n              ...devModeChecks,\n            }\n            if (\n              finalStabilityCheck === 'always' ||\n              (finalStabilityCheck === 'once' && firstRun.current)\n            ) {\n              const toCompare = selector(state)\n              if (!equalityFn(selected, toCompare)) {\n                let stack: string | undefined = undefined\n                try {\n                  throw new Error()\n                } catch (e) {\n                  // eslint-disable-next-line no-extra-semi\n                  ;({ stack } = e as Error)\n                }\n                console.warn(\n                  'Selector ' +\n                    (selector.name || 'unknown') +\n                    ' returned a different result when called with the same parameters. This can lead to unnecessary rerenders.' +\n                    '\\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization',\n                  {\n                    state,\n                    selected,\n                    selected2: toCompare,\n                    stack,\n                  },\n                )\n              }\n            }\n            if (\n              finalIdentityFunctionCheck === 'always' ||\n              (finalIdentityFunctionCheck === 'once' && firstRun.current)\n            ) {\n              // @ts-ignore\n              if (selected === state) {\n                let stack: string | undefined = undefined\n                try {\n                  throw new Error()\n                } catch (e) {\n                  // eslint-disable-next-line no-extra-semi\n                  ;({ stack } = e as Error)\n                }\n                console.warn(\n                  'Selector ' +\n                    (selector.name || 'unknown') +\n                    ' returned the root state when called. This can lead to unnecessary rerenders.' +\n                    '\\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.',\n                  { stack },\n                )\n              }\n            }\n            if (firstRun.current) firstRun.current = false\n          }\n          return selected\n        },\n      }[selector.name],\n      [selector],\n    )\n\n    const selectedState = useSyncExternalStoreWithSelector(\n      subscription.addNestedSub,\n      store.getState,\n      getServerState || store.getState,\n      wrappedSelector,\n      equalityFn,\n    )\n\n    React.useDebugValue(selectedState)\n\n    return selectedState\n  }\n\n  Object.assign(useSelector, {\n    withTypes: () => useSelector,\n  })\n\n  return useSelector as UseSelector\n}\n\n/**\n * A hook to access the redux store's state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param {Function} selector the selector function\n * @param {Function=} equalityFn the function that will be used to determine equality\n *\n * @returns {any} the selected state\n *\n * @example\n *\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const counter = useSelector(state => state.counter)\n *   return <div>{counter}</div>\n * }\n */\nexport const useSelector = /*#__PURE__*/ createSelectorHook()\n","import connect from './components/connect'\nexport type {\n  Connect,\n  ConnectProps,\n  ConnectedProps,\n} from './components/connect'\n\nimport shallowEqual from './utils/shallowEqual'\n\nimport Provider from './components/Provider'\nimport { defaultNoopBatch } from './utils/batch'\n\nexport { ReactReduxContext } from './components/Context'\nexport type { ReactReduxContextValue } from './components/Context'\n\nexport type { ProviderProps } from './components/Provider'\n\nexport type {\n  MapDispatchToProps,\n  MapDispatchToPropsFactory,\n  MapDispatchToPropsFunction,\n  MapDispatchToPropsNonObject,\n  MapDispatchToPropsParam,\n  MapStateToProps,\n  MapStateToPropsFactory,\n  MapStateToPropsParam,\n  MergeProps,\n  Selector,\n  SelectorFactory,\n} from './connect/selectorFactory'\n\nexport { createDispatchHook, useDispatch } from './hooks/useDispatch'\nexport type { UseDispatch } from './hooks/useDispatch'\n\nexport { createSelectorHook, useSelector } from './hooks/useSelector'\nexport type { UseSelector } from './hooks/useSelector'\n\nexport { createStoreHook, useStore } from './hooks/useStore'\nexport type { UseStore } from './hooks/useStore'\n\nexport type { Subscription } from './utils/Subscription'\n\nexport * from './types'\n\n/**\n * @deprecated As of React 18, batching is enabled by default for ReactDOM and React Native.\n * This is now a no-op that immediately runs the callback.\n */\nconst batch = defaultNoopBatch\n\nexport { Provider, batch, connect, shallowEqual }\n"]},"metadata":{},"sourceType":"module"}