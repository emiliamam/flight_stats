{"ast":null,"code":"export var combineTooltipPayloadConfigurations = (tooltipState, tooltipEventType, trigger, defaultIndex) => {\n  // if tooltip reacts to axis interaction, then we display all items at the same time.\n  if (tooltipEventType === 'axis') {\n    return tooltipState.tooltipItemPayloads;\n  }\n  /*\n   * By now we already know that tooltipEventType is 'item', so we can only search in itemInteractions.\n   * item means that only the hovered or clicked item will be present in the tooltip.\n   */\n\n\n  if (tooltipState.tooltipItemPayloads.length === 0) {\n    // No point filtering if the payload is empty\n    return [];\n  }\n\n  var filterByDataKey;\n\n  if (trigger === 'hover') {\n    filterByDataKey = tooltipState.itemInteraction.hover.dataKey;\n  } else {\n    filterByDataKey = tooltipState.itemInteraction.click.dataKey;\n  }\n\n  if (filterByDataKey == null && defaultIndex != null) {\n    /*\n     * So when we use `defaultIndex` - we don't have a dataKey to filter by because user did not hover over anything yet.\n     * In that case let's display the first item in the tooltip; after all, this is `item` interaction case,\n     * so we should display only one item at a time instead of all.\n     */\n    return [tooltipState.tooltipItemPayloads[0]];\n  }\n\n  return tooltipState.tooltipItemPayloads.filter(tpc => {\n    var _tpc$settings;\n\n    return ((_tpc$settings = tpc.settings) === null || _tpc$settings === void 0 ? void 0 : _tpc$settings.dataKey) === filterByDataKey;\n  });\n};","map":{"version":3,"sources":["/Users/emiliamamedova/charts/project_corona_tracker/node_modules/recharts/es6/state/selectors/combiners/combineTooltipPayloadConfigurations.js"],"names":["combineTooltipPayloadConfigurations","tooltipState","tooltipEventType","trigger","defaultIndex","tooltipItemPayloads","length","filterByDataKey","itemInteraction","hover","dataKey","click","filter","tpc","_tpc$settings","settings"],"mappings":"AAAA,OAAO,IAAIA,mCAAmC,GAAG,CAACC,YAAD,EAAeC,gBAAf,EAAiCC,OAAjC,EAA0CC,YAA1C,KAA2D;AAC1G;AACA,MAAIF,gBAAgB,KAAK,MAAzB,EAAiC;AAC/B,WAAOD,YAAY,CAACI,mBAApB;AACD;AACD;;;;;;AAIA,MAAIJ,YAAY,CAACI,mBAAb,CAAiCC,MAAjC,KAA4C,CAAhD,EAAmD;AACjD;AACA,WAAO,EAAP;AACD;;AACD,MAAIC,eAAJ;;AACA,MAAIJ,OAAO,KAAK,OAAhB,EAAyB;AACvBI,IAAAA,eAAe,GAAGN,YAAY,CAACO,eAAb,CAA6BC,KAA7B,CAAmCC,OAArD;AACD,GAFD,MAEO;AACLH,IAAAA,eAAe,GAAGN,YAAY,CAACO,eAAb,CAA6BG,KAA7B,CAAmCD,OAArD;AACD;;AACD,MAAIH,eAAe,IAAI,IAAnB,IAA2BH,YAAY,IAAI,IAA/C,EAAqD;AACnD;;;;;AAKA,WAAO,CAACH,YAAY,CAACI,mBAAb,CAAiC,CAAjC,CAAD,CAAP;AACD;;AACD,SAAOJ,YAAY,CAACI,mBAAb,CAAiCO,MAAjC,CAAwCC,GAAG,IAAI;AACpD,QAAIC,aAAJ;;AACA,WAAO,CAAC,CAACA,aAAa,GAAGD,GAAG,CAACE,QAArB,MAAmC,IAAnC,IAA2CD,aAAa,KAAK,KAAK,CAAlE,GAAsE,KAAK,CAA3E,GAA+EA,aAAa,CAACJ,OAA9F,MAA2GH,eAAlH;AACD,GAHM,CAAP;AAID,CA/BM","sourcesContent":["export var combineTooltipPayloadConfigurations = (tooltipState, tooltipEventType, trigger, defaultIndex) => {\n  // if tooltip reacts to axis interaction, then we display all items at the same time.\n  if (tooltipEventType === 'axis') {\n    return tooltipState.tooltipItemPayloads;\n  }\n  /*\n   * By now we already know that tooltipEventType is 'item', so we can only search in itemInteractions.\n   * item means that only the hovered or clicked item will be present in the tooltip.\n   */\n  if (tooltipState.tooltipItemPayloads.length === 0) {\n    // No point filtering if the payload is empty\n    return [];\n  }\n  var filterByDataKey;\n  if (trigger === 'hover') {\n    filterByDataKey = tooltipState.itemInteraction.hover.dataKey;\n  } else {\n    filterByDataKey = tooltipState.itemInteraction.click.dataKey;\n  }\n  if (filterByDataKey == null && defaultIndex != null) {\n    /*\n     * So when we use `defaultIndex` - we don't have a dataKey to filter by because user did not hover over anything yet.\n     * In that case let's display the first item in the tooltip; after all, this is `item` interaction case,\n     * so we should display only one item at a time instead of all.\n     */\n    return [tooltipState.tooltipItemPayloads[0]];\n  }\n  return tooltipState.tooltipItemPayloads.filter(tpc => {\n    var _tpc$settings;\n    return ((_tpc$settings = tpc.settings) === null || _tpc$settings === void 0 ? void 0 : _tpc$settings.dataKey) === filterByDataKey;\n  });\n};"]},"metadata":{},"sourceType":"module"}