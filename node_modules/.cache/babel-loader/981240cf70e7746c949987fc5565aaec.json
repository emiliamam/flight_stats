{"ast":null,"code":"import { createAction, createListenerMiddleware } from '@reduxjs/toolkit';\nimport { setKeyboardInteraction } from './tooltipSlice';\nimport { selectTooltipAxisTicks, selectTooltipDisplayedData } from './selectors/tooltipSelectors';\nimport { selectCoordinateForDefaultIndex } from './selectors/selectors';\nimport { selectChartDirection } from './selectors/axisSelectors';\nimport { combineActiveTooltipIndex } from './selectors/combiners/combineActiveTooltipIndex';\nexport var keyDownAction = createAction('keyDown');\nexport var focusAction = createAction('focus');\nexport var keyboardEventsMiddleware = createListenerMiddleware();\nkeyboardEventsMiddleware.startListening({\n  actionCreator: keyDownAction,\n  effect: (action, listenerApi) => {\n    var state = listenerApi.getState();\n    var accessibilityLayerIsActive = state.rootProps.accessibilityLayer !== false;\n\n    if (!accessibilityLayerIsActive) {\n      return;\n    }\n\n    var {\n      keyboardInteraction\n    } = state.tooltip;\n    var key = action.payload;\n\n    if (key !== 'ArrowRight' && key !== 'ArrowLeft' && key !== 'Enter') {\n      return;\n    } // TODO this is lacking index for charts that do not support numeric indexes\n\n\n    var currentIndex = Number(combineActiveTooltipIndex(keyboardInteraction, selectTooltipDisplayedData(state)));\n    var tooltipTicks = selectTooltipAxisTicks(state);\n\n    if (key === 'Enter') {\n      var _coordinate = selectCoordinateForDefaultIndex(state, 'axis', 'hover', String(keyboardInteraction.index));\n\n      listenerApi.dispatch(setKeyboardInteraction({\n        active: !keyboardInteraction.active,\n        activeIndex: keyboardInteraction.index,\n        activeDataKey: keyboardInteraction.dataKey,\n        activeCoordinate: _coordinate\n      }));\n      return;\n    }\n\n    var direction = selectChartDirection(state);\n    var directionMultiplier = direction === 'left-to-right' ? 1 : -1;\n    var movement = key === 'ArrowRight' ? 1 : -1;\n    var nextIndex = currentIndex + movement * directionMultiplier;\n\n    if (tooltipTicks == null || nextIndex >= tooltipTicks.length || nextIndex < 0) {\n      return;\n    }\n\n    var coordinate = selectCoordinateForDefaultIndex(state, 'axis', 'hover', String(nextIndex));\n    listenerApi.dispatch(setKeyboardInteraction({\n      active: true,\n      activeIndex: nextIndex.toString(),\n      activeDataKey: undefined,\n      activeCoordinate: coordinate\n    }));\n  }\n});\nkeyboardEventsMiddleware.startListening({\n  actionCreator: focusAction,\n  effect: (_action, listenerApi) => {\n    var state = listenerApi.getState();\n    var accessibilityLayerIsActive = state.rootProps.accessibilityLayer !== false;\n\n    if (!accessibilityLayerIsActive) {\n      return;\n    }\n\n    var {\n      keyboardInteraction\n    } = state.tooltip;\n\n    if (keyboardInteraction.active) {\n      return;\n    }\n\n    if (keyboardInteraction.index == null) {\n      var nextIndex = '0';\n      var coordinate = selectCoordinateForDefaultIndex(state, 'axis', 'hover', String(nextIndex));\n      listenerApi.dispatch(setKeyboardInteraction({\n        activeDataKey: undefined,\n        active: true,\n        activeIndex: nextIndex,\n        activeCoordinate: coordinate\n      }));\n    }\n  }\n});","map":{"version":3,"sources":["/Users/emiliamamedova/charts/project_corona_tracker/node_modules/recharts/es6/state/keyboardEventsMiddleware.js"],"names":["createAction","createListenerMiddleware","setKeyboardInteraction","selectTooltipAxisTicks","selectTooltipDisplayedData","selectCoordinateForDefaultIndex","selectChartDirection","combineActiveTooltipIndex","keyDownAction","focusAction","keyboardEventsMiddleware","startListening","actionCreator","effect","action","listenerApi","state","getState","accessibilityLayerIsActive","rootProps","accessibilityLayer","keyboardInteraction","tooltip","key","payload","currentIndex","Number","tooltipTicks","_coordinate","String","index","dispatch","active","activeIndex","activeDataKey","dataKey","activeCoordinate","direction","directionMultiplier","movement","nextIndex","length","coordinate","toString","undefined","_action"],"mappings":"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","sourcesContent":["import { createAction, createListenerMiddleware } from '@reduxjs/toolkit';\nimport { setKeyboardInteraction } from './tooltipSlice';\nimport { selectTooltipAxisTicks, selectTooltipDisplayedData } from './selectors/tooltipSelectors';\nimport { selectCoordinateForDefaultIndex } from './selectors/selectors';\nimport { selectChartDirection } from './selectors/axisSelectors';\nimport { combineActiveTooltipIndex } from './selectors/combiners/combineActiveTooltipIndex';\nexport var keyDownAction = createAction('keyDown');\nexport var focusAction = createAction('focus');\nexport var keyboardEventsMiddleware = createListenerMiddleware();\nkeyboardEventsMiddleware.startListening({\n  actionCreator: keyDownAction,\n  effect: (action, listenerApi) => {\n    var state = listenerApi.getState();\n    var accessibilityLayerIsActive = state.rootProps.accessibilityLayer !== false;\n    if (!accessibilityLayerIsActive) {\n      return;\n    }\n    var {\n      keyboardInteraction\n    } = state.tooltip;\n    var key = action.payload;\n    if (key !== 'ArrowRight' && key !== 'ArrowLeft' && key !== 'Enter') {\n      return;\n    }\n\n    // TODO this is lacking index for charts that do not support numeric indexes\n    var currentIndex = Number(combineActiveTooltipIndex(keyboardInteraction, selectTooltipDisplayedData(state)));\n    var tooltipTicks = selectTooltipAxisTicks(state);\n    if (key === 'Enter') {\n      var _coordinate = selectCoordinateForDefaultIndex(state, 'axis', 'hover', String(keyboardInteraction.index));\n      listenerApi.dispatch(setKeyboardInteraction({\n        active: !keyboardInteraction.active,\n        activeIndex: keyboardInteraction.index,\n        activeDataKey: keyboardInteraction.dataKey,\n        activeCoordinate: _coordinate\n      }));\n      return;\n    }\n    var direction = selectChartDirection(state);\n    var directionMultiplier = direction === 'left-to-right' ? 1 : -1;\n    var movement = key === 'ArrowRight' ? 1 : -1;\n    var nextIndex = currentIndex + movement * directionMultiplier;\n    if (tooltipTicks == null || nextIndex >= tooltipTicks.length || nextIndex < 0) {\n      return;\n    }\n    var coordinate = selectCoordinateForDefaultIndex(state, 'axis', 'hover', String(nextIndex));\n    listenerApi.dispatch(setKeyboardInteraction({\n      active: true,\n      activeIndex: nextIndex.toString(),\n      activeDataKey: undefined,\n      activeCoordinate: coordinate\n    }));\n  }\n});\nkeyboardEventsMiddleware.startListening({\n  actionCreator: focusAction,\n  effect: (_action, listenerApi) => {\n    var state = listenerApi.getState();\n    var accessibilityLayerIsActive = state.rootProps.accessibilityLayer !== false;\n    if (!accessibilityLayerIsActive) {\n      return;\n    }\n    var {\n      keyboardInteraction\n    } = state.tooltip;\n    if (keyboardInteraction.active) {\n      return;\n    }\n    if (keyboardInteraction.index == null) {\n      var nextIndex = '0';\n      var coordinate = selectCoordinateForDefaultIndex(state, 'axis', 'hover', String(nextIndex));\n      listenerApi.dispatch(setKeyboardInteraction({\n        activeDataKey: undefined,\n        active: true,\n        activeIndex: nextIndex,\n        activeCoordinate: coordinate\n      }));\n    }\n  }\n});"]},"metadata":{},"sourceType":"module"}