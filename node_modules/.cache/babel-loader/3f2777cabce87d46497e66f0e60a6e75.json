{"ast":null,"code":"var _jsxFileName = \"/Users/emiliamamedova/charts/project_corona_tracker/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { fetchDailyData } from '../../api';\nimport styles from './Chart.module.css';\n\nconst Chart = ({\n  data: {\n    confirmed,\n    recovered,\n    deaths\n  },\n  country\n}) => {\n  const [dailyData, setDailyData] = useState({});\n  const [punctualityData, setPunctualityData] = useState(null);\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      const initialDailyData = await fetchDailyData();\n      setDailyData(initialDailyData);\n    };\n\n    fetchMyAPI();\n  }, []);\n  useEffect(() => {\n    if (airports.length === 0) return; // Подсчёт статистики по аэропортам\n\n    const stats = airports.map(({\n      IATA,\n      City\n    }) => {\n      const flightsAtAirport = sampleFlights.filter(f => f.airportIATA === IATA);\n      if (flightsAtAirport.length === 0) return null;\n      const onTimeCount = flightsAtAirport.filter(flight => {\n        const scheduled = new Date(flight.scheduledArrival);\n        const actual = new Date(flight.actualArrival);\n        const delayMins = (actual - scheduled) / 60000;\n        return delayMins <= 15;\n      }).length;\n      const punctualityPercent = onTimeCount / flightsAtAirport.length * 100;\n      return {\n        airport: City,\n        punctualityPercent\n      };\n    }).filter(Boolean); // Сортируем по пунктуальности\n\n    stats.sort((a, b) => b.punctualityPercent - a.punctualityPercent); // Формируем данные для графика\n\n    setPunctualityData({\n      labels: stats.map(s => s.airport),\n      datasets: [{\n        label: '% On Time (≤15 min delay)',\n        backgroundColor: 'rgba(75,192,192,0.6)',\n        data: stats.map(s => s.punctualityPercent)\n      }]\n    });\n  }, [airports]);\n  if (!punctualityData) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 32\n    }\n  }, \"Loading...\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      maxWidth: 700,\n      margin: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"\\u0420\\u0435\\u0439\\u0442\\u0438\\u043D\\u0433 \\u043F\\u0443\\u043D\\u043A\\u0442\\u0443\\u0430\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u0438 \\u0430\\u044D\\u0440\\u043E\\u043F\\u043E\\u0440\\u0442\\u043E\\u0432\"), /*#__PURE__*/React.createElement(Bar, {\n    data: punctualityData,\n    options: {\n      scales: {\n        y: {\n          beginAtZero: true,\n          max: 100,\n          title: {\n            display: true,\n            text: '%'\n          }\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Chart;","map":{"version":3,"sources":["/Users/emiliamamedova/charts/project_corona_tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","Line","Bar","fetchDailyData","styles","Chart","data","confirmed","recovered","deaths","country","dailyData","setDailyData","punctualityData","setPunctualityData","fetchMyAPI","initialDailyData","airports","length","stats","map","IATA","City","flightsAtAirport","sampleFlights","filter","f","airportIATA","onTimeCount","flight","scheduled","Date","scheduledArrival","actual","actualArrival","delayMins","punctualityPercent","airport","Boolean","sort","a","b","labels","s","datasets","label","backgroundColor","maxWidth","margin","scales","y","beginAtZero","max","title","display","text"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;AAEA,SAASC,cAAT,QAA+B,WAA/B;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA;AAAxB,GAAR;AAA0CC,EAAAA;AAA1C,CAAD,KAAyD;AACrE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACc,eAAD,EAAkBC,kBAAlB,IAAwCf,QAAQ,CAAC,IAAD,CAAtD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,UAAU,GAAG,YAAY;AAC7B,YAAMC,gBAAgB,GAAG,MAAMb,cAAc,EAA7C;AAEAS,MAAAA,YAAY,CAACI,gBAAD,CAAZ;AACD,KAJD;;AAMAD,IAAAA,UAAU;AACX,GARQ,EAQN,EARM,CAAT;AAUAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,QAAQ,CAACC,MAAT,KAAoB,CAAxB,EAA2B,OADb,CAGd;;AACA,UAAMC,KAAK,GAAGF,QAAQ,CAACG,GAAT,CAAa,CAAC;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,KAAoB;AAC7C,YAAMC,gBAAgB,GAAGC,aAAa,CAACC,MAAd,CAAqBC,CAAC,IAAIA,CAAC,CAACC,WAAF,KAAkBN,IAA5C,CAAzB;AACA,UAAIE,gBAAgB,CAACL,MAAjB,KAA4B,CAAhC,EAAmC,OAAO,IAAP;AAEnC,YAAMU,WAAW,GAAGL,gBAAgB,CAACE,MAAjB,CAAwBI,MAAM,IAAI;AACpD,cAAMC,SAAS,GAAG,IAAIC,IAAJ,CAASF,MAAM,CAACG,gBAAhB,CAAlB;AACA,cAAMC,MAAM,GAAG,IAAIF,IAAJ,CAASF,MAAM,CAACK,aAAhB,CAAf;AACA,cAAMC,SAAS,GAAG,CAACF,MAAM,GAAGH,SAAV,IAAuB,KAAzC;AACA,eAAOK,SAAS,IAAI,EAApB;AACD,OALmB,EAKjBjB,MALH;AAOA,YAAMkB,kBAAkB,GAAIR,WAAW,GAAGL,gBAAgB,CAACL,MAAhC,GAA0C,GAArE;AAEA,aAAO;AACLmB,QAAAA,OAAO,EAAEf,IADJ;AAELc,QAAAA;AAFK,OAAP;AAID,KAjBa,EAiBXX,MAjBW,CAiBJa,OAjBI,CAAd,CAJc,CAuBd;;AACAnB,IAAAA,KAAK,CAACoB,IAAN,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACL,kBAAF,GAAuBI,CAAC,CAACJ,kBAA9C,EAxBc,CA0Bd;;AACAtB,IAAAA,kBAAkB,CAAC;AACjB4B,MAAAA,MAAM,EAAEvB,KAAK,CAACC,GAAN,CAAUuB,CAAC,IAAIA,CAAC,CAACN,OAAjB,CADS;AAEjBO,MAAAA,QAAQ,EAAE,CAAC;AACTC,QAAAA,KAAK,EAAE,2BADE;AAETC,QAAAA,eAAe,EAAE,sBAFR;AAGTxC,QAAAA,IAAI,EAAEa,KAAK,CAACC,GAAN,CAAUuB,CAAC,IAAIA,CAAC,CAACP,kBAAjB;AAHG,OAAD;AAFO,KAAD,CAAlB;AASD,GApCQ,EAoCN,CAACnB,QAAD,CApCM,CAAT;AAsCA,MAAI,CAACJ,eAAL,EAAsB,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEtB,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEkC,MAAAA,QAAQ,EAAE,GAAZ;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oMADF,eAEE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAEnC,eAAX;AAA4B,IAAA,OAAO,EAAE;AACnCoC,MAAAA,MAAM,EAAE;AACNC,QAAAA,CAAC,EAAE;AAAEC,UAAAA,WAAW,EAAE,IAAf;AAAqBC,UAAAA,GAAG,EAAE,GAA1B;AAA+BC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,OAAO,EAAE,IAAX;AAAiBC,YAAAA,IAAI,EAAE;AAAvB;AAAtC;AADG;AAD2B,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAUD,CAhED;;AAiEA,eAAelD,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport { fetchDailyData } from '../../api';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState({});\n  const [punctualityData, setPunctualityData] = useState(null);\n\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      const initialDailyData = await fetchDailyData();\n\n      setDailyData(initialDailyData);\n    };\n\n    fetchMyAPI();\n  }, []);\n\n  useEffect(() => {\n    if (airports.length === 0) return;\n\n    // Подсчёт статистики по аэропортам\n    const stats = airports.map(({ IATA, City }) => {\n      const flightsAtAirport = sampleFlights.filter(f => f.airportIATA === IATA);\n      if (flightsAtAirport.length === 0) return null;\n\n      const onTimeCount = flightsAtAirport.filter(flight => {\n        const scheduled = new Date(flight.scheduledArrival);\n        const actual = new Date(flight.actualArrival);\n        const delayMins = (actual - scheduled) / 60000;\n        return delayMins <= 15;\n      }).length;\n\n      const punctualityPercent = (onTimeCount / flightsAtAirport.length) * 100;\n\n      return {\n        airport: City,\n        punctualityPercent,\n      };\n    }).filter(Boolean);\n\n    // Сортируем по пунктуальности\n    stats.sort((a, b) => b.punctualityPercent - a.punctualityPercent);\n\n    // Формируем данные для графика\n    setPunctualityData({\n      labels: stats.map(s => s.airport),\n      datasets: [{\n        label: '% On Time (≤15 min delay)',\n        backgroundColor: 'rgba(75,192,192,0.6)',\n        data: stats.map(s => s.punctualityPercent),\n      }],\n    });\n\n  }, [airports]);\n\n  if (!punctualityData) return <div>Loading...</div>;\n\n  return (\n    <div style={{ maxWidth: 700, margin: 'auto' }}>\n      <h2>Рейтинг пунктуальности аэропортов</h2>\n      <Bar data={punctualityData} options={{ \n        scales: {\n          y: { beginAtZero: true, max: 100, title: { display: true, text: '%' } }\n        }\n      }} />\n    </div>\n  );\n};\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}