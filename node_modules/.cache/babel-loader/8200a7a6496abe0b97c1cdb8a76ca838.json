{"ast":null,"code":"import { useState, useEffect } from 'react'; // Статичный список IATA-кодов российских аэропортов (пример)\n\nconst RUSSIAN_AIRPORTS = ['SVO', 'DME', 'VKO', 'LED', 'AER', 'KZN', 'SVX', 'ROV', 'UFA', 'KGD', 'OVB', 'CEK', 'MRV', 'NJC', 'KRR', 'OMS', 'GOJ', 'KUF', 'BQS', 'UUS', 'VVO', 'KJA', 'IKT'];\nexport default function useFlightStats() {\n  const [stats, setStats] = useState({\n    hourlyStats: Array(24).fill().map((_, i) => ({\n      hour: i,\n      onTime: 0,\n      delayed: 0,\n      cancelled: 0\n    })),\n    currentFlights: 0\n  });\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // 1. Запрос данных за сегодня\n        const today = new Date().toISOString().split('T')[0]; // 2025-07-24\n\n        let allFlights = [];\n        let offset = 0;\n        const limit = 100;\n\n        do {\n          const response = await fetch(`https://api.aviationstack.com/v1/flights?access_key=c878f53f2faec4c836c07916329e90c8&flight_date=${today}&offset=${offset}`);\n          const json = await response.json();\n          const data = json.data || [];\n          const pagination = json.pagination || {};\n          allFlights = [...allFlights, ...data];\n          offset += limit;\n        } while (offset < pagination.total); // 2. Фильтрация российских рейсов\n\n\n        const russianFlights = allFlights.filter(flight => RUSSIAN_AIRPORTS.includes(flight.departure.iata) || RUSSIAN_AIRPORTS.includes(flight.arrival.iata)); // 3. Статистика по часам\n\n        const hourlyStats = Array(24).fill().map((_, i) => ({\n          hour: i,\n          onTime: 0,\n          delayed: 0,\n          cancelled: 0\n        }));\n        russianFlights.forEach(flight => {\n          if (!flight.departure.scheduled) return;\n          const scheduledUTC = new Date(flight.departure.scheduled);\n          const hourMoscow = (scheduledUTC.getUTCHours() + 3) % 24;\n\n          if (flight.flight_status === 'cancelled') {\n            hourlyStats[hourMoscow].cancelled += 1;\n          } else if (flight.departure.actual) {\n            const actualUTC = new Date(flight.departure.actual);\n            const delayMinutes = (actualUTC - scheduledUTC) / 60000;\n            delayMinutes <= 15 ? hourlyStats[hourMoscow].onTime += 1 : hourlyStats[hourMoscow].delayed += 1;\n          }\n        }); // 4. Рейсы в воздухе\n\n        const currentFlights = russianFlights.filter(flight => flight.flight_status === 'active').length; // 5. Обновление состояния\n\n        setStats({\n          hourlyStats,\n          currentFlights\n        });\n        setLoading(false);\n      } catch (error) {\n        console.error('Ошибка при получении данных:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n  return { ...stats,\n    loading\n  };\n}","map":{"version":3,"sources":["/Users/emiliamamedova/charts/project_corona_tracker/src/shared/useFlightStats.jsx"],"names":["useState","useEffect","RUSSIAN_AIRPORTS","useFlightStats","stats","setStats","hourlyStats","Array","fill","map","_","i","hour","onTime","delayed","cancelled","currentFlights","loading","setLoading","fetchData","today","Date","toISOString","split","allFlights","offset","limit","response","fetch","json","data","pagination","total","russianFlights","filter","flight","includes","departure","iata","arrival","forEach","scheduled","scheduledUTC","hourMoscow","getUTCHours","flight_status","actual","actualUTC","delayMinutes","length","error","console"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\n\n// Статичный список IATA-кодов российских аэропортов (пример)\nconst RUSSIAN_AIRPORTS = ['SVO', 'DME', 'VKO', 'LED', 'AER', 'KZN', 'SVX', 'ROV', 'UFA', 'KGD', 'OVB', 'CEK', 'MRV', 'NJC', 'KRR', 'OMS', 'GOJ', 'KUF', 'BQS', 'UUS', 'VVO', 'KJA', 'IKT'];\n\nexport default function useFlightStats() {\n  const [stats, setStats] = useState({\n    hourlyStats: Array(24).fill().map((_, i) => ({ \n      hour: i, \n      onTime: 0, \n      delayed: 0, \n      cancelled: 0 \n    })),\n    currentFlights: 0\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // 1. Запрос данных за сегодня\n        const today = new Date().toISOString().split('T')[0]; // 2025-07-24\n        let allFlights = [];\n        let offset = 0;\n        const limit = 100;\n\n        do {\n          const response = await fetch(\n            `https://api.aviationstack.com/v1/flights?access_key=c878f53f2faec4c836c07916329e90c8&flight_date=${today}&offset=${offset}`\n          );\n          const json = await response.json();\n          const data = json.data || [];\n          const pagination = json.pagination || {};\n          \n          allFlights = [...allFlights, ...data];\n          offset += limit;\n        } while (offset < pagination.total);\n\n        // 2. Фильтрация российских рейсов\n        const russianFlights = allFlights.filter(flight => \n          RUSSIAN_AIRPORTS.includes(flight.departure.iata) || \n          RUSSIAN_AIRPORTS.includes(flight.arrival.iata)\n        );\n\n        // 3. Статистика по часам\n        const hourlyStats = Array(24).fill().map((_, i) => ({\n          hour: i,\n          onTime: 0,\n          delayed: 0,\n          cancelled: 0\n        }));\n\n        russianFlights.forEach(flight => {\n          if (!flight.departure.scheduled) return;\n          \n          const scheduledUTC = new Date(flight.departure.scheduled);\n          const hourMoscow = (scheduledUTC.getUTCHours() + 3) % 24;\n          \n          if (flight.flight_status === 'cancelled') {\n            hourlyStats[hourMoscow].cancelled += 1;\n          } else if (flight.departure.actual) {\n            const actualUTC = new Date(flight.departure.actual);\n            const delayMinutes = (actualUTC - scheduledUTC) / 60000;\n            \n            delayMinutes <= 15 \n              ? hourlyStats[hourMoscow].onTime += 1 \n              : hourlyStats[hourMoscow].delayed += 1;\n          }\n        });\n\n        // 4. Рейсы в воздухе\n        const currentFlights = russianFlights.filter(\n          flight => flight.flight_status === 'active'\n        ).length;\n\n        // 5. Обновление состояния\n        setStats({ hourlyStats, currentFlights });\n        setLoading(false);\n        \n      } catch (error) {\n        console.error('Ошибка при получении данных:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return { ...stats, loading };\n}"]},"metadata":{},"sourceType":"module"}