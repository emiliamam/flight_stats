{"ast":null,"code":"import { createSelector } from 'reselect';\nimport { computeScatterPoints } from '../../cartesian/Scatter';\nimport { selectChartDataWithIndexesIfNotInPanorama } from './dataSelectors';\nimport { selectAxisWithScale, selectZAxisWithScale, selectTicksOfGraphicalItem, selectUnfilteredCartesianItems } from './axisSelectors';\n\nvar selectXAxisWithScale = (state, xAxisId, _yAxisId, _zAxisId, _scatterSettings, _cells, isPanorama) => selectAxisWithScale(state, 'xAxis', xAxisId, isPanorama);\n\nvar selectXAxisTicks = (state, xAxisId, _yAxisId, _zAxisId, _scatterSettings, _cells, isPanorama) => selectTicksOfGraphicalItem(state, 'xAxis', xAxisId, isPanorama);\n\nvar selectYAxisWithScale = (state, _xAxisId, yAxisId, _zAxisId, _scatterSettings, _cells, isPanorama) => selectAxisWithScale(state, 'yAxis', yAxisId, isPanorama);\n\nvar selectYAxisTicks = (state, _xAxisId, yAxisId, _zAxisId, _scatterSettings, _cells, isPanorama) => selectTicksOfGraphicalItem(state, 'yAxis', yAxisId, isPanorama);\n\nvar selectZAxis = (state, _xAxisId, _yAxisId, zAxisId) => selectZAxisWithScale(state, 'zAxis', zAxisId, false);\n\nvar pickScatterSettings = (_state, _xAxisId, _yAxisId, _zAxisId, scatterSettings) => scatterSettings;\n\nvar pickCells = (_state, _xAxisId, _yAxisId, _zAxisId, _scatterSettings, cells) => cells;\n\nvar scatterChartDataSelector = (state, xAxisId, yAxisId, _zAxisId, _scatterSettings, _cells, isPanorama) => selectChartDataWithIndexesIfNotInPanorama(state, xAxisId, yAxisId, isPanorama);\n\nvar selectSynchronisedScatterSettings = createSelector([selectUnfilteredCartesianItems, pickScatterSettings], (graphicalItems, scatterSettingsFromProps) => {\n  if (graphicalItems.some(cgis => cgis.type === 'scatter' && scatterSettingsFromProps.dataKey === cgis.dataKey && scatterSettingsFromProps.data === cgis.data)) {\n    return scatterSettingsFromProps;\n  }\n\n  return undefined;\n});\nexport var selectScatterPoints = createSelector([scatterChartDataSelector, selectXAxisWithScale, selectXAxisTicks, selectYAxisWithScale, selectYAxisTicks, selectZAxis, selectSynchronisedScatterSettings, pickCells], (_ref, xAxis, xAxisTicks, yAxis, yAxisTicks, zAxis, scatterSettings, cells) => {\n  var {\n    chartData,\n    dataStartIndex,\n    dataEndIndex\n  } = _ref;\n\n  if (scatterSettings == null) {\n    return undefined;\n  }\n\n  var displayedData;\n\n  if ((scatterSettings === null || scatterSettings === void 0 ? void 0 : scatterSettings.data) != null && scatterSettings.data.length > 0) {\n    displayedData = scatterSettings.data;\n  } else {\n    displayedData = chartData === null || chartData === void 0 ? void 0 : chartData.slice(dataStartIndex, dataEndIndex + 1);\n  }\n\n  if (displayedData == null || xAxis == null || yAxis == null || xAxisTicks == null || yAxisTicks == null || (xAxisTicks === null || xAxisTicks === void 0 ? void 0 : xAxisTicks.length) === 0 || (yAxisTicks === null || yAxisTicks === void 0 ? void 0 : yAxisTicks.length) === 0) {\n    return undefined;\n  }\n\n  return computeScatterPoints({\n    displayedData,\n    xAxis,\n    yAxis,\n    zAxis,\n    scatterSettings,\n    xAxisTicks,\n    yAxisTicks,\n    cells\n  });\n});","map":{"version":3,"sources":["/Users/emiliamamedova/charts/flightStats/node_modules/recharts/es6/state/selectors/scatterSelectors.js"],"names":["createSelector","computeScatterPoints","selectChartDataWithIndexesIfNotInPanorama","selectAxisWithScale","selectZAxisWithScale","selectTicksOfGraphicalItem","selectUnfilteredCartesianItems","selectXAxisWithScale","state","xAxisId","_yAxisId","_zAxisId","_scatterSettings","_cells","isPanorama","selectXAxisTicks","selectYAxisWithScale","_xAxisId","yAxisId","selectYAxisTicks","selectZAxis","zAxisId","pickScatterSettings","_state","scatterSettings","pickCells","cells","scatterChartDataSelector","selectSynchronisedScatterSettings","graphicalItems","scatterSettingsFromProps","some","cgis","type","dataKey","data","undefined","selectScatterPoints","_ref","xAxis","xAxisTicks","yAxis","yAxisTicks","zAxis","chartData","dataStartIndex","dataEndIndex","displayedData","length","slice"],"mappings":"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","sourcesContent":["import { createSelector } from 'reselect';\nimport { computeScatterPoints } from '../../cartesian/Scatter';\nimport { selectChartDataWithIndexesIfNotInPanorama } from './dataSelectors';\nimport { selectAxisWithScale, selectZAxisWithScale, selectTicksOfGraphicalItem, selectUnfilteredCartesianItems } from './axisSelectors';\nvar selectXAxisWithScale = (state, xAxisId, _yAxisId, _zAxisId, _scatterSettings, _cells, isPanorama) => selectAxisWithScale(state, 'xAxis', xAxisId, isPanorama);\nvar selectXAxisTicks = (state, xAxisId, _yAxisId, _zAxisId, _scatterSettings, _cells, isPanorama) => selectTicksOfGraphicalItem(state, 'xAxis', xAxisId, isPanorama);\nvar selectYAxisWithScale = (state, _xAxisId, yAxisId, _zAxisId, _scatterSettings, _cells, isPanorama) => selectAxisWithScale(state, 'yAxis', yAxisId, isPanorama);\nvar selectYAxisTicks = (state, _xAxisId, yAxisId, _zAxisId, _scatterSettings, _cells, isPanorama) => selectTicksOfGraphicalItem(state, 'yAxis', yAxisId, isPanorama);\nvar selectZAxis = (state, _xAxisId, _yAxisId, zAxisId) => selectZAxisWithScale(state, 'zAxis', zAxisId, false);\nvar pickScatterSettings = (_state, _xAxisId, _yAxisId, _zAxisId, scatterSettings) => scatterSettings;\nvar pickCells = (_state, _xAxisId, _yAxisId, _zAxisId, _scatterSettings, cells) => cells;\nvar scatterChartDataSelector = (state, xAxisId, yAxisId, _zAxisId, _scatterSettings, _cells, isPanorama) => selectChartDataWithIndexesIfNotInPanorama(state, xAxisId, yAxisId, isPanorama);\nvar selectSynchronisedScatterSettings = createSelector([selectUnfilteredCartesianItems, pickScatterSettings], (graphicalItems, scatterSettingsFromProps) => {\n  if (graphicalItems.some(cgis => cgis.type === 'scatter' && scatterSettingsFromProps.dataKey === cgis.dataKey && scatterSettingsFromProps.data === cgis.data)) {\n    return scatterSettingsFromProps;\n  }\n  return undefined;\n});\nexport var selectScatterPoints = createSelector([scatterChartDataSelector, selectXAxisWithScale, selectXAxisTicks, selectYAxisWithScale, selectYAxisTicks, selectZAxis, selectSynchronisedScatterSettings, pickCells], (_ref, xAxis, xAxisTicks, yAxis, yAxisTicks, zAxis, scatterSettings, cells) => {\n  var {\n    chartData,\n    dataStartIndex,\n    dataEndIndex\n  } = _ref;\n  if (scatterSettings == null) {\n    return undefined;\n  }\n  var displayedData;\n  if ((scatterSettings === null || scatterSettings === void 0 ? void 0 : scatterSettings.data) != null && scatterSettings.data.length > 0) {\n    displayedData = scatterSettings.data;\n  } else {\n    displayedData = chartData === null || chartData === void 0 ? void 0 : chartData.slice(dataStartIndex, dataEndIndex + 1);\n  }\n  if (displayedData == null || xAxis == null || yAxis == null || xAxisTicks == null || yAxisTicks == null || (xAxisTicks === null || xAxisTicks === void 0 ? void 0 : xAxisTicks.length) === 0 || (yAxisTicks === null || yAxisTicks === void 0 ? void 0 : yAxisTicks.length) === 0) {\n    return undefined;\n  }\n  return computeScatterPoints({\n    displayedData,\n    xAxis,\n    yAxis,\n    zAxis,\n    scatterSettings,\n    xAxisTicks,\n    yAxisTicks,\n    cells\n  });\n});"]},"metadata":{},"sourceType":"module"}