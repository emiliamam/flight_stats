{"ast":null,"code":"import { useEffect } from 'react';\nimport { useAppDispatch } from './hooks';\nimport { addTooltipEntrySettings, removeTooltipEntrySettings } from './tooltipSlice';\nimport { useIsPanorama } from '../context/PanoramaContext';\nexport function SetTooltipEntrySettings(_ref) {\n  var {\n    fn,\n    args\n  } = _ref;\n  var dispatch = useAppDispatch();\n  var isPanorama = useIsPanorama();\n  useEffect(() => {\n    if (isPanorama) {\n      // Panorama graphical items should never contribute to Tooltip payload.\n      return undefined;\n    }\n\n    var tooltipEntrySettings = fn(args);\n    dispatch(addTooltipEntrySettings(tooltipEntrySettings));\n    return () => {\n      dispatch(removeTooltipEntrySettings(tooltipEntrySettings));\n    };\n  }, [fn, args, dispatch, isPanorama]);\n  return null;\n}","map":{"version":3,"sources":["/Users/emiliamamedova/charts/project_corona_tracker/node_modules/recharts/es6/state/SetTooltipEntrySettings.js"],"names":["useEffect","useAppDispatch","addTooltipEntrySettings","removeTooltipEntrySettings","useIsPanorama","SetTooltipEntrySettings","_ref","fn","args","dispatch","isPanorama","undefined","tooltipEntrySettings"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,cAAT,QAA+B,SAA/B;AACA,SAASC,uBAAT,EAAkCC,0BAAlC,QAAoE,gBAApE;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,OAAO,SAASC,uBAAT,CAAiCC,IAAjC,EAAuC;AAC5C,MAAI;AACFC,IAAAA,EADE;AAEFC,IAAAA;AAFE,MAGAF,IAHJ;AAIA,MAAIG,QAAQ,GAAGR,cAAc,EAA7B;AACA,MAAIS,UAAU,GAAGN,aAAa,EAA9B;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,UAAJ,EAAgB;AACd;AACA,aAAOC,SAAP;AACD;;AACD,QAAIC,oBAAoB,GAAGL,EAAE,CAACC,IAAD,CAA7B;AACAC,IAAAA,QAAQ,CAACP,uBAAuB,CAACU,oBAAD,CAAxB,CAAR;AACA,WAAO,MAAM;AACXH,MAAAA,QAAQ,CAACN,0BAA0B,CAACS,oBAAD,CAA3B,CAAR;AACD,KAFD;AAGD,GAVQ,EAUN,CAACL,EAAD,EAAKC,IAAL,EAAWC,QAAX,EAAqBC,UAArB,CAVM,CAAT;AAWA,SAAO,IAAP;AACD","sourcesContent":["import { useEffect } from 'react';\nimport { useAppDispatch } from './hooks';\nimport { addTooltipEntrySettings, removeTooltipEntrySettings } from './tooltipSlice';\nimport { useIsPanorama } from '../context/PanoramaContext';\nexport function SetTooltipEntrySettings(_ref) {\n  var {\n    fn,\n    args\n  } = _ref;\n  var dispatch = useAppDispatch();\n  var isPanorama = useIsPanorama();\n  useEffect(() => {\n    if (isPanorama) {\n      // Panorama graphical items should never contribute to Tooltip payload.\n      return undefined;\n    }\n    var tooltipEntrySettings = fn(args);\n    dispatch(addTooltipEntrySettings(tooltipEntrySettings));\n    return () => {\n      dispatch(removeTooltipEntrySettings(tooltipEntrySettings));\n    };\n  }, [fn, args, dispatch, isPanorama]);\n  return null;\n}"]},"metadata":{},"sourceType":"module"}