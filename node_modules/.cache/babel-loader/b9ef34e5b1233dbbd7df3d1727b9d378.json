{"ast":null,"code":"import { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../state/hooks';\nimport { setChartSize, setMargin } from '../state/layoutSlice';\nimport { selectChartOffsetInternal, selectChartViewBox } from '../state/selectors/selectChartOffsetInternal';\nimport { selectChartHeight, selectChartWidth } from '../state/selectors/containerSelectors';\nimport { useIsPanorama } from './PanoramaContext';\nimport { selectBrushDimensions, selectBrushSettings } from '../state/selectors/brushSelectors';\nexport var useViewBox = () => {\n  var _useAppSelector;\n\n  var panorama = useIsPanorama();\n  var rootViewBox = useAppSelector(selectChartViewBox);\n  var brushDimensions = useAppSelector(selectBrushDimensions);\n  var brushPadding = (_useAppSelector = useAppSelector(selectBrushSettings)) === null || _useAppSelector === void 0 ? void 0 : _useAppSelector.padding;\n\n  if (!panorama || !brushDimensions || !brushPadding) {\n    return rootViewBox;\n  }\n\n  return {\n    width: brushDimensions.width - brushPadding.left - brushPadding.right,\n    height: brushDimensions.height - brushPadding.top - brushPadding.bottom,\n    x: brushPadding.left,\n    y: brushPadding.top\n  };\n};\nvar manyComponentsThrowErrorsIfOffsetIsUndefined = {\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0,\n  width: 0,\n  height: 0,\n  brushBottom: 0\n};\n/**\n * For internal use only. If you want this information, `import { useOffset } from 'recharts'` instead.\n *\n * Returns the offset of the chart in pixels.\n *\n * @returns {ChartOffsetInternal} The offset of the chart in pixels, or a default value if not in a chart context.\n */\n\nexport var useOffsetInternal = () => {\n  var _useAppSelector2;\n\n  return (_useAppSelector2 = useAppSelector(selectChartOffsetInternal)) !== null && _useAppSelector2 !== void 0 ? _useAppSelector2 : manyComponentsThrowErrorsIfOffsetIsUndefined;\n};\n/**\n * Returns the width of the chart in pixels.\n *\n * If you are using chart with hardcoded `width` prop, then the width returned will be the same\n * as the `width` prop on the main chart element.\n *\n * If you are using a chart with a `ResponsiveContainer`, the width will be the size of the chart\n * as the ResponsiveContainer has decided it would be.\n *\n * If the chart has any axes or legend, the `width` will be the size of the chart\n * including the axes and legend. Meaning: adding axes and legend will not change the width.\n *\n * The dimensions do not scale, meaning as user zoom in and out, the width number will not change\n * as the chart gets visually larger or smaller.\n *\n * Returns `undefined` if used outside a chart context.\n *\n * @returns {number | undefined} The width of the chart in pixels, or `undefined` if not in a chart context.\n */\n\nexport var useChartWidth = () => {\n  return useAppSelector(selectChartWidth);\n};\n/**\n * Returns the height of the chart in pixels.\n *\n * If you are using chart with hardcoded `height` props, then the height returned will be the same\n * as the `height` prop on the main chart element.\n *\n * If you are using a chart with a `ResponsiveContainer`, the height will be the size of the chart\n * as the ResponsiveContainer has decided it would be.\n *\n * If the chart has any axes or legend, the `height` will be the size of the chart\n * including the axes and legend. Meaning: adding axes and legend will not change the height.\n *\n * The dimensions do not scale, meaning as user zoom in and out, the height number will not change\n * as the chart gets visually larger or smaller.\n *\n * Returns `undefined` if used outside a chart context.\n *\n * @returns {number | undefined} The height of the chart in pixels, or `undefined` if not in a chart context.\n */\n\nexport var useChartHeight = () => {\n  return useAppSelector(selectChartHeight);\n};\nvar manyComponentsThrowErrorsIfMarginIsUndefined = {\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0\n};\nexport var useMargin = () => {\n  var _useAppSelector3;\n\n  return (_useAppSelector3 = useAppSelector(state => state.layout.margin)) !== null && _useAppSelector3 !== void 0 ? _useAppSelector3 : manyComponentsThrowErrorsIfMarginIsUndefined;\n};\nexport var selectChartLayout = state => state.layout.layoutType;\nexport var useChartLayout = () => useAppSelector(selectChartLayout);\nexport var ReportChartSize = props => {\n  var dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(setChartSize(props));\n  }, [dispatch, props]);\n  return null;\n};\nexport var ReportChartMargin = _ref => {\n  var {\n    margin\n  } = _ref;\n  var dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(setMargin(margin));\n  }, [dispatch, margin]);\n  return null;\n};","map":{"version":3,"sources":["/Users/emiliamamedova/charts/flightStats/node_modules/recharts/es6/context/chartLayoutContext.js"],"names":["useEffect","useAppDispatch","useAppSelector","setChartSize","setMargin","selectChartOffsetInternal","selectChartViewBox","selectChartHeight","selectChartWidth","useIsPanorama","selectBrushDimensions","selectBrushSettings","useViewBox","_useAppSelector","panorama","rootViewBox","brushDimensions","brushPadding","padding","width","left","right","height","top","bottom","x","y","manyComponentsThrowErrorsIfOffsetIsUndefined","brushBottom","useOffsetInternal","_useAppSelector2","useChartWidth","useChartHeight","manyComponentsThrowErrorsIfMarginIsUndefined","useMargin","_useAppSelector3","state","layout","margin","selectChartLayout","layoutType","useChartLayout","ReportChartSize","props","dispatch","ReportChartMargin","_ref"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../state/hooks';\nimport { setChartSize, setMargin } from '../state/layoutSlice';\nimport { selectChartOffsetInternal, selectChartViewBox } from '../state/selectors/selectChartOffsetInternal';\nimport { selectChartHeight, selectChartWidth } from '../state/selectors/containerSelectors';\nimport { useIsPanorama } from './PanoramaContext';\nimport { selectBrushDimensions, selectBrushSettings } from '../state/selectors/brushSelectors';\nexport var useViewBox = () => {\n  var _useAppSelector;\n  var panorama = useIsPanorama();\n  var rootViewBox = useAppSelector(selectChartViewBox);\n  var brushDimensions = useAppSelector(selectBrushDimensions);\n  var brushPadding = (_useAppSelector = useAppSelector(selectBrushSettings)) === null || _useAppSelector === void 0 ? void 0 : _useAppSelector.padding;\n  if (!panorama || !brushDimensions || !brushPadding) {\n    return rootViewBox;\n  }\n  return {\n    width: brushDimensions.width - brushPadding.left - brushPadding.right,\n    height: brushDimensions.height - brushPadding.top - brushPadding.bottom,\n    x: brushPadding.left,\n    y: brushPadding.top\n  };\n};\nvar manyComponentsThrowErrorsIfOffsetIsUndefined = {\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0,\n  width: 0,\n  height: 0,\n  brushBottom: 0\n};\n/**\n * For internal use only. If you want this information, `import { useOffset } from 'recharts'` instead.\n *\n * Returns the offset of the chart in pixels.\n *\n * @returns {ChartOffsetInternal} The offset of the chart in pixels, or a default value if not in a chart context.\n */\nexport var useOffsetInternal = () => {\n  var _useAppSelector2;\n  return (_useAppSelector2 = useAppSelector(selectChartOffsetInternal)) !== null && _useAppSelector2 !== void 0 ? _useAppSelector2 : manyComponentsThrowErrorsIfOffsetIsUndefined;\n};\n\n/**\n * Returns the width of the chart in pixels.\n *\n * If you are using chart with hardcoded `width` prop, then the width returned will be the same\n * as the `width` prop on the main chart element.\n *\n * If you are using a chart with a `ResponsiveContainer`, the width will be the size of the chart\n * as the ResponsiveContainer has decided it would be.\n *\n * If the chart has any axes or legend, the `width` will be the size of the chart\n * including the axes and legend. Meaning: adding axes and legend will not change the width.\n *\n * The dimensions do not scale, meaning as user zoom in and out, the width number will not change\n * as the chart gets visually larger or smaller.\n *\n * Returns `undefined` if used outside a chart context.\n *\n * @returns {number | undefined} The width of the chart in pixels, or `undefined` if not in a chart context.\n */\nexport var useChartWidth = () => {\n  return useAppSelector(selectChartWidth);\n};\n\n/**\n * Returns the height of the chart in pixels.\n *\n * If you are using chart with hardcoded `height` props, then the height returned will be the same\n * as the `height` prop on the main chart element.\n *\n * If you are using a chart with a `ResponsiveContainer`, the height will be the size of the chart\n * as the ResponsiveContainer has decided it would be.\n *\n * If the chart has any axes or legend, the `height` will be the size of the chart\n * including the axes and legend. Meaning: adding axes and legend will not change the height.\n *\n * The dimensions do not scale, meaning as user zoom in and out, the height number will not change\n * as the chart gets visually larger or smaller.\n *\n * Returns `undefined` if used outside a chart context.\n *\n * @returns {number | undefined} The height of the chart in pixels, or `undefined` if not in a chart context.\n */\nexport var useChartHeight = () => {\n  return useAppSelector(selectChartHeight);\n};\nvar manyComponentsThrowErrorsIfMarginIsUndefined = {\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0\n};\nexport var useMargin = () => {\n  var _useAppSelector3;\n  return (_useAppSelector3 = useAppSelector(state => state.layout.margin)) !== null && _useAppSelector3 !== void 0 ? _useAppSelector3 : manyComponentsThrowErrorsIfMarginIsUndefined;\n};\nexport var selectChartLayout = state => state.layout.layoutType;\nexport var useChartLayout = () => useAppSelector(selectChartLayout);\nexport var ReportChartSize = props => {\n  var dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(setChartSize(props));\n  }, [dispatch, props]);\n  return null;\n};\nexport var ReportChartMargin = _ref => {\n  var {\n    margin\n  } = _ref;\n  var dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(setMargin(margin));\n  }, [dispatch, margin]);\n  return null;\n};"]},"metadata":{},"sourceType":"module"}