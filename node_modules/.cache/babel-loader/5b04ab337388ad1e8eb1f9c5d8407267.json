{"ast":null,"code":"import { createSelector } from 'reselect';\n/**\n * This selector always returns the data with the indexes set by a Brush.\n * Trouble is, that might or might not be what you want.\n *\n * In charts with Brush, you will sometimes want to select the full range of data, and sometimes the one decided by the Brush\n * - even if the Brush is active, the panorama inside the Brush should show the full range of data.\n *\n * So instead of this selector, consider using either selectChartDataAndAlwaysIgnoreIndexes or selectChartDataWithIndexesIfNotInPanorama\n *\n * @param state RechartsRootState\n * @returns data defined on the chart root element, such as BarChart or ScatterChart\n */\n\nexport var selectChartDataWithIndexes = state => state.chartData;\n/**\n * This selector will always return the full range of data, ignoring the indexes set by a Brush.\n * Useful for when you want to render the full range of data, even if a Brush is active.\n * For example: in the Brush panorama, in Legend, in Tooltip.\n */\n\nexport var selectChartDataAndAlwaysIgnoreIndexes = createSelector([selectChartDataWithIndexes], dataState => {\n  var dataEndIndex = dataState.chartData != null ? dataState.chartData.length - 1 : 0;\n  return {\n    chartData: dataState.chartData,\n    computedData: dataState.computedData,\n    dataEndIndex,\n    dataStartIndex: 0\n  };\n});\nexport var selectChartDataWithIndexesIfNotInPanorama = (state, _xAxisId, _yAxisId, isPanorama) => {\n  if (isPanorama) {\n    return selectChartDataAndAlwaysIgnoreIndexes(state);\n  }\n\n  return selectChartDataWithIndexes(state);\n};","map":{"version":3,"sources":["/Users/emiliamamedova/charts/flightStats/node_modules/recharts/es6/state/selectors/dataSelectors.js"],"names":["createSelector","selectChartDataWithIndexes","state","chartData","selectChartDataAndAlwaysIgnoreIndexes","dataState","dataEndIndex","length","computedData","dataStartIndex","selectChartDataWithIndexesIfNotInPanorama","_xAxisId","_yAxisId","isPanorama"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA;;;;;;;;;;;;;AAYA,OAAO,IAAIC,0BAA0B,GAAGC,KAAK,IAAIA,KAAK,CAACC,SAAhD;AAEP;;;;;;AAKA,OAAO,IAAIC,qCAAqC,GAAGJ,cAAc,CAAC,CAACC,0BAAD,CAAD,EAA+BI,SAAS,IAAI;AAC3G,MAAIC,YAAY,GAAGD,SAAS,CAACF,SAAV,IAAuB,IAAvB,GAA8BE,SAAS,CAACF,SAAV,CAAoBI,MAApB,GAA6B,CAA3D,GAA+D,CAAlF;AACA,SAAO;AACLJ,IAAAA,SAAS,EAAEE,SAAS,CAACF,SADhB;AAELK,IAAAA,YAAY,EAAEH,SAAS,CAACG,YAFnB;AAGLF,IAAAA,YAHK;AAILG,IAAAA,cAAc,EAAE;AAJX,GAAP;AAMD,CARgE,CAA1D;AASP,OAAO,IAAIC,yCAAyC,GAAG,CAACR,KAAD,EAAQS,QAAR,EAAkBC,QAAlB,EAA4BC,UAA5B,KAA2C;AAChG,MAAIA,UAAJ,EAAgB;AACd,WAAOT,qCAAqC,CAACF,KAAD,CAA5C;AACD;;AACD,SAAOD,0BAA0B,CAACC,KAAD,CAAjC;AACD,CALM","sourcesContent":["import { createSelector } from 'reselect';\n/**\n * This selector always returns the data with the indexes set by a Brush.\n * Trouble is, that might or might not be what you want.\n *\n * In charts with Brush, you will sometimes want to select the full range of data, and sometimes the one decided by the Brush\n * - even if the Brush is active, the panorama inside the Brush should show the full range of data.\n *\n * So instead of this selector, consider using either selectChartDataAndAlwaysIgnoreIndexes or selectChartDataWithIndexesIfNotInPanorama\n *\n * @param state RechartsRootState\n * @returns data defined on the chart root element, such as BarChart or ScatterChart\n */\nexport var selectChartDataWithIndexes = state => state.chartData;\n\n/**\n * This selector will always return the full range of data, ignoring the indexes set by a Brush.\n * Useful for when you want to render the full range of data, even if a Brush is active.\n * For example: in the Brush panorama, in Legend, in Tooltip.\n */\nexport var selectChartDataAndAlwaysIgnoreIndexes = createSelector([selectChartDataWithIndexes], dataState => {\n  var dataEndIndex = dataState.chartData != null ? dataState.chartData.length - 1 : 0;\n  return {\n    chartData: dataState.chartData,\n    computedData: dataState.computedData,\n    dataEndIndex,\n    dataStartIndex: 0\n  };\n});\nexport var selectChartDataWithIndexesIfNotInPanorama = (state, _xAxisId, _yAxisId, isPanorama) => {\n  if (isPanorama) {\n    return selectChartDataAndAlwaysIgnoreIndexes(state);\n  }\n  return selectChartDataWithIndexes(state);\n};"]},"metadata":{},"sourceType":"module"}