{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, Symbol.toStringTag, {\n  value: 'Module'\n});\n\nconst isPlainObject = require('./isPlainObject.js');\n\nconst getSymbols = require('../compat/_internal/getSymbols.js');\n\nconst getTag = require('../compat/_internal/getTag.js');\n\nconst tags = require('../compat/_internal/tags.js');\n\nconst eq = require('../compat/util/eq.js');\n\nfunction isEqualWith(a, b, areValuesEqual) {\n  return isEqualWithImpl(a, b, undefined, undefined, undefined, undefined, areValuesEqual);\n}\n\nfunction isEqualWithImpl(a, b, property, aParent, bParent, stack, areValuesEqual) {\n  const result = areValuesEqual(a, b, property, aParent, bParent, stack);\n\n  if (result !== undefined) {\n    return result;\n  }\n\n  if (typeof a === typeof b) {\n    switch (typeof a) {\n      case 'bigint':\n      case 'string':\n      case 'boolean':\n      case 'symbol':\n      case 'undefined':\n        {\n          return a === b;\n        }\n\n      case 'number':\n        {\n          return a === b || Object.is(a, b);\n        }\n\n      case 'function':\n        {\n          return a === b;\n        }\n\n      case 'object':\n        {\n          return areObjectsEqual(a, b, stack, areValuesEqual);\n        }\n    }\n  }\n\n  return areObjectsEqual(a, b, stack, areValuesEqual);\n}\n\nfunction areObjectsEqual(a, b, stack, areValuesEqual) {\n  var _stack;\n\n  if (Object.is(a, b)) {\n    return true;\n  }\n\n  let aTag = getTag.getTag(a);\n  let bTag = getTag.getTag(b);\n\n  if (aTag === tags.argumentsTag) {\n    aTag = tags.objectTag;\n  }\n\n  if (bTag === tags.argumentsTag) {\n    bTag = tags.objectTag;\n  }\n\n  if (aTag !== bTag) {\n    return false;\n  }\n\n  switch (aTag) {\n    case tags.stringTag:\n      return a.toString() === b.toString();\n\n    case tags.numberTag:\n      {\n        const x = a.valueOf();\n        const y = b.valueOf();\n        return eq.eq(x, y);\n      }\n\n    case tags.booleanTag:\n    case tags.dateTag:\n    case tags.symbolTag:\n      return Object.is(a.valueOf(), b.valueOf());\n\n    case tags.regexpTag:\n      {\n        return a.source === b.source && a.flags === b.flags;\n      }\n\n    case tags.functionTag:\n      {\n        return a === b;\n      }\n  }\n\n  stack = (_stack = stack) !== null && _stack !== void 0 ? _stack : new Map();\n  const aStack = stack.get(a);\n  const bStack = stack.get(b);\n\n  if (aStack != null && bStack != null) {\n    return aStack === b;\n  }\n\n  stack.set(a, b);\n  stack.set(b, a);\n\n  try {\n    switch (aTag) {\n      case tags.mapTag:\n        {\n          if (a.size !== b.size) {\n            return false;\n          }\n\n          for (const [key, value] of a.entries()) {\n            if (!b.has(key) || !isEqualWithImpl(value, b.get(key), key, a, b, stack, areValuesEqual)) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n      case tags.setTag:\n        {\n          if (a.size !== b.size) {\n            return false;\n          }\n\n          const aValues = Array.from(a.values());\n          const bValues = Array.from(b.values());\n\n          for (let i = 0; i < aValues.length; i++) {\n            const aValue = aValues[i];\n            const index = bValues.findIndex(bValue => {\n              return isEqualWithImpl(aValue, bValue, undefined, a, b, stack, areValuesEqual);\n            });\n\n            if (index === -1) {\n              return false;\n            }\n\n            bValues.splice(index, 1);\n          }\n\n          return true;\n        }\n\n      case tags.arrayTag:\n      case tags.uint8ArrayTag:\n      case tags.uint8ClampedArrayTag:\n      case tags.uint16ArrayTag:\n      case tags.uint32ArrayTag:\n      case tags.bigUint64ArrayTag:\n      case tags.int8ArrayTag:\n      case tags.int16ArrayTag:\n      case tags.int32ArrayTag:\n      case tags.bigInt64ArrayTag:\n      case tags.float32ArrayTag:\n      case tags.float64ArrayTag:\n        {\n          if (typeof Buffer !== 'undefined' && Buffer.isBuffer(a) !== Buffer.isBuffer(b)) {\n            return false;\n          }\n\n          if (a.length !== b.length) {\n            return false;\n          }\n\n          for (let i = 0; i < a.length; i++) {\n            if (!isEqualWithImpl(a[i], b[i], i, a, b, stack, areValuesEqual)) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n      case tags.arrayBufferTag:\n        {\n          if (a.byteLength !== b.byteLength) {\n            return false;\n          }\n\n          return areObjectsEqual(new Uint8Array(a), new Uint8Array(b), stack, areValuesEqual);\n        }\n\n      case tags.dataViewTag:\n        {\n          if (a.byteLength !== b.byteLength || a.byteOffset !== b.byteOffset) {\n            return false;\n          }\n\n          return areObjectsEqual(new Uint8Array(a), new Uint8Array(b), stack, areValuesEqual);\n        }\n\n      case tags.errorTag:\n        {\n          return a.name === b.name && a.message === b.message;\n        }\n\n      case tags.objectTag:\n        {\n          const areEqualInstances = areObjectsEqual(a.constructor, b.constructor, stack, areValuesEqual) || isPlainObject.isPlainObject(a) && isPlainObject.isPlainObject(b);\n\n          if (!areEqualInstances) {\n            return false;\n          }\n\n          const aKeys = [...Object.keys(a), ...getSymbols.getSymbols(a)];\n          const bKeys = [...Object.keys(b), ...getSymbols.getSymbols(b)];\n\n          if (aKeys.length !== bKeys.length) {\n            return false;\n          }\n\n          for (let i = 0; i < aKeys.length; i++) {\n            const propKey = aKeys[i];\n            const aProp = a[propKey];\n\n            if (!Object.hasOwn(b, propKey)) {\n              return false;\n            }\n\n            const bProp = b[propKey];\n\n            if (!isEqualWithImpl(aProp, bProp, propKey, a, b, stack, areValuesEqual)) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n  } finally {\n    stack.delete(a);\n    stack.delete(b);\n  }\n}\n\nexports.isEqualWith = isEqualWith;","map":{"version":3,"sources":["/Users/emiliamamedova/charts/project_corona_tracker/node_modules/es-toolkit/dist/predicate/isEqualWith.js"],"names":["Object","defineProperty","exports","Symbol","toStringTag","value","isPlainObject","require","getSymbols","getTag","tags","eq","isEqualWith","a","b","areValuesEqual","isEqualWithImpl","undefined","property","aParent","bParent","stack","result","is","areObjectsEqual","aTag","bTag","argumentsTag","objectTag","stringTag","toString","numberTag","x","valueOf","y","booleanTag","dateTag","symbolTag","regexpTag","source","flags","functionTag","Map","aStack","get","bStack","set","mapTag","size","key","entries","has","setTag","aValues","Array","from","values","bValues","i","length","aValue","index","findIndex","bValue","splice","arrayTag","uint8ArrayTag","uint8ClampedArrayTag","uint16ArrayTag","uint32ArrayTag","bigUint64ArrayTag","int8ArrayTag","int16ArrayTag","int32ArrayTag","bigInt64ArrayTag","float32ArrayTag","float64ArrayTag","Buffer","isBuffer","arrayBufferTag","byteLength","Uint8Array","dataViewTag","byteOffset","errorTag","name","message","areEqualInstances","constructor","aKeys","keys","bKeys","propKey","aProp","hasOwn","bProp","delete"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isPlainObject = require('./isPlainObject.js');\nconst getSymbols = require('../compat/_internal/getSymbols.js');\nconst getTag = require('../compat/_internal/getTag.js');\nconst tags = require('../compat/_internal/tags.js');\nconst eq = require('../compat/util/eq.js');\n\nfunction isEqualWith(a, b, areValuesEqual) {\n    return isEqualWithImpl(a, b, undefined, undefined, undefined, undefined, areValuesEqual);\n}\nfunction isEqualWithImpl(a, b, property, aParent, bParent, stack, areValuesEqual) {\n    const result = areValuesEqual(a, b, property, aParent, bParent, stack);\n    if (result !== undefined) {\n        return result;\n    }\n    if (typeof a === typeof b) {\n        switch (typeof a) {\n            case 'bigint':\n            case 'string':\n            case 'boolean':\n            case 'symbol':\n            case 'undefined': {\n                return a === b;\n            }\n            case 'number': {\n                return a === b || Object.is(a, b);\n            }\n            case 'function': {\n                return a === b;\n            }\n            case 'object': {\n                return areObjectsEqual(a, b, stack, areValuesEqual);\n            }\n        }\n    }\n    return areObjectsEqual(a, b, stack, areValuesEqual);\n}\nfunction areObjectsEqual(a, b, stack, areValuesEqual) {\n    if (Object.is(a, b)) {\n        return true;\n    }\n    let aTag = getTag.getTag(a);\n    let bTag = getTag.getTag(b);\n    if (aTag === tags.argumentsTag) {\n        aTag = tags.objectTag;\n    }\n    if (bTag === tags.argumentsTag) {\n        bTag = tags.objectTag;\n    }\n    if (aTag !== bTag) {\n        return false;\n    }\n    switch (aTag) {\n        case tags.stringTag:\n            return a.toString() === b.toString();\n        case tags.numberTag: {\n            const x = a.valueOf();\n            const y = b.valueOf();\n            return eq.eq(x, y);\n        }\n        case tags.booleanTag:\n        case tags.dateTag:\n        case tags.symbolTag:\n            return Object.is(a.valueOf(), b.valueOf());\n        case tags.regexpTag: {\n            return a.source === b.source && a.flags === b.flags;\n        }\n        case tags.functionTag: {\n            return a === b;\n        }\n    }\n    stack = stack ?? new Map();\n    const aStack = stack.get(a);\n    const bStack = stack.get(b);\n    if (aStack != null && bStack != null) {\n        return aStack === b;\n    }\n    stack.set(a, b);\n    stack.set(b, a);\n    try {\n        switch (aTag) {\n            case tags.mapTag: {\n                if (a.size !== b.size) {\n                    return false;\n                }\n                for (const [key, value] of a.entries()) {\n                    if (!b.has(key) || !isEqualWithImpl(value, b.get(key), key, a, b, stack, areValuesEqual)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            case tags.setTag: {\n                if (a.size !== b.size) {\n                    return false;\n                }\n                const aValues = Array.from(a.values());\n                const bValues = Array.from(b.values());\n                for (let i = 0; i < aValues.length; i++) {\n                    const aValue = aValues[i];\n                    const index = bValues.findIndex(bValue => {\n                        return isEqualWithImpl(aValue, bValue, undefined, a, b, stack, areValuesEqual);\n                    });\n                    if (index === -1) {\n                        return false;\n                    }\n                    bValues.splice(index, 1);\n                }\n                return true;\n            }\n            case tags.arrayTag:\n            case tags.uint8ArrayTag:\n            case tags.uint8ClampedArrayTag:\n            case tags.uint16ArrayTag:\n            case tags.uint32ArrayTag:\n            case tags.bigUint64ArrayTag:\n            case tags.int8ArrayTag:\n            case tags.int16ArrayTag:\n            case tags.int32ArrayTag:\n            case tags.bigInt64ArrayTag:\n            case tags.float32ArrayTag:\n            case tags.float64ArrayTag: {\n                if (typeof Buffer !== 'undefined' && Buffer.isBuffer(a) !== Buffer.isBuffer(b)) {\n                    return false;\n                }\n                if (a.length !== b.length) {\n                    return false;\n                }\n                for (let i = 0; i < a.length; i++) {\n                    if (!isEqualWithImpl(a[i], b[i], i, a, b, stack, areValuesEqual)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            case tags.arrayBufferTag: {\n                if (a.byteLength !== b.byteLength) {\n                    return false;\n                }\n                return areObjectsEqual(new Uint8Array(a), new Uint8Array(b), stack, areValuesEqual);\n            }\n            case tags.dataViewTag: {\n                if (a.byteLength !== b.byteLength || a.byteOffset !== b.byteOffset) {\n                    return false;\n                }\n                return areObjectsEqual(new Uint8Array(a), new Uint8Array(b), stack, areValuesEqual);\n            }\n            case tags.errorTag: {\n                return a.name === b.name && a.message === b.message;\n            }\n            case tags.objectTag: {\n                const areEqualInstances = areObjectsEqual(a.constructor, b.constructor, stack, areValuesEqual) ||\n                    (isPlainObject.isPlainObject(a) && isPlainObject.isPlainObject(b));\n                if (!areEqualInstances) {\n                    return false;\n                }\n                const aKeys = [...Object.keys(a), ...getSymbols.getSymbols(a)];\n                const bKeys = [...Object.keys(b), ...getSymbols.getSymbols(b)];\n                if (aKeys.length !== bKeys.length) {\n                    return false;\n                }\n                for (let i = 0; i < aKeys.length; i++) {\n                    const propKey = aKeys[i];\n                    const aProp = a[propKey];\n                    if (!Object.hasOwn(b, propKey)) {\n                        return false;\n                    }\n                    const bProp = b[propKey];\n                    if (!isEqualWithImpl(aProp, bProp, propKey, a, b, stack, areValuesEqual)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n    finally {\n        stack.delete(a);\n        stack.delete(b);\n    }\n}\n\nexports.isEqualWith = isEqualWith;\n"]},"metadata":{},"sourceType":"script"}