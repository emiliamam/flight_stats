{"ast":null,"code":"import { isNan } from './DataUtils';\nvar MULTIPLY_OR_DIVIDE_REGEX = /(-?\\d+(?:\\.\\d+)?[a-zA-Z%]*)([*/])(-?\\d+(?:\\.\\d+)?[a-zA-Z%]*)/;\nvar ADD_OR_SUBTRACT_REGEX = /(-?\\d+(?:\\.\\d+)?[a-zA-Z%]*)([+-])(-?\\d+(?:\\.\\d+)?[a-zA-Z%]*)/;\nvar CSS_LENGTH_UNIT_REGEX = /^px|cm|vh|vw|em|rem|%|mm|in|pt|pc|ex|ch|vmin|vmax|Q$/;\nvar NUM_SPLIT_REGEX = /(-?\\d+(?:\\.\\d+)?)([a-zA-Z%]+)?/;\nvar CONVERSION_RATES = {\n  cm: 96 / 2.54,\n  mm: 96 / 25.4,\n  pt: 96 / 72,\n  pc: 96 / 6,\n  in: 96,\n  Q: 96 / (2.54 * 40),\n  px: 1\n};\nvar FIXED_CSS_LENGTH_UNITS = Object.keys(CONVERSION_RATES);\nvar STR_NAN = 'NaN';\n\nfunction convertToPx(value, unit) {\n  return value * CONVERSION_RATES[unit];\n}\n\nclass DecimalCSS {\n  static parse(str) {\n    var _NUM_SPLIT_REGEX$exec;\n\n    var [, numStr, unit] = (_NUM_SPLIT_REGEX$exec = NUM_SPLIT_REGEX.exec(str)) !== null && _NUM_SPLIT_REGEX$exec !== void 0 ? _NUM_SPLIT_REGEX$exec : [];\n    return new DecimalCSS(parseFloat(numStr), unit !== null && unit !== void 0 ? unit : '');\n  }\n\n  constructor(num, unit) {\n    this.num = num;\n    this.unit = unit;\n    this.num = num;\n    this.unit = unit;\n\n    if (isNan(num)) {\n      this.unit = '';\n    }\n\n    if (unit !== '' && !CSS_LENGTH_UNIT_REGEX.test(unit)) {\n      this.num = NaN;\n      this.unit = '';\n    }\n\n    if (FIXED_CSS_LENGTH_UNITS.includes(unit)) {\n      this.num = convertToPx(num, unit);\n      this.unit = 'px';\n    }\n  }\n\n  add(other) {\n    if (this.unit !== other.unit) {\n      return new DecimalCSS(NaN, '');\n    }\n\n    return new DecimalCSS(this.num + other.num, this.unit);\n  }\n\n  subtract(other) {\n    if (this.unit !== other.unit) {\n      return new DecimalCSS(NaN, '');\n    }\n\n    return new DecimalCSS(this.num - other.num, this.unit);\n  }\n\n  multiply(other) {\n    if (this.unit !== '' && other.unit !== '' && this.unit !== other.unit) {\n      return new DecimalCSS(NaN, '');\n    }\n\n    return new DecimalCSS(this.num * other.num, this.unit || other.unit);\n  }\n\n  divide(other) {\n    if (this.unit !== '' && other.unit !== '' && this.unit !== other.unit) {\n      return new DecimalCSS(NaN, '');\n    }\n\n    return new DecimalCSS(this.num / other.num, this.unit || other.unit);\n  }\n\n  toString() {\n    return \"\".concat(this.num).concat(this.unit);\n  }\n\n  isNaN() {\n    return isNan(this.num);\n  }\n\n}\n\nfunction calculateArithmetic(expr) {\n  if (expr.includes(STR_NAN)) {\n    return STR_NAN;\n  }\n\n  var newExpr = expr;\n\n  while (newExpr.includes('*') || newExpr.includes('/')) {\n    var _MULTIPLY_OR_DIVIDE_R;\n\n    var [, leftOperand, operator, rightOperand] = (_MULTIPLY_OR_DIVIDE_R = MULTIPLY_OR_DIVIDE_REGEX.exec(newExpr)) !== null && _MULTIPLY_OR_DIVIDE_R !== void 0 ? _MULTIPLY_OR_DIVIDE_R : [];\n    var lTs = DecimalCSS.parse(leftOperand !== null && leftOperand !== void 0 ? leftOperand : '');\n    var rTs = DecimalCSS.parse(rightOperand !== null && rightOperand !== void 0 ? rightOperand : '');\n    var result = operator === '*' ? lTs.multiply(rTs) : lTs.divide(rTs);\n\n    if (result.isNaN()) {\n      return STR_NAN;\n    }\n\n    newExpr = newExpr.replace(MULTIPLY_OR_DIVIDE_REGEX, result.toString());\n  }\n\n  while (newExpr.includes('+') || /.-\\d+(?:\\.\\d+)?/.test(newExpr)) {\n    var _ADD_OR_SUBTRACT_REGE;\n\n    var [, _leftOperand, _operator, _rightOperand] = (_ADD_OR_SUBTRACT_REGE = ADD_OR_SUBTRACT_REGEX.exec(newExpr)) !== null && _ADD_OR_SUBTRACT_REGE !== void 0 ? _ADD_OR_SUBTRACT_REGE : [];\n\n    var _lTs = DecimalCSS.parse(_leftOperand !== null && _leftOperand !== void 0 ? _leftOperand : '');\n\n    var _rTs = DecimalCSS.parse(_rightOperand !== null && _rightOperand !== void 0 ? _rightOperand : '');\n\n    var _result = _operator === '+' ? _lTs.add(_rTs) : _lTs.subtract(_rTs);\n\n    if (_result.isNaN()) {\n      return STR_NAN;\n    }\n\n    newExpr = newExpr.replace(ADD_OR_SUBTRACT_REGEX, _result.toString());\n  }\n\n  return newExpr;\n}\n\nvar PARENTHESES_REGEX = /\\(([^()]*)\\)/;\n\nfunction calculateParentheses(expr) {\n  var newExpr = expr;\n  var match; // eslint-disable-next-line no-cond-assign\n\n  while ((match = PARENTHESES_REGEX.exec(newExpr)) != null) {\n    var [, parentheticalExpression] = match;\n    newExpr = newExpr.replace(PARENTHESES_REGEX, calculateArithmetic(parentheticalExpression));\n  }\n\n  return newExpr;\n}\n\nfunction evaluateExpression(expression) {\n  var newExpr = expression.replace(/\\s+/g, '');\n  newExpr = calculateParentheses(newExpr);\n  newExpr = calculateArithmetic(newExpr);\n  return newExpr;\n}\n\nexport function safeEvaluateExpression(expression) {\n  try {\n    return evaluateExpression(expression);\n  } catch (_unused) {\n    return STR_NAN;\n  }\n}\nexport function reduceCSSCalc(expression) {\n  var result = safeEvaluateExpression(expression.slice(5, -1));\n\n  if (result === STR_NAN) {\n    return '';\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/emiliamamedova/charts/flightStats/node_modules/recharts/es6/util/ReduceCSSCalc.js"],"names":["isNan","MULTIPLY_OR_DIVIDE_REGEX","ADD_OR_SUBTRACT_REGEX","CSS_LENGTH_UNIT_REGEX","NUM_SPLIT_REGEX","CONVERSION_RATES","cm","mm","pt","pc","in","Q","px","FIXED_CSS_LENGTH_UNITS","Object","keys","STR_NAN","convertToPx","value","unit","DecimalCSS","parse","str","_NUM_SPLIT_REGEX$exec","numStr","exec","parseFloat","constructor","num","test","NaN","includes","add","other","subtract","multiply","divide","toString","concat","isNaN","calculateArithmetic","expr","newExpr","_MULTIPLY_OR_DIVIDE_R","leftOperand","operator","rightOperand","lTs","rTs","result","replace","_ADD_OR_SUBTRACT_REGE","_leftOperand","_operator","_rightOperand","_lTs","_rTs","_result","PARENTHESES_REGEX","calculateParentheses","match","parentheticalExpression","evaluateExpression","expression","safeEvaluateExpression","_unused","reduceCSSCalc","slice"],"mappings":"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","sourcesContent":["import { isNan } from './DataUtils';\nvar MULTIPLY_OR_DIVIDE_REGEX = /(-?\\d+(?:\\.\\d+)?[a-zA-Z%]*)([*/])(-?\\d+(?:\\.\\d+)?[a-zA-Z%]*)/;\nvar ADD_OR_SUBTRACT_REGEX = /(-?\\d+(?:\\.\\d+)?[a-zA-Z%]*)([+-])(-?\\d+(?:\\.\\d+)?[a-zA-Z%]*)/;\nvar CSS_LENGTH_UNIT_REGEX = /^px|cm|vh|vw|em|rem|%|mm|in|pt|pc|ex|ch|vmin|vmax|Q$/;\nvar NUM_SPLIT_REGEX = /(-?\\d+(?:\\.\\d+)?)([a-zA-Z%]+)?/;\nvar CONVERSION_RATES = {\n  cm: 96 / 2.54,\n  mm: 96 / 25.4,\n  pt: 96 / 72,\n  pc: 96 / 6,\n  in: 96,\n  Q: 96 / (2.54 * 40),\n  px: 1\n};\nvar FIXED_CSS_LENGTH_UNITS = Object.keys(CONVERSION_RATES);\nvar STR_NAN = 'NaN';\nfunction convertToPx(value, unit) {\n  return value * CONVERSION_RATES[unit];\n}\nclass DecimalCSS {\n  static parse(str) {\n    var _NUM_SPLIT_REGEX$exec;\n    var [, numStr, unit] = (_NUM_SPLIT_REGEX$exec = NUM_SPLIT_REGEX.exec(str)) !== null && _NUM_SPLIT_REGEX$exec !== void 0 ? _NUM_SPLIT_REGEX$exec : [];\n    return new DecimalCSS(parseFloat(numStr), unit !== null && unit !== void 0 ? unit : '');\n  }\n  constructor(num, unit) {\n    this.num = num;\n    this.unit = unit;\n    this.num = num;\n    this.unit = unit;\n    if (isNan(num)) {\n      this.unit = '';\n    }\n    if (unit !== '' && !CSS_LENGTH_UNIT_REGEX.test(unit)) {\n      this.num = NaN;\n      this.unit = '';\n    }\n    if (FIXED_CSS_LENGTH_UNITS.includes(unit)) {\n      this.num = convertToPx(num, unit);\n      this.unit = 'px';\n    }\n  }\n  add(other) {\n    if (this.unit !== other.unit) {\n      return new DecimalCSS(NaN, '');\n    }\n    return new DecimalCSS(this.num + other.num, this.unit);\n  }\n  subtract(other) {\n    if (this.unit !== other.unit) {\n      return new DecimalCSS(NaN, '');\n    }\n    return new DecimalCSS(this.num - other.num, this.unit);\n  }\n  multiply(other) {\n    if (this.unit !== '' && other.unit !== '' && this.unit !== other.unit) {\n      return new DecimalCSS(NaN, '');\n    }\n    return new DecimalCSS(this.num * other.num, this.unit || other.unit);\n  }\n  divide(other) {\n    if (this.unit !== '' && other.unit !== '' && this.unit !== other.unit) {\n      return new DecimalCSS(NaN, '');\n    }\n    return new DecimalCSS(this.num / other.num, this.unit || other.unit);\n  }\n  toString() {\n    return \"\".concat(this.num).concat(this.unit);\n  }\n  isNaN() {\n    return isNan(this.num);\n  }\n}\nfunction calculateArithmetic(expr) {\n  if (expr.includes(STR_NAN)) {\n    return STR_NAN;\n  }\n  var newExpr = expr;\n  while (newExpr.includes('*') || newExpr.includes('/')) {\n    var _MULTIPLY_OR_DIVIDE_R;\n    var [, leftOperand, operator, rightOperand] = (_MULTIPLY_OR_DIVIDE_R = MULTIPLY_OR_DIVIDE_REGEX.exec(newExpr)) !== null && _MULTIPLY_OR_DIVIDE_R !== void 0 ? _MULTIPLY_OR_DIVIDE_R : [];\n    var lTs = DecimalCSS.parse(leftOperand !== null && leftOperand !== void 0 ? leftOperand : '');\n    var rTs = DecimalCSS.parse(rightOperand !== null && rightOperand !== void 0 ? rightOperand : '');\n    var result = operator === '*' ? lTs.multiply(rTs) : lTs.divide(rTs);\n    if (result.isNaN()) {\n      return STR_NAN;\n    }\n    newExpr = newExpr.replace(MULTIPLY_OR_DIVIDE_REGEX, result.toString());\n  }\n  while (newExpr.includes('+') || /.-\\d+(?:\\.\\d+)?/.test(newExpr)) {\n    var _ADD_OR_SUBTRACT_REGE;\n    var [, _leftOperand, _operator, _rightOperand] = (_ADD_OR_SUBTRACT_REGE = ADD_OR_SUBTRACT_REGEX.exec(newExpr)) !== null && _ADD_OR_SUBTRACT_REGE !== void 0 ? _ADD_OR_SUBTRACT_REGE : [];\n    var _lTs = DecimalCSS.parse(_leftOperand !== null && _leftOperand !== void 0 ? _leftOperand : '');\n    var _rTs = DecimalCSS.parse(_rightOperand !== null && _rightOperand !== void 0 ? _rightOperand : '');\n    var _result = _operator === '+' ? _lTs.add(_rTs) : _lTs.subtract(_rTs);\n    if (_result.isNaN()) {\n      return STR_NAN;\n    }\n    newExpr = newExpr.replace(ADD_OR_SUBTRACT_REGEX, _result.toString());\n  }\n  return newExpr;\n}\nvar PARENTHESES_REGEX = /\\(([^()]*)\\)/;\nfunction calculateParentheses(expr) {\n  var newExpr = expr;\n  var match;\n  // eslint-disable-next-line no-cond-assign\n  while ((match = PARENTHESES_REGEX.exec(newExpr)) != null) {\n    var [, parentheticalExpression] = match;\n    newExpr = newExpr.replace(PARENTHESES_REGEX, calculateArithmetic(parentheticalExpression));\n  }\n  return newExpr;\n}\nfunction evaluateExpression(expression) {\n  var newExpr = expression.replace(/\\s+/g, '');\n  newExpr = calculateParentheses(newExpr);\n  newExpr = calculateArithmetic(newExpr);\n  return newExpr;\n}\nexport function safeEvaluateExpression(expression) {\n  try {\n    return evaluateExpression(expression);\n  } catch (_unused) {\n    return STR_NAN;\n  }\n}\nexport function reduceCSSCalc(expression) {\n  var result = safeEvaluateExpression(expression.slice(5, -1));\n  if (result === STR_NAN) {\n    return '';\n  }\n  return result;\n}"]},"metadata":{},"sourceType":"module"}