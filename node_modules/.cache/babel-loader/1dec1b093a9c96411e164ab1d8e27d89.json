{"ast":null,"code":"var _jsxFileName = \"/Users/emiliamamedova/charts/project_corona_tracker/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { fetchDailyData } from '../../api';\nimport styles from './Chart.module.css';\nconst sampleFlights = [{\n  flightNumber: \"SU123\",\n  airportIATA: \"YKS\",\n  scheduledArrival: \"2025-07-17T10:00:00Z\",\n  actualArrival: \"2025-07-17T10:10:00Z\"\n}, {\n  flightNumber: \"SU124\",\n  airportIATA: \"YKS\",\n  scheduledArrival: \"2025-07-17T11:00:00Z\",\n  actualArrival: \"2025-07-17T11:30:00Z\"\n}, {\n  flightNumber: \"SU125\",\n  airportIATA: \"MJZ\",\n  scheduledArrival: \"2025-07-17T12:00:00Z\",\n  actualArrival: \"2025-07-17T12:05:00Z\"\n}, {\n  flightNumber: \"SU126\",\n  airportIATA: \"KHV\",\n  scheduledArrival: \"2025-07-17T13:00:00Z\",\n  actualArrival: \"2025-07-17T13:25:00Z\"\n}, {\n  flightNumber: \"SU127\",\n  airportIATA: \"KHV\",\n  scheduledArrival: \"2025-07-17T14:00:00Z\",\n  actualArrival: \"2025-07-17T14:00:00Z\"\n}];\n\nconst Chart = ({\n  data: {\n    confirmed,\n    recovered,\n    deaths\n  },\n  country\n}) => {\n  const [dailyData, setDailyData] = useState({});\n  const [airports, setAirports] = useState([]);\n  const [punctualityData, setPunctualityData] = useState(null);\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      const response = await fetch('/airports.json');\n      const data = await response.json();\n      setAirports(data);\n    };\n\n    fetchMyAPI();\n  }, []); // Подсчёт количества аэропортов по часовым поясам\n\n  const timezoneCounts = airports.reduce((acc, airport) => {\n    acc[airport.Timezone] = (acc[airport.Timezone] || 0) + 1;\n    return acc;\n  }, {});\n  const labels = Object.keys(timezoneCounts);\n  const counts = Object.values(timezoneCounts);\n  const data = {\n    labels,\n    datasets: [{\n      label: 'Количество аэропортов',\n      backgroundColor: 'rgba(54, 162, 235, 0.6)',\n      data: counts\n    }]\n  };\n  const options = {\n    plugins: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: 'Количество аэропортов по часовым поясам',\n        font: {\n          size: 18\n        }\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        ticks: {\n          stepSize: 1\n        },\n        title: {\n          display: true,\n          text: 'Количество'\n        }\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Часовой пояс'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      margin: '20px auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    data: data,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Chart;","map":{"version":3,"sources":["/Users/emiliamamedova/charts/project_corona_tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","Line","Bar","fetchDailyData","styles","sampleFlights","flightNumber","airportIATA","scheduledArrival","actualArrival","Chart","data","confirmed","recovered","deaths","country","dailyData","setDailyData","airports","setAirports","punctualityData","setPunctualityData","fetchMyAPI","response","fetch","json","timezoneCounts","reduce","acc","airport","Timezone","labels","Object","keys","counts","values","datasets","label","backgroundColor","options","plugins","legend","display","title","text","font","size","scales","y","beginAtZero","ticks","stepSize","x","width","margin"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport { fetchDailyData } from '../../api';\n\nimport styles from './Chart.module.css';\n\nconst sampleFlights = [\n  { flightNumber: \"SU123\", airportIATA: \"YKS\", scheduledArrival: \"2025-07-17T10:00:00Z\", actualArrival: \"2025-07-17T10:10:00Z\" },\n  { flightNumber: \"SU124\", airportIATA: \"YKS\", scheduledArrival: \"2025-07-17T11:00:00Z\", actualArrival: \"2025-07-17T11:30:00Z\" },\n  { flightNumber: \"SU125\", airportIATA: \"MJZ\", scheduledArrival: \"2025-07-17T12:00:00Z\", actualArrival: \"2025-07-17T12:05:00Z\" },\n  { flightNumber: \"SU126\", airportIATA: \"KHV\", scheduledArrival: \"2025-07-17T13:00:00Z\", actualArrival: \"2025-07-17T13:25:00Z\" },\n  { flightNumber: \"SU127\", airportIATA: \"KHV\", scheduledArrival: \"2025-07-17T14:00:00Z\", actualArrival: \"2025-07-17T14:00:00Z\" },\n];\n\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState({});\n  const [airports, setAirports] = useState([]);\n  const [punctualityData, setPunctualityData] = useState(null);\n\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      const response = await fetch('/airports.json');\n      const data = await response.json();\n      setAirports(data);\n    };\n\n    fetchMyAPI();\n  }, []);\n\n  // Подсчёт количества аэропортов по часовым поясам\n  const timezoneCounts = airports.reduce((acc, airport) => {\n    acc[airport.Timezone] = (acc[airport.Timezone] || 0) + 1;\n    return acc;\n  }, {});\n\n  const labels = Object.keys(timezoneCounts);\n  const counts = Object.values(timezoneCounts);\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        label: 'Количество аэропортов',\n        backgroundColor: 'rgba(54, 162, 235, 0.6)',\n        data: counts,\n      },\n    ],\n  };\n\n  const options = {\n    plugins: {\n      legend: { display: false },\n      title: {\n        display: true,\n        text: 'Количество аэропортов по часовым поясам',\n        font: { size: 18 },\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        ticks: { stepSize: 1 },\n        title: { display: true, text: 'Количество' },\n      },\n      x: {\n        title: { display: true, text: 'Часовой пояс' },\n      },\n    },\n  };\n\n  return (\n    <div style={{ width: '100%', margin: '20px auto' }}>\n      <Bar data={data} options={options} />\n    </div>\n  );\n};\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}