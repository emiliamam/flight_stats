{"ast":null,"code":"var _jsxFileName = \"/Users/emiliamamedova/charts/flightStats/src/components/Cards/PunctualityDashboard.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer, CartesianGrid } from \"recharts\";\n\nconst getColor = key => {\n  switch (key) {\n    case \"green\":\n      return \"#34c38f\";\n\n    case \"yellow\":\n      return \"#f1b44c\";\n\n    case \"red\":\n      return \"#f46a6a\";\n\n    case \"blue\":\n      return \"#556ee6\";\n\n    default:\n      return \"#ccc\";\n  }\n};\n\nconst PunctualityDashboard = ({\n  airportCode = \"SVO\"\n}) => {\n  const [summaryData, setSummaryData] = useState([{\n    label: \"Вылетели вовремя\",\n    value: 0,\n    color: \"green\"\n  }, {\n    label: \"С задержкой > 15 м\",\n    value: 0,\n    color: \"yellow\"\n  }, {\n    label: \"Отменены\",\n    value: 0,\n    color: \"red\"\n  }, {\n    label: \"Рейсов в воздухе сейчас\",\n    value: 0,\n    color: \"blue\"\n  }]);\n  const [delayStats, setDelayStats] = useState([]); // для графика\n\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchDashboardData = async () => {\n      setLoading(true);\n\n      try {\n        // 1. Получаем статистику аэропорта\n        const {\n          data: airportStats\n        } = await axios.get(`/airports/${airportCode}/stats`); // 2. Получаем рейсы сегодня (для расчёта \"вылетели вовремя\", \"с задержкой\", \"отменены\", \"в воздухе\")\n\n        const today = new Date().toISOString().slice(0, 10);\n        const {\n          data: flights\n        } = await axios.get(\"/flights\", {\n          params: {\n            departure_airport: airportCode,\n            date_from: today,\n            date_to: today,\n            limit: 200\n          }\n        }); // Вычисляем summaryData на основе рейсов:\n\n        let onTimeCount = 0,\n            delayedCount = 0,\n            canceledCount = 0,\n            inAirCount = 0;\n        flights.forEach(f => {\n          if (f.delay_category === \"on-time\") onTimeCount++;else if (f.delay_category === \"minor-delay\" || f.delay_category === \"major-delay\") delayedCount++;else if (f.delay_category === \"canceled\") canceledCount++; // Рейс \"в воздухе\" — факт вылета есть, факт прилёта нет\n\n          if (f.fact_departure && !f.fact_arrival) inAirCount++;\n        });\n        setSummaryData([{\n          label: \"Вылетели вовремя\",\n          value: onTimeCount,\n          color: \"green\"\n        }, {\n          label: \"С задержкой > 15 м\",\n          value: delayedCount,\n          color: \"yellow\"\n        }, {\n          label: \"Отменены\",\n          value: canceledCount,\n          color: \"red\"\n        }, {\n          label: \"Рейсов в воздухе сейчас\",\n          value: inAirCount,\n          color: \"blue\"\n        }]); // 3. Для графика динамики задержек возьмём группировку по времени (например, по часам)\n        // Здесь эмуляция, но можно заменить запросом, если есть\n\n        const delayTimeline = Array.from({\n          length: 24\n        }).map((_, i) => {\n          const hour = `${i.toString().padStart(2, \"0\")}:00`; // считаем в рейсах с нужным часом (plan_departure) сколько on-time, delayed, canceled\n\n          const onTime = flights.filter(f => f.plan_departure && new Date(f.plan_departure).getHours() === i && f.delay_category === \"on-time\").length;\n          const delayed = flights.filter(f => f.plan_departure && new Date(f.plan_departure).getHours() === i && (f.delay_category === \"minor-delay\" || f.delay_category === \"major-delay\")).length;\n          const canceled = flights.filter(f => f.plan_departure && new Date(f.plan_departure).getHours() === i && f.delay_category === \"canceled\").length;\n          return {\n            time: hour,\n            onTime,\n            delayed,\n            canceled\n          };\n        });\n        setDelayStats(delayTimeline);\n      } catch (error) {\n        console.error(\"Ошибка загрузки данных:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchDashboardData();\n  }, [airportCode]);\n  if (loading) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 23\n    }\n  }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445...\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      maxWidth: 1000,\n      margin: \"20px auto\",\n      fontFamily: \"Arial, sans-serif\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, \"\\u0421\\u0438\\u0442\\u0443\\u0430\\u0446\\u0438\\u043E\\u043D\\u043D\\u044B\\u0439 \\u0446\\u0435\\u043D\\u0442\\u0440 \\u043F\\u0443\\u043D\\u043A\\u0442\\u0443\\u0430\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u0438 \\u2014 \\u0430\\u044D\\u0440\\u043E\\u043F\\u043E\\u0440\\u0442 \", airportCode), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      gap: 20,\n      marginBottom: 30,\n      flexWrap: \"wrap\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, summaryData.map(({\n    label,\n    value,\n    color\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    key: label,\n    style: {\n      flex: \"1 1 200px\",\n      backgroundColor: getColor(color),\n      color: \"white\",\n      padding: \"15px 20px\",\n      borderRadius: 12,\n      boxShadow: \"0 2px 6px rgba(0,0,0,0.1)\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: 18,\n      marginBottom: 6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, label), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: 24,\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, value, \" \\u0440\\u0435\\u0439\\u0441\\u043E\\u0432\")))), /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      marginTop: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, \"\\u0414\\u0438\\u043D\\u0430\\u043C\\u0438\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0435\\u0440\\u0436\\u0435\\u043A \\u0437\\u0430 \\u0434\\u0435\\u043D\\u044C\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\",\n      height: 300\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: delayStats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    allowDecimals: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"onTime\",\n    stroke: getColor(\"green\"),\n    name: \"\\u0412\\u043E\\u0432\\u0440\\u0435\\u043C\\u044F\",\n    strokeWidth: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"delayed\",\n    stroke: getColor(\"yellow\"),\n    name: \"\\u0421 \\u0437\\u0430\\u0434\\u0435\\u0440\\u0436\\u043A\\u043E\\u0439\",\n    strokeWidth: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"canceled\",\n    stroke: getColor(\"red\"),\n    name: \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0435\\u043D\\u044B\",\n    strokeWidth: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default PunctualityDashboard;","map":{"version":3,"sources":["/Users/emiliamamedova/charts/flightStats/src/components/Cards/PunctualityDashboard.jsx"],"names":["React","useState","useEffect","axios","LineChart","Line","XAxis","YAxis","Tooltip","Legend","ResponsiveContainer","CartesianGrid","getColor","key","PunctualityDashboard","airportCode","summaryData","setSummaryData","label","value","color","delayStats","setDelayStats","loading","setLoading","fetchDashboardData","data","airportStats","get","today","Date","toISOString","slice","flights","params","departure_airport","date_from","date_to","limit","onTimeCount","delayedCount","canceledCount","inAirCount","forEach","f","delay_category","fact_departure","fact_arrival","delayTimeline","Array","from","length","map","_","i","hour","toString","padStart","onTime","filter","plan_departure","getHours","delayed","canceled","time","error","console","maxWidth","margin","fontFamily","display","gap","marginBottom","flexWrap","flex","backgroundColor","padding","borderRadius","boxShadow","flexDirection","alignItems","fontSize","fontWeight","marginTop","width","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  CartesianGrid,\n} from \"recharts\";\n\nconst getColor = (key) => {\n  switch (key) {\n    case \"green\":\n      return \"#34c38f\";\n    case \"yellow\":\n      return \"#f1b44c\";\n    case \"red\":\n      return \"#f46a6a\";\n    case \"blue\":\n      return \"#556ee6\";\n    default:\n      return \"#ccc\";\n  }\n};\n\nconst PunctualityDashboard = ({ airportCode = \"SVO\" }) => {\n  const [summaryData, setSummaryData] = useState([\n    { label: \"Вылетели вовремя\", value: 0, color: \"green\" },\n    { label: \"С задержкой > 15 м\", value: 0, color: \"yellow\" },\n    { label: \"Отменены\", value: 0, color: \"red\" },\n    { label: \"Рейсов в воздухе сейчас\", value: 0, color: \"blue\" },\n  ]);\n  const [delayStats, setDelayStats] = useState([]); // для графика\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchDashboardData = async () => {\n      setLoading(true);\n      try {\n        // 1. Получаем статистику аэропорта\n        const { data: airportStats } = await axios.get(`/airports/${airportCode}/stats`);\n\n        // 2. Получаем рейсы сегодня (для расчёта \"вылетели вовремя\", \"с задержкой\", \"отменены\", \"в воздухе\")\n        const today = new Date().toISOString().slice(0, 10);\n        const { data: flights } = await axios.get(\"/flights\", {\n          params: {\n            departure_airport: airportCode,\n            date_from: today,\n            date_to: today,\n            limit: 200,\n          },\n        });\n\n        // Вычисляем summaryData на основе рейсов:\n        let onTimeCount = 0,\n          delayedCount = 0,\n          canceledCount = 0,\n          inAirCount = 0;\n\n        flights.forEach((f) => {\n          if (f.delay_category === \"on-time\") onTimeCount++;\n          else if (f.delay_category === \"minor-delay\" || f.delay_category === \"major-delay\") delayedCount++;\n          else if (f.delay_category === \"canceled\") canceledCount++;\n\n          // Рейс \"в воздухе\" — факт вылета есть, факт прилёта нет\n          if (f.fact_departure && !f.fact_arrival) inAirCount++;\n        });\n\n        setSummaryData([\n          { label: \"Вылетели вовремя\", value: onTimeCount, color: \"green\" },\n          { label: \"С задержкой > 15 м\", value: delayedCount, color: \"yellow\" },\n          { label: \"Отменены\", value: canceledCount, color: \"red\" },\n          { label: \"Рейсов в воздухе сейчас\", value: inAirCount, color: \"blue\" },\n        ]);\n\n        // 3. Для графика динамики задержек возьмём группировку по времени (например, по часам)\n        // Здесь эмуляция, но можно заменить запросом, если есть\n        const delayTimeline = Array.from({ length: 24 }).map((_, i) => {\n          const hour = `${i.toString().padStart(2, \"0\")}:00`;\n          // считаем в рейсах с нужным часом (plan_departure) сколько on-time, delayed, canceled\n          const onTime = flights.filter(\n            (f) =>\n              f.plan_departure &&\n              new Date(f.plan_departure).getHours() === i &&\n              f.delay_category === \"on-time\"\n          ).length;\n          const delayed = flights.filter(\n            (f) =>\n              f.plan_departure &&\n              new Date(f.plan_departure).getHours() === i &&\n              (f.delay_category === \"minor-delay\" || f.delay_category === \"major-delay\")\n          ).length;\n          const canceled = flights.filter(\n            (f) =>\n              f.plan_departure &&\n              new Date(f.plan_departure).getHours() === i &&\n              f.delay_category === \"canceled\"\n          ).length;\n\n          return { time: hour, onTime, delayed, canceled };\n        });\n\n        setDelayStats(delayTimeline);\n      } catch (error) {\n        console.error(\"Ошибка загрузки данных:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchDashboardData();\n  }, [airportCode]);\n\n  if (loading) return <div>Загрузка данных...</div>;\n\n  return (\n    <div style={{ maxWidth: 1000, margin: \"20px auto\", fontFamily: \"Arial, sans-serif\" }}>\n      <h2>Ситуационный центр пунктуальности — аэропорт {airportCode}</h2>\n\n      <div style={{ display: \"flex\", gap: 20, marginBottom: 30, flexWrap: \"wrap\" }}>\n        {summaryData.map(({ label, value, color }) => (\n          <div\n            key={label}\n            style={{\n              flex: \"1 1 200px\",\n              backgroundColor: getColor(color),\n              color: \"white\",\n              padding: \"15px 20px\",\n              borderRadius: 12,\n              boxShadow: \"0 2px 6px rgba(0,0,0,0.1)\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n            }}\n          >\n            <div style={{ fontSize: 18, marginBottom: 6 }}>{label}</div>\n            <div style={{ fontSize: 24, fontWeight: \"bold\" }}>{value} рейсов</div>\n          </div>\n        ))}\n      </div>\n\n      <h3 style={{ marginTop: 40 }}>Динамика задержек за день</h3>\n      <div style={{ width: \"100%\", height: 300 }}>\n        <ResponsiveContainer>\n          <LineChart data={delayStats}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"time\" />\n            <YAxis allowDecimals={false} />\n            <Tooltip />\n            <Legend />\n            <Line\n              type=\"monotone\"\n              dataKey=\"onTime\"\n              stroke={getColor(\"green\")}\n              name=\"Вовремя\"\n              strokeWidth={3}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"delayed\"\n              stroke={getColor(\"yellow\")}\n              name=\"С задержкой\"\n              strokeWidth={3}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"canceled\"\n              stroke={getColor(\"red\")}\n              name=\"Отменены\"\n              strokeWidth={3}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n};\n\nexport default PunctualityDashboard;\n"]},"metadata":{},"sourceType":"module"}