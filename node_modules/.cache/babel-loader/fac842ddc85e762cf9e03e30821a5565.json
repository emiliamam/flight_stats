{"ast":null,"code":"var _jsxFileName = \"/Users/emiliamamedova/charts/project_corona_tracker/src/components/CountryPicker/CountryPicker.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport { fetchCountries } from '../../api';\nimport styles from './CountryPicker.module.css';\n\nconst Countries = ({\n  handleCountryChange\n}) => {\n  const [countries, setCountries] = useState([]);\n  useEffect(() => {\n    const fetchCountries = async () => {\n      try {\n        const response = await fetch('/countries.json'); // если в public/\n\n        const data = await response.json();\n        setCountries(data);\n      } catch (error) {\n        console.error('Error loading countries:', error);\n      }\n    };\n\n    fetchCountries();\n  }, []);\n  return /*#__PURE__*/React.createElement(FormControl, {\n    className: styles.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NativeSelect, {\n    defaultValue: \"\",\n    onChange: e => handleCountryChange(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, \"United States\"), countries.map((country, i) => /*#__PURE__*/React.createElement(\"option\", {\n    key: i,\n    value: country,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 40\n    }\n  }, country))));\n};\n\nexport default Countries;","map":{"version":3,"sources":["/Users/emiliamamedova/charts/project_corona_tracker/src/components/CountryPicker/CountryPicker.jsx"],"names":["React","useState","useEffect","NativeSelect","FormControl","fetchCountries","styles","Countries","handleCountryChange","countries","setCountries","response","fetch","data","json","error","console","formControl","e","target","value","map","country","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,mBAA1C;AAEA,SAASC,cAAT,QAA+B,WAA/B;AAEA,OAAOC,MAAP,MAAmB,4BAAnB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA6B;AAC7C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMG,cAAc,GAAG,YAAY;AACjC,UAAI;AACF,cAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAD,CAA5B,CADE,CACgD;;AAClD,cAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAJ,QAAAA,YAAY,CAACG,IAAD,CAAZ;AACD,OAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACD;AACF,KARD;;AAUAV,IAAAA,cAAc;AACf,GAZQ,EAYN,EAZM,CAAT;AAcA,sBACE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEC,MAAM,CAACW,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,YAAY,EAAC,EAA3B;AAA8B,IAAA,QAAQ,EAAGC,CAAD,IAAOV,mBAAmB,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEGX,SAAS,CAACY,GAAV,CAAc,CAACC,OAAD,EAAUC,CAAV,kBAAgB;AAAQ,IAAA,GAAG,EAAEA,CAAb;AAAgB,IAAA,KAAK,EAAED,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCA,OAAjC,CAA9B,CAFH,CADF,CADF;AAQD,CAzBD;;AA2BA,eAAef,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\n\nimport { fetchCountries } from '../../api';\n\nimport styles from './CountryPicker.module.css';\n\nconst Countries = ({ handleCountryChange }) => {\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchCountries = async () => {\n      try {\n        const response = await fetch('/countries.json');  // если в public/\n        const data = await response.json();\n        setCountries(data);\n      } catch (error) {\n        console.error('Error loading countries:', error);\n      }\n    };\n\n    fetchCountries();\n  }, []);\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n        <option value=\"\">United States</option>\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default Countries;\n"]},"metadata":{},"sourceType":"module"}