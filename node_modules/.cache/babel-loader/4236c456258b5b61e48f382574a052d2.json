{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport default function useFlightStats() {\n  const [stats, setStats] = useState({\n    hourlyStats: Array(24).fill().map((_, i) => ({\n      hour: i,\n      onTime: 0,\n      delayed: 0,\n      cancelled: 0\n    })),\n    currentFlights: 0\n  });\n  const [loading, setLoading] = useState(true);\n  const API_KEY = 'c878f53f2faec4c836c07916329e90c8';\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // 1. Получение списка российских аэропортов\n        const airportRes = await fetch(`https://api.aviationstack.com/v1/airports?access_key=${API_KEY}&country=RU&limit=100`);\n        const airportJson = await airportRes.json();\n        const airportData = airportJson.data || [];\n        const russianAirports = airportData.map(airport => airport.iata_code).filter(Boolean); // отфильтровать null и пустые\n\n        const airportList = russianAirports.join(','); // 2. Запрос рейсов с фильтрацией по российским аэропортам\n\n        const flightRes = await fetch(`https://api.aviationstack.com/v1/flights?access_key=${API_KEY}&flight_status=scheduled&dep_iata=${airportList}&arr_iata=${airportList}&limit=100`);\n        const flightJson = await flightRes.json();\n        const flights = flightJson.data || [];\n        console.log('Russian Flights:', flights); // 3. Статистика по часам\n\n        const hourlyStats = Array(24).fill().map((_, i) => ({\n          hour: i,\n          onTime: 0,\n          delayed: 0,\n          cancelled: 0\n        }));\n        flights.forEach(flight => {\n          if (!flight.departure || !flight.departure.scheduled) return;\n          const scheduledUTC = new Date(flight.departure.scheduled);\n          const hourMoscow = (scheduledUTC.getUTCHours() + 3) % 24;\n\n          if (flight.flight_status === 'cancelled') {\n            hourlyStats[hourMoscow].cancelled += 1;\n          } else if (flight.departure.actual) {\n            const actualUTC = new Date(flight.departure.actual);\n            const delayMinutes = (actualUTC - scheduledUTC) / 60000;\n            delayMinutes <= 15 ? hourlyStats[hourMoscow].onTime += 1 : hourlyStats[hourMoscow].delayed += 1;\n          }\n        }); // 4. Подсчёт активных рейсов\n\n        const currentFlights = flights.filter(flight => flight.flight_status === 'active').length;\n        setStats({\n          hourlyStats,\n          currentFlights\n        });\n      } catch (error) {\n        console.error('Ошибка при получении данных:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n  return { ...stats,\n    loading\n  };\n}","map":{"version":3,"sources":["/Users/emiliamamedova/charts/project_corona_tracker/src/shared/useFlightStats.jsx"],"names":["useState","useEffect","useFlightStats","stats","setStats","hourlyStats","Array","fill","map","_","i","hour","onTime","delayed","cancelled","currentFlights","loading","setLoading","API_KEY","fetchData","airportRes","fetch","airportJson","json","airportData","data","russianAirports","airport","iata_code","filter","Boolean","airportList","join","flightRes","flightJson","flights","console","log","forEach","flight","departure","scheduled","scheduledUTC","Date","hourMoscow","getUTCHours","flight_status","actual","actualUTC","delayMinutes","length","error"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function useFlightStats() {\n  const [stats, setStats] = useState({\n    hourlyStats: Array(24).fill().map((_, i) => ({\n      hour: i,\n      onTime: 0,\n      delayed: 0,\n      cancelled: 0\n    })),\n    currentFlights: 0\n  });\n  const [loading, setLoading] = useState(true);\n\n  const API_KEY = 'c878f53f2faec4c836c07916329e90c8';\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // 1. Получение списка российских аэропортов\n        const airportRes = await fetch(\n          `https://api.aviationstack.com/v1/airports?access_key=${API_KEY}&country=RU&limit=100`\n        );\n        const airportJson = await airportRes.json();\n        const airportData = airportJson.data || [];\n\n        const russianAirports = airportData\n          .map(airport => airport.iata_code)\n          .filter(Boolean); // отфильтровать null и пустые\n\n        const airportList = russianAirports.join(',');\n\n        // 2. Запрос рейсов с фильтрацией по российским аэропортам\n        const flightRes = await fetch(\n          `https://api.aviationstack.com/v1/flights?access_key=${API_KEY}&flight_status=scheduled&dep_iata=${airportList}&arr_iata=${airportList}&limit=100`\n        );\n        const flightJson = await flightRes.json();\n        const flights = flightJson.data || [];\n\n        console.log('Russian Flights:', flights);\n\n        // 3. Статистика по часам\n        const hourlyStats = Array(24).fill().map((_, i) => ({\n          hour: i,\n          onTime: 0,\n          delayed: 0,\n          cancelled: 0\n        }));\n\n        flights.forEach(flight => {\n          if (!flight.departure || !flight.departure.scheduled) return;\n\n          const scheduledUTC = new Date(flight.departure.scheduled);\n          const hourMoscow = (scheduledUTC.getUTCHours() + 3) % 24;\n\n          if (flight.flight_status === 'cancelled') {\n            hourlyStats[hourMoscow].cancelled += 1;\n          } else if (flight.departure.actual) {\n            const actualUTC = new Date(flight.departure.actual);\n            const delayMinutes = (actualUTC - scheduledUTC) / 60000;\n            delayMinutes <= 15\n              ? hourlyStats[hourMoscow].onTime += 1\n              : hourlyStats[hourMoscow].delayed += 1;\n          }\n        });\n\n        // 4. Подсчёт активных рейсов\n        const currentFlights = flights.filter(\n          flight => flight.flight_status === 'active'\n        ).length;\n\n        setStats({ hourlyStats, currentFlights });\n      } catch (error) {\n        console.error('Ошибка при получении данных:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return { ...stats, loading };\n}\n"]},"metadata":{},"sourceType":"module"}