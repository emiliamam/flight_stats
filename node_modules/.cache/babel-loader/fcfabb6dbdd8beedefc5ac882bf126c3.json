{"ast":null,"code":"import { useRef } from 'react';\nimport { uniqueId } from './DataUtils';\n/**\n * This hook returns a unique animation id for the object input.\n * If input changes (as in, reference equality is different), the animation id will change.\n * If input does not change, the animation id will not change.\n *\n * This is useful for animations. The Animate component\n * does have a `shouldReAnimate` prop but that doesn't seem to be doing what the name implies.\n * Also, we don't always want to re-animate on every render;\n * we only want to re-animate when the input changes. Not the internal state (e.g. `isAnimating`).\n *\n * @param input The object to check for changes. Uses reference equality (=== operator)\n * @param prefix Optional prefix to use for the animation id\n * @returns A unique animation id\n */\n\nexport function useAnimationId(input) {\n  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'animation-';\n  var animationId = useRef(uniqueId(prefix));\n  var prevProps = useRef(input);\n\n  if (prevProps.current !== input) {\n    animationId.current = uniqueId(prefix);\n    prevProps.current = input;\n  }\n\n  return animationId.current;\n}","map":{"version":3,"sources":["/Users/emiliamamedova/charts/project_corona_tracker/node_modules/recharts/es6/util/useAnimationId.js"],"names":["useRef","uniqueId","useAnimationId","input","prefix","arguments","length","undefined","animationId","prevProps","current"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA;;;;;;;;;;;;;;;AAcA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AACpC,MAAIC,MAAM,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,YAAjF;AACA,MAAIG,WAAW,GAAGR,MAAM,CAACC,QAAQ,CAACG,MAAD,CAAT,CAAxB;AACA,MAAIK,SAAS,GAAGT,MAAM,CAACG,KAAD,CAAtB;;AACA,MAAIM,SAAS,CAACC,OAAV,KAAsBP,KAA1B,EAAiC;AAC/BK,IAAAA,WAAW,CAACE,OAAZ,GAAsBT,QAAQ,CAACG,MAAD,CAA9B;AACAK,IAAAA,SAAS,CAACC,OAAV,GAAoBP,KAApB;AACD;;AACD,SAAOK,WAAW,CAACE,OAAnB;AACD","sourcesContent":["import { useRef } from 'react';\nimport { uniqueId } from './DataUtils';\n\n/**\n * This hook returns a unique animation id for the object input.\n * If input changes (as in, reference equality is different), the animation id will change.\n * If input does not change, the animation id will not change.\n *\n * This is useful for animations. The Animate component\n * does have a `shouldReAnimate` prop but that doesn't seem to be doing what the name implies.\n * Also, we don't always want to re-animate on every render;\n * we only want to re-animate when the input changes. Not the internal state (e.g. `isAnimating`).\n *\n * @param input The object to check for changes. Uses reference equality (=== operator)\n * @param prefix Optional prefix to use for the animation id\n * @returns A unique animation id\n */\nexport function useAnimationId(input) {\n  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'animation-';\n  var animationId = useRef(uniqueId(prefix));\n  var prevProps = useRef(input);\n  if (prevProps.current !== input) {\n    animationId.current = uniqueId(prefix);\n    prevProps.current = input;\n  }\n  return animationId.current;\n}"]},"metadata":{},"sourceType":"module"}