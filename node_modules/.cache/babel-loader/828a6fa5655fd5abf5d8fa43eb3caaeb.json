{"ast":null,"code":"import * as React from 'react';\nimport { useRef } from 'react';\nimport { Provider } from 'react-redux';\nimport { createRechartsStore } from './store';\nimport { useIsPanorama } from '../context/PanoramaContext';\nimport { RechartsReduxContext } from './RechartsReduxContext';\nexport function RechartsStoreProvider(_ref) {\n  var {\n    preloadedState,\n    children,\n    reduxStoreName\n  } = _ref;\n  var isPanorama = useIsPanorama();\n  /*\n   * Why the ref? Redux official documentation recommends to use store as a singleton,\n   * and reuse that everywhere: https://redux-toolkit.js.org/api/configureStore#basic-example\n   *\n   * Which is correct! Except that is considering deploying Redux in an app.\n   * Recharts as a library supports multiple charts on the same page.\n   * And each of these charts needs its own store independent of others!\n   *\n   * The alternative is to have everything in the store keyed by the chart id.\n   * Which would make working with everything a little bit more painful because we need the chart id everywhere.\n   */\n\n  var storeRef = useRef(null);\n  /*\n   * Panorama means that this chart is not its own chart, it's only a \"preview\"\n   * being rendered as a child of Brush.\n   * In such case, it should not have a store on its own - it should implicitly inherit\n   * whatever data is in the \"parent\" or \"root\" chart.\n   * Which here is represented by not having a Provider at all. All selectors will use the root store by default.\n   */\n\n  if (isPanorama) {\n    return children;\n  }\n\n  if (storeRef.current == null) {\n    storeRef.current = createRechartsStore(preloadedState, reduxStoreName);\n  } // ts-expect-error React-Redux types demand that the context internal value is not null, but we have that as default.\n\n\n  var nonNullContext = RechartsReduxContext;\n  return /*#__PURE__*/React.createElement(Provider, {\n    context: nonNullContext,\n    store: storeRef.current\n  }, children);\n}","map":{"version":3,"sources":["/Users/emiliamamedova/charts/flightStats/node_modules/recharts/es6/state/RechartsStoreProvider.js"],"names":["React","useRef","Provider","createRechartsStore","useIsPanorama","RechartsReduxContext","RechartsStoreProvider","_ref","preloadedState","children","reduxStoreName","isPanorama","storeRef","current","nonNullContext","createElement","context","store"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,mBAAT,QAAoC,SAApC;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,OAAO,SAASC,qBAAT,CAA+BC,IAA/B,EAAqC;AAC1C,MAAI;AACFC,IAAAA,cADE;AAEFC,IAAAA,QAFE;AAGFC,IAAAA;AAHE,MAIAH,IAJJ;AAKA,MAAII,UAAU,GAAGP,aAAa,EAA9B;AACA;;;;;;;;;;;;AAWA,MAAIQ,QAAQ,GAAGX,MAAM,CAAC,IAAD,CAArB;AAEA;;;;;;;;AAOA,MAAIU,UAAJ,EAAgB;AACd,WAAOF,QAAP;AACD;;AACD,MAAIG,QAAQ,CAACC,OAAT,IAAoB,IAAxB,EAA8B;AAC5BD,IAAAA,QAAQ,CAACC,OAAT,GAAmBV,mBAAmB,CAACK,cAAD,EAAiBE,cAAjB,CAAtC;AACD,GAhCyC,CAkC1C;;;AACA,MAAII,cAAc,GAAGT,oBAArB;AACA,SAAO,aAAaL,KAAK,CAACe,aAAN,CAAoBb,QAApB,EAA8B;AAChDc,IAAAA,OAAO,EAAEF,cADuC;AAEhDG,IAAAA,KAAK,EAAEL,QAAQ,CAACC;AAFgC,GAA9B,EAGjBJ,QAHiB,CAApB;AAID","sourcesContent":["import * as React from 'react';\nimport { useRef } from 'react';\nimport { Provider } from 'react-redux';\nimport { createRechartsStore } from './store';\nimport { useIsPanorama } from '../context/PanoramaContext';\nimport { RechartsReduxContext } from './RechartsReduxContext';\nexport function RechartsStoreProvider(_ref) {\n  var {\n    preloadedState,\n    children,\n    reduxStoreName\n  } = _ref;\n  var isPanorama = useIsPanorama();\n  /*\n   * Why the ref? Redux official documentation recommends to use store as a singleton,\n   * and reuse that everywhere: https://redux-toolkit.js.org/api/configureStore#basic-example\n   *\n   * Which is correct! Except that is considering deploying Redux in an app.\n   * Recharts as a library supports multiple charts on the same page.\n   * And each of these charts needs its own store independent of others!\n   *\n   * The alternative is to have everything in the store keyed by the chart id.\n   * Which would make working with everything a little bit more painful because we need the chart id everywhere.\n   */\n  var storeRef = useRef(null);\n\n  /*\n   * Panorama means that this chart is not its own chart, it's only a \"preview\"\n   * being rendered as a child of Brush.\n   * In such case, it should not have a store on its own - it should implicitly inherit\n   * whatever data is in the \"parent\" or \"root\" chart.\n   * Which here is represented by not having a Provider at all. All selectors will use the root store by default.\n   */\n  if (isPanorama) {\n    return children;\n  }\n  if (storeRef.current == null) {\n    storeRef.current = createRechartsStore(preloadedState, reduxStoreName);\n  }\n\n  // ts-expect-error React-Redux types demand that the context internal value is not null, but we have that as default.\n  var nonNullContext = RechartsReduxContext;\n  return /*#__PURE__*/React.createElement(Provider, {\n    context: nonNullContext,\n    store: storeRef.current\n  }, children);\n}"]},"metadata":{},"sourceType":"module"}