{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n/**\n * This is the data that's coming through main chart `data` prop\n * Recharts is very flexible in what it accepts so the type is very flexible too.\n * This will typically be an object, and various components will provide various `dataKey`\n * that dictates how to pull data from that object.\n *\n * TL;DR: before dataKey\n */\n\n/**\n * So this is the same unknown type as ChartData but this is after the dataKey has been applied.\n * We still don't know what the type is - that depends on what exactly it was before the dataKey application,\n * and the dataKey can return whatever anyway - but let's keep it separate as a form of documentation.\n *\n * TL;DR: ChartData after dataKey.\n */\n\nexport var initialChartDataState = {\n  chartData: undefined,\n  computedData: undefined,\n  dataStartIndex: 0,\n  dataEndIndex: 0\n};\nvar chartDataSlice = createSlice({\n  name: 'chartData',\n  initialState: initialChartDataState,\n  reducers: {\n    setChartData(state, action) {\n      state.chartData = action.payload;\n\n      if (action.payload == null) {\n        state.dataStartIndex = 0;\n        state.dataEndIndex = 0;\n        return;\n      }\n\n      if (action.payload.length > 0 && state.dataEndIndex !== action.payload.length - 1) {\n        state.dataEndIndex = action.payload.length - 1;\n      }\n    },\n\n    setComputedData(state, action) {\n      state.computedData = action.payload;\n    },\n\n    setDataStartEndIndexes(state, action) {\n      var {\n        startIndex,\n        endIndex\n      } = action.payload;\n\n      if (startIndex != null) {\n        state.dataStartIndex = startIndex;\n      }\n\n      if (endIndex != null) {\n        state.dataEndIndex = endIndex;\n      }\n    }\n\n  }\n});\nexport var {\n  setChartData,\n  setDataStartEndIndexes,\n  setComputedData\n} = chartDataSlice.actions;\nexport var chartDataReducer = chartDataSlice.reducer;","map":{"version":3,"sources":["/Users/emiliamamedova/charts/flightStats/node_modules/recharts/es6/state/chartDataSlice.js"],"names":["createSlice","initialChartDataState","chartData","undefined","computedData","dataStartIndex","dataEndIndex","chartDataSlice","name","initialState","reducers","setChartData","state","action","payload","length","setComputedData","setDataStartEndIndexes","startIndex","endIndex","actions","chartDataReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA;;;;;;;;;AASA;;;;;;;;AAQA,OAAO,IAAIC,qBAAqB,GAAG;AACjCC,EAAAA,SAAS,EAAEC,SADsB;AAEjCC,EAAAA,YAAY,EAAED,SAFmB;AAGjCE,EAAAA,cAAc,EAAE,CAHiB;AAIjCC,EAAAA,YAAY,EAAE;AAJmB,CAA5B;AAMP,IAAIC,cAAc,GAAGP,WAAW,CAAC;AAC/BQ,EAAAA,IAAI,EAAE,WADyB;AAE/BC,EAAAA,YAAY,EAAER,qBAFiB;AAG/BS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC1BD,MAAAA,KAAK,CAACV,SAAN,GAAkBW,MAAM,CAACC,OAAzB;;AACA,UAAID,MAAM,CAACC,OAAP,IAAkB,IAAtB,EAA4B;AAC1BF,QAAAA,KAAK,CAACP,cAAN,GAAuB,CAAvB;AACAO,QAAAA,KAAK,CAACN,YAAN,GAAqB,CAArB;AACA;AACD;;AACD,UAAIO,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwB,CAAxB,IAA6BH,KAAK,CAACN,YAAN,KAAuBO,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwB,CAAhF,EAAmF;AACjFH,QAAAA,KAAK,CAACN,YAAN,GAAqBO,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwB,CAA7C;AACD;AACF,KAXO;;AAYRC,IAAAA,eAAe,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AAC7BD,MAAAA,KAAK,CAACR,YAAN,GAAqBS,MAAM,CAACC,OAA5B;AACD,KAdO;;AAeRG,IAAAA,sBAAsB,CAACL,KAAD,EAAQC,MAAR,EAAgB;AACpC,UAAI;AACFK,QAAAA,UADE;AAEFC,QAAAA;AAFE,UAGAN,MAAM,CAACC,OAHX;;AAIA,UAAII,UAAU,IAAI,IAAlB,EAAwB;AACtBN,QAAAA,KAAK,CAACP,cAAN,GAAuBa,UAAvB;AACD;;AACD,UAAIC,QAAQ,IAAI,IAAhB,EAAsB;AACpBP,QAAAA,KAAK,CAACN,YAAN,GAAqBa,QAArB;AACD;AACF;;AA1BO;AAHqB,CAAD,CAAhC;AAgCA,OAAO,IAAI;AACTR,EAAAA,YADS;AAETM,EAAAA,sBAFS;AAGTD,EAAAA;AAHS,IAIPT,cAAc,CAACa,OAJZ;AAKP,OAAO,IAAIC,gBAAgB,GAAGd,cAAc,CAACe,OAAtC","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n/**\n * This is the data that's coming through main chart `data` prop\n * Recharts is very flexible in what it accepts so the type is very flexible too.\n * This will typically be an object, and various components will provide various `dataKey`\n * that dictates how to pull data from that object.\n *\n * TL;DR: before dataKey\n */\n\n/**\n * So this is the same unknown type as ChartData but this is after the dataKey has been applied.\n * We still don't know what the type is - that depends on what exactly it was before the dataKey application,\n * and the dataKey can return whatever anyway - but let's keep it separate as a form of documentation.\n *\n * TL;DR: ChartData after dataKey.\n */\n\nexport var initialChartDataState = {\n  chartData: undefined,\n  computedData: undefined,\n  dataStartIndex: 0,\n  dataEndIndex: 0\n};\nvar chartDataSlice = createSlice({\n  name: 'chartData',\n  initialState: initialChartDataState,\n  reducers: {\n    setChartData(state, action) {\n      state.chartData = action.payload;\n      if (action.payload == null) {\n        state.dataStartIndex = 0;\n        state.dataEndIndex = 0;\n        return;\n      }\n      if (action.payload.length > 0 && state.dataEndIndex !== action.payload.length - 1) {\n        state.dataEndIndex = action.payload.length - 1;\n      }\n    },\n    setComputedData(state, action) {\n      state.computedData = action.payload;\n    },\n    setDataStartEndIndexes(state, action) {\n      var {\n        startIndex,\n        endIndex\n      } = action.payload;\n      if (startIndex != null) {\n        state.dataStartIndex = startIndex;\n      }\n      if (endIndex != null) {\n        state.dataEndIndex = endIndex;\n      }\n    }\n  }\n});\nexport var {\n  setChartData,\n  setDataStartEndIndexes,\n  setComputedData\n} = chartDataSlice.actions;\nexport var chartDataReducer = chartDataSlice.reducer;"]},"metadata":{},"sourceType":"module"}