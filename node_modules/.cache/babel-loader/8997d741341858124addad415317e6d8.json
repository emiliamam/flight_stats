{"ast":null,"code":"/**\n * Calculates the width of the Y-axis based on the tick labels and the axis label.\n * @param {Object} params - The parameters object.\n * @param {React.RefObject<any>} params.cartesianAxisRef - The ref to the CartesianAxis component.\n * @param {React.RefObject<Element>} params.labelRef - The ref to the label element.\n * @param {number} [params.labelGapWithTick=5] - The gap between the label and the tick.\n * @returns {number} The calculated width of the Y-axis.\n */\nexport var getCalculatedYAxisWidth = _ref => {\n  var {\n    ticks,\n    label,\n    labelGapWithTick = 5,\n    // Default gap between label and tick\n    tickSize = 0,\n    tickMargin = 0\n  } = _ref; // find the max width of the tick labels\n\n  var maxTickWidth = 0;\n\n  if (ticks) {\n    ticks.forEach(tickNode => {\n      if (tickNode) {\n        var bbox = tickNode.getBoundingClientRect();\n\n        if (bbox.width > maxTickWidth) {\n          maxTickWidth = bbox.width;\n        }\n      }\n    }); // calculate width of the axis label\n\n    var labelWidth = label ? label.getBoundingClientRect().width : 0;\n    var tickWidth = tickSize + tickMargin; // calculate the updated width of the y-axis\n\n    var updatedYAxisWidth = maxTickWidth + tickWidth + labelWidth + (label ? labelGapWithTick : 0);\n    return Math.round(updatedYAxisWidth);\n  }\n\n  return 0;\n};","map":{"version":3,"sources":["/Users/emiliamamedova/charts/flightStats/node_modules/recharts/es6/util/YAxisUtils.js"],"names":["getCalculatedYAxisWidth","_ref","ticks","label","labelGapWithTick","tickSize","tickMargin","maxTickWidth","forEach","tickNode","bbox","getBoundingClientRect","width","labelWidth","tickWidth","updatedYAxisWidth","Math","round"],"mappings":"AAAA;;;;;;;;AAQA,OAAO,IAAIA,uBAAuB,GAAGC,IAAI,IAAI;AAC3C,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,KAFE;AAGFC,IAAAA,gBAAgB,GAAG,CAHjB;AAIF;AACAC,IAAAA,QAAQ,GAAG,CALT;AAMFC,IAAAA,UAAU,GAAG;AANX,MAOAL,IAPJ,CAD2C,CAS3C;;AACA,MAAIM,YAAY,GAAG,CAAnB;;AACA,MAAIL,KAAJ,EAAW;AACTA,IAAAA,KAAK,CAACM,OAAN,CAAcC,QAAQ,IAAI;AACxB,UAAIA,QAAJ,EAAc;AACZ,YAAIC,IAAI,GAAGD,QAAQ,CAACE,qBAAT,EAAX;;AACA,YAAID,IAAI,CAACE,KAAL,GAAaL,YAAjB,EAA+B;AAC7BA,UAAAA,YAAY,GAAGG,IAAI,CAACE,KAApB;AACD;AACF;AACF,KAPD,EADS,CAUT;;AACA,QAAIC,UAAU,GAAGV,KAAK,GAAGA,KAAK,CAACQ,qBAAN,GAA8BC,KAAjC,GAAyC,CAA/D;AACA,QAAIE,SAAS,GAAGT,QAAQ,GAAGC,UAA3B,CAZS,CAcT;;AACA,QAAIS,iBAAiB,GAAGR,YAAY,GAAGO,SAAf,GAA2BD,UAA3B,IAAyCV,KAAK,GAAGC,gBAAH,GAAsB,CAApE,CAAxB;AACA,WAAOY,IAAI,CAACC,KAAL,CAAWF,iBAAX,CAAP;AACD;;AACD,SAAO,CAAP;AACD,CA9BM","sourcesContent":["/**\n * Calculates the width of the Y-axis based on the tick labels and the axis label.\n * @param {Object} params - The parameters object.\n * @param {React.RefObject<any>} params.cartesianAxisRef - The ref to the CartesianAxis component.\n * @param {React.RefObject<Element>} params.labelRef - The ref to the label element.\n * @param {number} [params.labelGapWithTick=5] - The gap between the label and the tick.\n * @returns {number} The calculated width of the Y-axis.\n */\nexport var getCalculatedYAxisWidth = _ref => {\n  var {\n    ticks,\n    label,\n    labelGapWithTick = 5,\n    // Default gap between label and tick\n    tickSize = 0,\n    tickMargin = 0\n  } = _ref;\n  // find the max width of the tick labels\n  var maxTickWidth = 0;\n  if (ticks) {\n    ticks.forEach(tickNode => {\n      if (tickNode) {\n        var bbox = tickNode.getBoundingClientRect();\n        if (bbox.width > maxTickWidth) {\n          maxTickWidth = bbox.width;\n        }\n      }\n    });\n\n    // calculate width of the axis label\n    var labelWidth = label ? label.getBoundingClientRect().width : 0;\n    var tickWidth = tickSize + tickMargin;\n\n    // calculate the updated width of the y-axis\n    var updatedYAxisWidth = maxTickWidth + tickWidth + labelWidth + (label ? labelGapWithTick : 0);\n    return Math.round(updatedYAxisWidth);\n  }\n  return 0;\n};"]},"metadata":{},"sourceType":"module"}