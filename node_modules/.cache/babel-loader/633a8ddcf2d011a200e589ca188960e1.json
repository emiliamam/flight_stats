{"ast":null,"code":"import { createAction, createListenerMiddleware } from '@reduxjs/toolkit';\nimport { setActiveMouseOverItemIndex, setMouseOverAxisIndex } from './tooltipSlice';\nimport { selectActivePropsFromChartPointer } from './selectors/selectActivePropsFromChartPointer';\nimport { getChartPointer } from '../util/getChartPointer';\nimport { selectTooltipEventType } from './selectors/selectTooltipEventType';\nimport { DATA_ITEM_DATAKEY_ATTRIBUTE_NAME, DATA_ITEM_INDEX_ATTRIBUTE_NAME } from '../util/Constants';\nimport { selectTooltipCoordinate } from './selectors/touchSelectors';\nexport var touchEventAction = createAction('touchMove');\nexport var touchEventMiddleware = createListenerMiddleware();\ntouchEventMiddleware.startListening({\n  actionCreator: touchEventAction,\n  effect: (action, listenerApi) => {\n    var touchEvent = action.payload;\n    var state = listenerApi.getState();\n    var tooltipEventType = selectTooltipEventType(state, state.tooltip.settings.shared);\n\n    if (tooltipEventType === 'axis') {\n      var activeProps = selectActivePropsFromChartPointer(state, getChartPointer({\n        clientX: touchEvent.touches[0].clientX,\n        clientY: touchEvent.touches[0].clientY,\n        currentTarget: touchEvent.currentTarget\n      }));\n\n      if ((activeProps === null || activeProps === void 0 ? void 0 : activeProps.activeIndex) != null) {\n        listenerApi.dispatch(setMouseOverAxisIndex({\n          activeIndex: activeProps.activeIndex,\n          activeDataKey: undefined,\n          activeCoordinate: activeProps.activeCoordinate\n        }));\n      }\n    } else if (tooltipEventType === 'item') {\n      var _target$getAttribute;\n\n      var touch = touchEvent.touches[0];\n      var target = document.elementFromPoint(touch.clientX, touch.clientY);\n\n      if (!target || !target.getAttribute) {\n        return;\n      }\n\n      var itemIndex = target.getAttribute(DATA_ITEM_INDEX_ATTRIBUTE_NAME);\n      var dataKey = (_target$getAttribute = target.getAttribute(DATA_ITEM_DATAKEY_ATTRIBUTE_NAME)) !== null && _target$getAttribute !== void 0 ? _target$getAttribute : undefined;\n      var coordinate = selectTooltipCoordinate(listenerApi.getState(), itemIndex, dataKey);\n      listenerApi.dispatch(setActiveMouseOverItemIndex({\n        activeDataKey: dataKey,\n        activeIndex: itemIndex,\n        activeCoordinate: coordinate\n      }));\n    }\n  }\n});","map":{"version":3,"sources":["/Users/emiliamamedova/charts/project_corona_tracker/node_modules/recharts/es6/state/touchEventsMiddleware.js"],"names":["createAction","createListenerMiddleware","setActiveMouseOverItemIndex","setMouseOverAxisIndex","selectActivePropsFromChartPointer","getChartPointer","selectTooltipEventType","DATA_ITEM_DATAKEY_ATTRIBUTE_NAME","DATA_ITEM_INDEX_ATTRIBUTE_NAME","selectTooltipCoordinate","touchEventAction","touchEventMiddleware","startListening","actionCreator","effect","action","listenerApi","touchEvent","payload","state","getState","tooltipEventType","tooltip","settings","shared","activeProps","clientX","touches","clientY","currentTarget","activeIndex","dispatch","activeDataKey","undefined","activeCoordinate","_target$getAttribute","touch","target","document","elementFromPoint","getAttribute","itemIndex","dataKey","coordinate"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,wBAAvB,QAAuD,kBAAvD;AACA,SAASC,2BAAT,EAAsCC,qBAAtC,QAAmE,gBAAnE;AACA,SAASC,iCAAT,QAAkD,+CAAlD;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,sBAAT,QAAuC,oCAAvC;AACA,SAASC,gCAAT,EAA2CC,8BAA3C,QAAiF,mBAAjF;AACA,SAASC,uBAAT,QAAwC,4BAAxC;AACA,OAAO,IAAIC,gBAAgB,GAAGV,YAAY,CAAC,WAAD,CAAnC;AACP,OAAO,IAAIW,oBAAoB,GAAGV,wBAAwB,EAAnD;AACPU,oBAAoB,CAACC,cAArB,CAAoC;AAClCC,EAAAA,aAAa,EAAEH,gBADmB;AAElCI,EAAAA,MAAM,EAAE,CAACC,MAAD,EAASC,WAAT,KAAyB;AAC/B,QAAIC,UAAU,GAAGF,MAAM,CAACG,OAAxB;AACA,QAAIC,KAAK,GAAGH,WAAW,CAACI,QAAZ,EAAZ;AACA,QAAIC,gBAAgB,GAAGf,sBAAsB,CAACa,KAAD,EAAQA,KAAK,CAACG,OAAN,CAAcC,QAAd,CAAuBC,MAA/B,CAA7C;;AACA,QAAIH,gBAAgB,KAAK,MAAzB,EAAiC;AAC/B,UAAII,WAAW,GAAGrB,iCAAiC,CAACe,KAAD,EAAQd,eAAe,CAAC;AACzEqB,QAAAA,OAAO,EAAET,UAAU,CAACU,OAAX,CAAmB,CAAnB,EAAsBD,OAD0C;AAEzEE,QAAAA,OAAO,EAAEX,UAAU,CAACU,OAAX,CAAmB,CAAnB,EAAsBC,OAF0C;AAGzEC,QAAAA,aAAa,EAAEZ,UAAU,CAACY;AAH+C,OAAD,CAAvB,CAAnD;;AAKA,UAAI,CAACJ,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAACK,WAAvE,KAAuF,IAA3F,EAAiG;AAC/Fd,QAAAA,WAAW,CAACe,QAAZ,CAAqB5B,qBAAqB,CAAC;AACzC2B,UAAAA,WAAW,EAAEL,WAAW,CAACK,WADgB;AAEzCE,UAAAA,aAAa,EAAEC,SAF0B;AAGzCC,UAAAA,gBAAgB,EAAET,WAAW,CAACS;AAHW,SAAD,CAA1C;AAKD;AACF,KAbD,MAaO,IAAIb,gBAAgB,KAAK,MAAzB,EAAiC;AACtC,UAAIc,oBAAJ;;AACA,UAAIC,KAAK,GAAGnB,UAAU,CAACU,OAAX,CAAmB,CAAnB,CAAZ;AACA,UAAIU,MAAM,GAAGC,QAAQ,CAACC,gBAAT,CAA0BH,KAAK,CAACV,OAAhC,EAAyCU,KAAK,CAACR,OAA/C,CAAb;;AACA,UAAI,CAACS,MAAD,IAAW,CAACA,MAAM,CAACG,YAAvB,EAAqC;AACnC;AACD;;AACD,UAAIC,SAAS,GAAGJ,MAAM,CAACG,YAAP,CAAoBhC,8BAApB,CAAhB;AACA,UAAIkC,OAAO,GAAG,CAACP,oBAAoB,GAAGE,MAAM,CAACG,YAAP,CAAoBjC,gCAApB,CAAxB,MAAmF,IAAnF,IAA2F4B,oBAAoB,KAAK,KAAK,CAAzH,GAA6HA,oBAA7H,GAAoJF,SAAlK;AACA,UAAIU,UAAU,GAAGlC,uBAAuB,CAACO,WAAW,CAACI,QAAZ,EAAD,EAAyBqB,SAAzB,EAAoCC,OAApC,CAAxC;AACA1B,MAAAA,WAAW,CAACe,QAAZ,CAAqB7B,2BAA2B,CAAC;AAC/C8B,QAAAA,aAAa,EAAEU,OADgC;AAE/CZ,QAAAA,WAAW,EAAEW,SAFkC;AAG/CP,QAAAA,gBAAgB,EAAES;AAH6B,OAAD,CAAhD;AAKD;AACF;AAnCiC,CAApC","sourcesContent":["import { createAction, createListenerMiddleware } from '@reduxjs/toolkit';\nimport { setActiveMouseOverItemIndex, setMouseOverAxisIndex } from './tooltipSlice';\nimport { selectActivePropsFromChartPointer } from './selectors/selectActivePropsFromChartPointer';\nimport { getChartPointer } from '../util/getChartPointer';\nimport { selectTooltipEventType } from './selectors/selectTooltipEventType';\nimport { DATA_ITEM_DATAKEY_ATTRIBUTE_NAME, DATA_ITEM_INDEX_ATTRIBUTE_NAME } from '../util/Constants';\nimport { selectTooltipCoordinate } from './selectors/touchSelectors';\nexport var touchEventAction = createAction('touchMove');\nexport var touchEventMiddleware = createListenerMiddleware();\ntouchEventMiddleware.startListening({\n  actionCreator: touchEventAction,\n  effect: (action, listenerApi) => {\n    var touchEvent = action.payload;\n    var state = listenerApi.getState();\n    var tooltipEventType = selectTooltipEventType(state, state.tooltip.settings.shared);\n    if (tooltipEventType === 'axis') {\n      var activeProps = selectActivePropsFromChartPointer(state, getChartPointer({\n        clientX: touchEvent.touches[0].clientX,\n        clientY: touchEvent.touches[0].clientY,\n        currentTarget: touchEvent.currentTarget\n      }));\n      if ((activeProps === null || activeProps === void 0 ? void 0 : activeProps.activeIndex) != null) {\n        listenerApi.dispatch(setMouseOverAxisIndex({\n          activeIndex: activeProps.activeIndex,\n          activeDataKey: undefined,\n          activeCoordinate: activeProps.activeCoordinate\n        }));\n      }\n    } else if (tooltipEventType === 'item') {\n      var _target$getAttribute;\n      var touch = touchEvent.touches[0];\n      var target = document.elementFromPoint(touch.clientX, touch.clientY);\n      if (!target || !target.getAttribute) {\n        return;\n      }\n      var itemIndex = target.getAttribute(DATA_ITEM_INDEX_ATTRIBUTE_NAME);\n      var dataKey = (_target$getAttribute = target.getAttribute(DATA_ITEM_DATAKEY_ATTRIBUTE_NAME)) !== null && _target$getAttribute !== void 0 ? _target$getAttribute : undefined;\n      var coordinate = selectTooltipCoordinate(listenerApi.getState(), itemIndex, dataKey);\n      listenerApi.dispatch(setActiveMouseOverItemIndex({\n        activeDataKey: dataKey,\n        activeIndex: itemIndex,\n        activeCoordinate: coordinate\n      }));\n    }\n  }\n});"]},"metadata":{},"sourceType":"module"}