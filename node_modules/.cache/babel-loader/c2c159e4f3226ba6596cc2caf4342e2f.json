{"ast":null,"code":"var _jsxFileName = \"/Users/emiliamamedova/charts/flightStats/src/components/Cards/PunctualityDashboard.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer, CartesianGrid } from 'recharts';\n\nconst getColor = key => {\n  switch (key) {\n    case 'green':\n      return '#34c38f';\n\n    case 'yellow':\n      return '#f1b44c';\n\n    case 'red':\n      return '#f46a6a';\n\n    case 'blue':\n      return '#556ee6';\n\n    default:\n      return '#ccc';\n  }\n};\n\nconst PunctualityDashboard = () => {\n  const [flights, setFlights] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [summaryData, setSummaryData] = useState([]);\n  const [delayStats, setDelayStats] = useState([]);\n  useEffect(() => {\n    // Получаем последние 500 рейсов, например\n    fetch('http://localhost:8000/flights?limit=500').then(res => res.json()).then(data => {\n      setFlights(data);\n      setLoading(false);\n    });\n  }, []);\n  useEffect(() => {\n    console.log(flights);\n    if (!flights.length) return; // Подсчёт категорий задержек\n\n    let onTime = 0;\n    let delayed = 0;\n    let canceled = 0;\n    let inAir = 0; // Для динамики — сгруппируем по часу планового вылета\n\n    const delayByHour = {};\n    flights.forEach(flight => {\n      var _flight$delay_categor;\n\n      const dc = ((_flight$delay_categor = flight.delay_category) === null || _flight$delay_categor === void 0 ? void 0 : _flight$delay_categor.toLowerCase()) || '';\n\n      if (dc === 'отменен' || dc === 'отменено' || dc === 'canceled') {\n        canceled++;\n      } else if (dc === 'Нет_задержки' || dc === 'нет задержки') {\n        onTime++;\n      } else if (dc) {\n        delayed++;\n      } // В воздухе — если есть факт вылета, но нет прилёта\n\n\n      if (flight.fact_departure && !flight.fact_arrival) {\n        inAir++;\n      } // Для динамики по времени — час планового вылета\n\n\n      if (flight.plan_departure) {\n        const dt = new Date(flight.plan_departure);\n        const hourStr = dt.getHours().toString().padStart(2, '0') + ':00';\n\n        if (!delayByHour[hourStr]) {\n          delayByHour[hourStr] = {\n            onTime: 0,\n            delayed: 0,\n            canceled: 0\n          };\n        }\n\n        if (dc === 'отменен' || dc === 'отменено' || dc === 'canceled') {\n          delayByHour[hourStr].canceled++;\n        } else if (dc === 'Нет_задержки' || dc === 'нет задержки') {\n          delayByHour[hourStr].onTime++;\n        } else if (dc) {\n          delayByHour[hourStr].delayed++;\n        }\n      }\n    }); // Создаём массив для графика, отсортируем по времени\n\n    const delayStatsArr = Object.entries(delayByHour).sort((a, b) => a[0].localeCompare(b[0])).map(([time, counts]) => ({\n      time,\n      ...counts\n    }));\n    setSummaryData([{\n      label: 'Вылетели вовремя',\n      value: onTime,\n      color: 'green'\n    }, {\n      label: 'С задержкой',\n      value: delayed,\n      color: 'yellow'\n    }, {\n      label: 'Отменены',\n      value: canceled,\n      color: 'red'\n    }, {\n      label: 'Рейсов в воздухе сейчас',\n      value: inAir,\n      color: 'blue'\n    }]);\n    setDelayStats(delayStatsArr);\n  }, [flights]);\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 12\n      }\n    }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445...\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      maxWidth: 1000,\n      margin: '20px auto',\n      fontFamily: 'Arial, sans-serif'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, \"\\u0421\\u0438\\u0442\\u0443\\u0430\\u0446\\u0438\\u043E\\u043D\\u043D\\u044B\\u0439 \\u0446\\u0435\\u043D\\u0442\\u0440 \\u043F\\u0443\\u043D\\u043A\\u0442\\u0443\\u0430\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u0438\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      gap: 20,\n      marginBottom: 30,\n      flexWrap: 'wrap'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, summaryData.map(({\n    label,\n    value,\n    color\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    key: label,\n    style: {\n      flex: '1 1 200px',\n      backgroundColor: getColor(color),\n      color: 'white',\n      padding: '15px 20px',\n      borderRadius: 12,\n      boxShadow: '0 2px 6px rgba(0,0,0,0.1)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: 18,\n      marginBottom: 6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, label), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: 24,\n      fontWeight: 'bold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, value, \" \\u0440\\u0435\\u0439\\u0441\\u043E\\u0432\")))), /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      marginTop: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, \"\\u0414\\u0438\\u043D\\u0430\\u043C\\u0438\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0435\\u0440\\u0436\\u0435\\u043A \\u0437\\u0430 \\u0434\\u0435\\u043D\\u044C\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      height: 300\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: delayStats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    allowDecimals: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"onTime\",\n    stroke: \"#34c38f\",\n    name: \"\\u0412\\u043E\\u0432\\u0440\\u0435\\u043C\\u044F\",\n    strokeWidth: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"delayed\",\n    stroke: \"#f1b44c\",\n    name: \"\\u0421 \\u0437\\u0430\\u0434\\u0435\\u0440\\u0436\\u043A\\u043E\\u0439\",\n    strokeWidth: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"canceled\",\n    stroke: \"#f46a6a\",\n    name: \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0435\\u043D\\u044B\",\n    strokeWidth: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default PunctualityDashboard;","map":{"version":3,"sources":["/Users/emiliamamedova/charts/flightStats/src/components/Cards/PunctualityDashboard.jsx"],"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","Tooltip","Legend","ResponsiveContainer","CartesianGrid","getColor","key","PunctualityDashboard","flights","setFlights","loading","setLoading","summaryData","setSummaryData","delayStats","setDelayStats","fetch","then","res","json","data","console","log","length","onTime","delayed","canceled","inAir","delayByHour","forEach","flight","dc","delay_category","toLowerCase","fact_departure","fact_arrival","plan_departure","dt","Date","hourStr","getHours","toString","padStart","delayStatsArr","Object","entries","sort","a","b","localeCompare","map","time","counts","label","value","color","maxWidth","margin","fontFamily","display","gap","marginBottom","flexWrap","flex","backgroundColor","padding","borderRadius","boxShadow","fontSize","fontWeight","marginTop","width","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  CartesianGrid,\n} from 'recharts';\n\nconst getColor = (key) => {\n  switch (key) {\n    case 'green': return '#34c38f';\n    case 'yellow': return '#f1b44c';\n    case 'red': return '#f46a6a';\n    case 'blue': return '#556ee6';\n    default: return '#ccc';\n  }\n};\n\nconst PunctualityDashboard = () => {\n  const [flights, setFlights] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [summaryData, setSummaryData] = useState([]);\n  const [delayStats, setDelayStats] = useState([]);\n\n  useEffect(() => {\n    // Получаем последние 500 рейсов, например\n    fetch('http://localhost:8000/flights?limit=500')\n      .then(res => res.json())\n      .then(data => {\n        setFlights(data);\n        setLoading(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    console.log(flights)\n    if (!flights.length) return;\n\n    // Подсчёт категорий задержек\n    let onTime = 0;\n    let delayed = 0;\n    let canceled = 0;\n    let inAir = 0;\n\n    // Для динамики — сгруппируем по часу планового вылета\n    const delayByHour = {};\n\n    flights.forEach(flight => {\n      const dc = flight.delay_category?.toLowerCase() || '';\n      if (dc === 'отменен' || dc === 'отменено' || dc === 'canceled') {\n        canceled++;\n      } else if (dc === 'Нет_задержки' || dc === 'нет задержки') {\n        onTime++;\n      } else if (dc) {\n        delayed++;\n      }\n\n      // В воздухе — если есть факт вылета, но нет прилёта\n      if (flight.fact_departure && !flight.fact_arrival) {\n        inAir++;\n      }\n\n      // Для динамики по времени — час планового вылета\n      if (flight.plan_departure) {\n        const dt = new Date(flight.plan_departure);\n        const hourStr = dt.getHours().toString().padStart(2, '0') + ':00';\n\n        if (!delayByHour[hourStr]) {\n          delayByHour[hourStr] = { onTime: 0, delayed: 0, canceled: 0 };\n        }\n        if (dc === 'отменен' || dc === 'отменено' || dc === 'canceled') {\n          delayByHour[hourStr].canceled++;\n        } else if (dc === 'Нет_задержки' || dc === 'нет задержки') {\n          delayByHour[hourStr].onTime++;\n        } else if (dc) {\n          delayByHour[hourStr].delayed++;\n        }\n      }\n    });\n\n    // Создаём массив для графика, отсортируем по времени\n    const delayStatsArr = Object.entries(delayByHour)\n      .sort((a, b) => a[0].localeCompare(b[0]))\n      .map(([time, counts]) => ({\n        time,\n        ...counts,\n      }));\n\n    setSummaryData([\n      { label: 'Вылетели вовремя', value: onTime, color: 'green' },\n      { label: 'С задержкой', value: delayed, color: 'yellow' },\n      { label: 'Отменены', value: canceled, color: 'red' },\n      { label: 'Рейсов в воздухе сейчас', value: inAir, color: 'blue' },\n    ]);\n    setDelayStats(delayStatsArr);\n\n  }, [flights]);\n\n  if (loading) {\n    return <div>Загрузка данных...</div>;\n  }\n\n  return (\n    <div style={{ maxWidth: 1000, margin: '20px auto', fontFamily: 'Arial, sans-serif' }}>\n      <h2>Ситуационный центр пунктуальности</h2>\n\n      <div style={{ display: 'flex', gap: 20, marginBottom: 30, flexWrap: 'wrap' }}>\n        {summaryData.map(({ label, value, color }) => (\n          <div key={label} style={{\n            flex: '1 1 200px',\n            backgroundColor: getColor(color),\n            color: 'white',\n            padding: '15px 20px',\n            borderRadius: 12,\n            boxShadow: '0 2px 6px rgba(0,0,0,0.1)'\n          }}>\n            <div style={{ fontSize: 18, marginBottom: 6 }}>{label}</div>\n            <div style={{ fontSize: 24, fontWeight: 'bold' }}>{value} рейсов</div>\n          </div>\n        ))}\n      </div>\n\n      <h3 style={{ marginTop: 40 }}>Динамика задержек за день</h3>\n      <div style={{ width: '100%', height: 300 }}>\n        <ResponsiveContainer>\n          <LineChart data={delayStats}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"time\" />\n            <YAxis allowDecimals={false} />\n            <Tooltip />\n            <Legend />\n            <Line type=\"monotone\" dataKey=\"onTime\" stroke=\"#34c38f\" name=\"Вовремя\" strokeWidth={3} />\n            <Line type=\"monotone\" dataKey=\"delayed\" stroke=\"#f1b44c\" name=\"С задержкой\" strokeWidth={3} />\n            <Line type=\"monotone\" dataKey=\"canceled\" stroke=\"#f46a6a\" name=\"Отменены\" strokeWidth={3} />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n};\n\nexport default PunctualityDashboard;\n"]},"metadata":{},"sourceType":"module"}