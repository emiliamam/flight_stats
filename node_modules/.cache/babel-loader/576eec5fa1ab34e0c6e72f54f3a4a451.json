{"ast":null,"code":"/**\n * Callback type for the timeout function.\n * Receives current time in milliseconds as an argument.\n */\n\n/**\n * A function that, when called, cancels the timeout.\n */\nexport class RequestAnimationFrameTimeoutController {\n  setTimeout(callback) {\n    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var startTime = performance.now();\n    var requestId = null;\n\n    var executeCallback = now => {\n      if (now - startTime >= delay) {\n        callback(now); // tests fail without the extra if, even when five lines below it's not needed\n        // TODO finish transition to the mocked timeout controller and then remove this condition\n      } else if (typeof requestAnimationFrame === 'function') {\n        requestId = requestAnimationFrame(executeCallback);\n      }\n    };\n\n    requestId = requestAnimationFrame(executeCallback);\n    return () => {\n      cancelAnimationFrame(requestId);\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/emiliamamedova/charts/flightStats/node_modules/recharts/es6/animation/timeoutController.js"],"names":["RequestAnimationFrameTimeoutController","setTimeout","callback","delay","arguments","length","undefined","startTime","performance","now","requestId","executeCallback","requestAnimationFrame","cancelAnimationFrame"],"mappings":"AAAA;;;;;AAKA;;;AAIA,OAAO,MAAMA,sCAAN,CAA6C;AAClDC,EAAAA,UAAU,CAACC,QAAD,EAAW;AACnB,QAAIC,KAAK,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,CAAhF;AACA,QAAIG,SAAS,GAAGC,WAAW,CAACC,GAAZ,EAAhB;AACA,QAAIC,SAAS,GAAG,IAAhB;;AACA,QAAIC,eAAe,GAAGF,GAAG,IAAI;AAC3B,UAAIA,GAAG,GAAGF,SAAN,IAAmBJ,KAAvB,EAA8B;AAC5BD,QAAAA,QAAQ,CAACO,GAAD,CAAR,CAD4B,CAE5B;AACA;AACD,OAJD,MAIO,IAAI,OAAOG,qBAAP,KAAiC,UAArC,EAAiD;AACtDF,QAAAA,SAAS,GAAGE,qBAAqB,CAACD,eAAD,CAAjC;AACD;AACF,KARD;;AASAD,IAAAA,SAAS,GAAGE,qBAAqB,CAACD,eAAD,CAAjC;AACA,WAAO,MAAM;AACXE,MAAAA,oBAAoB,CAACH,SAAD,CAApB;AACD,KAFD;AAGD;;AAlBiD","sourcesContent":["/**\n * Callback type for the timeout function.\n * Receives current time in milliseconds as an argument.\n */\n\n/**\n * A function that, when called, cancels the timeout.\n */\n\nexport class RequestAnimationFrameTimeoutController {\n  setTimeout(callback) {\n    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var startTime = performance.now();\n    var requestId = null;\n    var executeCallback = now => {\n      if (now - startTime >= delay) {\n        callback(now);\n        // tests fail without the extra if, even when five lines below it's not needed\n        // TODO finish transition to the mocked timeout controller and then remove this condition\n      } else if (typeof requestAnimationFrame === 'function') {\n        requestId = requestAnimationFrame(executeCallback);\n      }\n    };\n    requestId = requestAnimationFrame(executeCallback);\n    return () => {\n      cancelAnimationFrame(requestId);\n    };\n  }\n}"]},"metadata":{},"sourceType":"module"}