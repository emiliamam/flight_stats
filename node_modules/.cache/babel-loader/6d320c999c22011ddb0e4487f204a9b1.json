{"ast":null,"code":"var _excluded = [\"x\", \"y\", \"lineHeight\", \"capHeight\", \"scaleToFit\", \"textAnchor\", \"verticalAnchor\", \"fill\"],\n    _excluded2 = [\"dx\", \"dy\", \"angle\", \"className\", \"breakAll\"];\n\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n\n    return n;\n  }, _extends.apply(null, arguments);\n}\n\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n\n  var o,\n      r,\n      i = _objectWithoutPropertiesLoose(e, t);\n\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n\n  return i;\n}\n\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n\n  return t;\n}\n\nimport * as React from 'react';\nimport { useMemo, forwardRef } from 'react';\nimport { clsx } from 'clsx';\nimport { isNullish, isNumber, isNumOrStr } from '../util/DataUtils';\nimport { Global } from '../util/Global';\nimport { filterProps } from '../util/ReactUtils';\nimport { getStringSize } from '../util/DOMUtils';\nimport { reduceCSSCalc } from '../util/ReduceCSSCalc';\nvar BREAKING_SPACES = /[ \\f\\n\\r\\t\\v\\u2028\\u2029]+/;\n\nvar calculateWordWidths = _ref => {\n  var {\n    children,\n    breakAll,\n    style\n  } = _ref;\n\n  try {\n    var words = [];\n\n    if (!isNullish(children)) {\n      if (breakAll) {\n        words = children.toString().split('');\n      } else {\n        words = children.toString().split(BREAKING_SPACES);\n      }\n    }\n\n    var wordsWithComputedWidth = words.map(word => ({\n      word,\n      width: getStringSize(word, style).width\n    }));\n    var spaceWidth = breakAll ? 0 : getStringSize('\\u00A0', style).width;\n    return {\n      wordsWithComputedWidth,\n      spaceWidth\n    };\n  } catch (_unused) {\n    return null;\n  }\n};\n\nvar calculateWordsByLines = (_ref2, initialWordsWithComputedWith, spaceWidth, lineWidth, scaleToFit) => {\n  var {\n    maxLines,\n    children,\n    style,\n    breakAll\n  } = _ref2;\n  var shouldLimitLines = isNumber(maxLines);\n  var text = children;\n\n  var calculate = function calculate() {\n    var words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return words.reduce((result, _ref3) => {\n      var {\n        word,\n        width\n      } = _ref3;\n      var currentLine = result[result.length - 1];\n\n      if (currentLine && (lineWidth == null || scaleToFit || currentLine.width + width + spaceWidth < Number(lineWidth))) {\n        // Word can be added to an existing line\n        currentLine.words.push(word);\n        currentLine.width += width + spaceWidth;\n      } else {\n        // Add first word to line or word is too long to scaleToFit on existing line\n        var newLine = {\n          words: [word],\n          width\n        };\n        result.push(newLine);\n      }\n\n      return result;\n    }, []);\n  };\n\n  var originalResult = calculate(initialWordsWithComputedWith);\n\n  var findLongestLine = words => words.reduce((a, b) => a.width > b.width ? a : b);\n\n  if (!shouldLimitLines || scaleToFit) {\n    return originalResult;\n  }\n\n  var overflows = originalResult.length > maxLines || findLongestLine(originalResult).width > Number(lineWidth);\n\n  if (!overflows) {\n    return originalResult;\n  }\n\n  var suffix = 'â€¦';\n\n  var checkOverflow = index => {\n    var tempText = text.slice(0, index);\n    var words = calculateWordWidths({\n      breakAll,\n      style,\n      children: tempText + suffix\n    }).wordsWithComputedWidth;\n    var result = calculate(words);\n    var doesOverflow = result.length > maxLines || findLongestLine(result).width > Number(lineWidth);\n    return [doesOverflow, result];\n  };\n\n  var start = 0;\n  var end = text.length - 1;\n  var iterations = 0;\n  var trimmedResult;\n\n  while (start <= end && iterations <= text.length - 1) {\n    var middle = Math.floor((start + end) / 2);\n    var prev = middle - 1;\n    var [doesPrevOverflow, result] = checkOverflow(prev);\n    var [doesMiddleOverflow] = checkOverflow(middle);\n\n    if (!doesPrevOverflow && !doesMiddleOverflow) {\n      start = middle + 1;\n    }\n\n    if (doesPrevOverflow && doesMiddleOverflow) {\n      end = middle - 1;\n    }\n\n    if (!doesPrevOverflow && doesMiddleOverflow) {\n      trimmedResult = result;\n      break;\n    }\n\n    iterations++;\n  } // Fallback to originalResult (result without trimming) if we cannot find the\n  // where to trim.  This should not happen :tm:\n\n\n  return trimmedResult || originalResult;\n};\n\nvar getWordsWithoutCalculate = children => {\n  var words = !isNullish(children) ? children.toString().split(BREAKING_SPACES) : [];\n  return [{\n    words\n  }];\n};\n\nexport var getWordsByLines = _ref4 => {\n  var {\n    width,\n    scaleToFit,\n    children,\n    style,\n    breakAll,\n    maxLines\n  } = _ref4; // Only perform calculations if using features that require them (multiline, scaleToFit)\n\n  if ((width || scaleToFit) && !Global.isSsr) {\n    var wordsWithComputedWidth, spaceWidth;\n    var wordWidths = calculateWordWidths({\n      breakAll,\n      children,\n      style\n    });\n\n    if (wordWidths) {\n      var {\n        wordsWithComputedWidth: wcw,\n        spaceWidth: sw\n      } = wordWidths;\n      wordsWithComputedWidth = wcw;\n      spaceWidth = sw;\n    } else {\n      return getWordsWithoutCalculate(children);\n    }\n\n    return calculateWordsByLines({\n      breakAll,\n      children,\n      maxLines,\n      style\n    }, wordsWithComputedWidth, spaceWidth, width, scaleToFit);\n  }\n\n  return getWordsWithoutCalculate(children);\n};\nvar DEFAULT_FILL = '#808080';\nexport var Text = /*#__PURE__*/forwardRef((_ref5, ref) => {\n  var {\n    x: propsX = 0,\n    y: propsY = 0,\n    lineHeight = '1em',\n    // Magic number from d3\n    capHeight = '0.71em',\n    scaleToFit = false,\n    textAnchor = 'start',\n    // Maintain compat with existing charts / default SVG behavior\n    verticalAnchor = 'end',\n    fill = DEFAULT_FILL\n  } = _ref5,\n      props = _objectWithoutProperties(_ref5, _excluded);\n\n  var wordsByLines = useMemo(() => {\n    return getWordsByLines({\n      breakAll: props.breakAll,\n      children: props.children,\n      maxLines: props.maxLines,\n      scaleToFit,\n      style: props.style,\n      width: props.width\n    });\n  }, [props.breakAll, props.children, props.maxLines, scaleToFit, props.style, props.width]);\n\n  var {\n    dx,\n    dy,\n    angle,\n    className,\n    breakAll\n  } = props,\n      textProps = _objectWithoutProperties(props, _excluded2);\n\n  if (!isNumOrStr(propsX) || !isNumOrStr(propsY)) {\n    return null;\n  }\n\n  var x = propsX + (isNumber(dx) ? dx : 0);\n  var y = propsY + (isNumber(dy) ? dy : 0);\n  var startDy;\n\n  switch (verticalAnchor) {\n    case 'start':\n      startDy = reduceCSSCalc(\"calc(\".concat(capHeight, \")\"));\n      break;\n\n    case 'middle':\n      startDy = reduceCSSCalc(\"calc(\".concat((wordsByLines.length - 1) / 2, \" * -\").concat(lineHeight, \" + (\").concat(capHeight, \" / 2))\"));\n      break;\n\n    default:\n      startDy = reduceCSSCalc(\"calc(\".concat(wordsByLines.length - 1, \" * -\").concat(lineHeight, \")\"));\n      break;\n  }\n\n  var transforms = [];\n\n  if (scaleToFit) {\n    var lineWidth = wordsByLines[0].width;\n    var {\n      width\n    } = props;\n    transforms.push(\"scale(\".concat(isNumber(width) ? width / lineWidth : 1, \")\"));\n  }\n\n  if (angle) {\n    transforms.push(\"rotate(\".concat(angle, \", \").concat(x, \", \").concat(y, \")\"));\n  }\n\n  if (transforms.length) {\n    textProps.transform = transforms.join(' ');\n  }\n\n  return /*#__PURE__*/React.createElement(\"text\", _extends({}, filterProps(textProps, true), {\n    ref: ref,\n    x: x,\n    y: y,\n    className: clsx('recharts-text', className),\n    textAnchor: textAnchor,\n    fill: fill.includes('url') ? DEFAULT_FILL : fill\n  }), wordsByLines.map((line, index) => {\n    var words = line.words.join(breakAll ? '' : ' ');\n    return (\n      /*#__PURE__*/\n      // duplicate words will cause duplicate keys\n      // eslint-disable-next-line react/no-array-index-key\n      React.createElement(\"tspan\", {\n        x: x,\n        dy: index === 0 ? startDy : lineHeight,\n        key: \"\".concat(words, \"-\").concat(index)\n      }, words)\n    );\n  }));\n});\nText.displayName = 'Text';","map":{"version":3,"sources":["/Users/emiliamamedova/charts/project_corona_tracker/node_modules/recharts/es6/component/Text.js"],"names":["_excluded","_excluded2","_extends","Object","assign","bind","n","e","arguments","length","t","r","hasOwnProperty","call","apply","_objectWithoutProperties","o","i","_objectWithoutPropertiesLoose","getOwnPropertySymbols","indexOf","propertyIsEnumerable","React","useMemo","forwardRef","clsx","isNullish","isNumber","isNumOrStr","Global","filterProps","getStringSize","reduceCSSCalc","BREAKING_SPACES","calculateWordWidths","_ref","children","breakAll","style","words","toString","split","wordsWithComputedWidth","map","word","width","spaceWidth","_unused","calculateWordsByLines","_ref2","initialWordsWithComputedWith","lineWidth","scaleToFit","maxLines","shouldLimitLines","text","calculate","undefined","reduce","result","_ref3","currentLine","Number","push","newLine","originalResult","findLongestLine","a","b","overflows","suffix","checkOverflow","index","tempText","slice","doesOverflow","start","end","iterations","trimmedResult","middle","Math","floor","prev","doesPrevOverflow","doesMiddleOverflow","getWordsWithoutCalculate","getWordsByLines","_ref4","isSsr","wordWidths","wcw","sw","DEFAULT_FILL","Text","_ref5","ref","x","propsX","y","propsY","lineHeight","capHeight","textAnchor","verticalAnchor","fill","props","wordsByLines","dx","dy","angle","className","textProps","startDy","concat","transforms","transform","join","createElement","includes","line","key","displayName"],"mappings":"AAAA,IAAIA,SAAS,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,YAAX,EAAyB,WAAzB,EAAsC,YAAtC,EAAoD,YAApD,EAAkE,gBAAlE,EAAoF,MAApF,CAAhB;AAAA,IACEC,UAAU,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,OAAb,EAAsB,WAAtB,EAAmC,UAAnC,CADf;;AAEA,SAASC,QAAT,GAAoB;AAAE,SAAOA,QAAQ,GAAGC,MAAM,CAACC,MAAP,GAAgBD,MAAM,CAACC,MAAP,CAAcC,IAAd,EAAhB,GAAuC,UAAUC,CAAV,EAAa;AAAE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,UAAIG,CAAC,GAAGF,SAAS,CAACD,CAAD,CAAjB;;AAAsB,WAAK,IAAII,CAAT,IAAcD,CAAd,EAAiB,CAAC,EAAD,EAAKE,cAAL,CAAoBC,IAApB,CAAyBH,CAAzB,EAA4BC,CAA5B,MAAmCL,CAAC,CAACK,CAAD,CAAD,GAAOD,CAAC,CAACC,CAAD,CAA3C;AAAkD;;AAAC,WAAOL,CAAP;AAAW,GAAnN,EAAqNJ,QAAQ,CAACY,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAA5N;AAA8P;;AACpR,SAASO,wBAAT,CAAkCR,CAAlC,EAAqCG,CAArC,EAAwC;AAAE,MAAI,QAAQH,CAAZ,EAAe,OAAO,EAAP;;AAAW,MAAIS,CAAJ;AAAA,MAAOL,CAAP;AAAA,MAAUM,CAAC,GAAGC,6BAA6B,CAACX,CAAD,EAAIG,CAAJ,CAA3C;;AAAmD,MAAIP,MAAM,CAACgB,qBAAX,EAAkC;AAAE,QAAIb,CAAC,GAAGH,MAAM,CAACgB,qBAAP,CAA6BZ,CAA7B,CAAR;;AAAyC,SAAKI,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGL,CAAC,CAACG,MAAlB,EAA0BE,CAAC,EAA3B,EAA+BK,CAAC,GAAGV,CAAC,CAACK,CAAD,CAAL,EAAU,CAAC,CAAD,KAAOD,CAAC,CAACU,OAAF,CAAUJ,CAAV,CAAP,IAAuB,GAAGK,oBAAH,CAAwBR,IAAxB,CAA6BN,CAA7B,EAAgCS,CAAhC,CAAvB,KAA8DC,CAAC,CAACD,CAAD,CAAD,GAAOT,CAAC,CAACS,CAAD,CAAtE,CAAV;AAAuF;;AAAC,SAAOC,CAAP;AAAW;;AACtU,SAASC,6BAAT,CAAuCP,CAAvC,EAA0CJ,CAA1C,EAA6C;AAAE,MAAI,QAAQI,CAAZ,EAAe,OAAO,EAAP;AAAW,MAAID,CAAC,GAAG,EAAR;;AAAY,OAAK,IAAIJ,CAAT,IAAcK,CAAd,EAAiB,IAAI,GAAGC,cAAH,CAAkBC,IAAlB,CAAuBF,CAAvB,EAA0BL,CAA1B,CAAJ,EAAkC;AAAE,QAAI,CAAC,CAAD,KAAOC,CAAC,CAACa,OAAF,CAAUd,CAAV,CAAX,EAAyB;AAAUI,IAAAA,CAAC,CAACJ,CAAD,CAAD,GAAOK,CAAC,CAACL,CAAD,CAAR;AAAc;;AAAC,SAAOI,CAAP;AAAW;;AACvM,OAAO,KAAKY,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,OAApC;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,QAAgD,mBAAhD;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,IAAIC,eAAe,GAAG,4BAAtB;;AACA,IAAIC,mBAAmB,GAAGC,IAAI,IAAI;AAChC,MAAI;AACFC,IAAAA,QADE;AAEFC,IAAAA,QAFE;AAGFC,IAAAA;AAHE,MAIAH,IAJJ;;AAKA,MAAI;AACF,QAAII,KAAK,GAAG,EAAZ;;AACA,QAAI,CAACb,SAAS,CAACU,QAAD,CAAd,EAA0B;AACxB,UAAIC,QAAJ,EAAc;AACZE,QAAAA,KAAK,GAAGH,QAAQ,CAACI,QAAT,GAAoBC,KAApB,CAA0B,EAA1B,CAAR;AACD,OAFD,MAEO;AACLF,QAAAA,KAAK,GAAGH,QAAQ,CAACI,QAAT,GAAoBC,KAApB,CAA0BR,eAA1B,CAAR;AACD;AACF;;AACD,QAAIS,sBAAsB,GAAGH,KAAK,CAACI,GAAN,CAAUC,IAAI,KAAK;AAC9CA,MAAAA,IAD8C;AAE9CC,MAAAA,KAAK,EAAEd,aAAa,CAACa,IAAD,EAAON,KAAP,CAAb,CAA2BO;AAFY,KAAL,CAAd,CAA7B;AAIA,QAAIC,UAAU,GAAGT,QAAQ,GAAG,CAAH,GAAON,aAAa,CAAC,QAAD,EAAWO,KAAX,CAAb,CAA+BO,KAA/D;AACA,WAAO;AACLH,MAAAA,sBADK;AAELI,MAAAA;AAFK,KAAP;AAID,GAlBD,CAkBE,OAAOC,OAAP,EAAgB;AAChB,WAAO,IAAP;AACD;AACF,CA3BD;;AA4BA,IAAIC,qBAAqB,GAAG,CAACC,KAAD,EAAQC,4BAAR,EAAsCJ,UAAtC,EAAkDK,SAAlD,EAA6DC,UAA7D,KAA4E;AACtG,MAAI;AACFC,IAAAA,QADE;AAEFjB,IAAAA,QAFE;AAGFE,IAAAA,KAHE;AAIFD,IAAAA;AAJE,MAKAY,KALJ;AAMA,MAAIK,gBAAgB,GAAG3B,QAAQ,CAAC0B,QAAD,CAA/B;AACA,MAAIE,IAAI,GAAGnB,QAAX;;AACA,MAAIoB,SAAS,GAAG,SAASA,SAAT,GAAqB;AACnC,QAAIjB,KAAK,GAAG/B,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBiD,SAAzC,GAAqDjD,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhF;AACA,WAAO+B,KAAK,CAACmB,MAAN,CAAa,CAACC,MAAD,EAASC,KAAT,KAAmB;AACrC,UAAI;AACFhB,QAAAA,IADE;AAEFC,QAAAA;AAFE,UAGAe,KAHJ;AAIA,UAAIC,WAAW,GAAGF,MAAM,CAACA,MAAM,CAAClD,MAAP,GAAgB,CAAjB,CAAxB;;AACA,UAAIoD,WAAW,KAAKV,SAAS,IAAI,IAAb,IAAqBC,UAArB,IAAmCS,WAAW,CAAChB,KAAZ,GAAoBA,KAApB,GAA4BC,UAA5B,GAAyCgB,MAAM,CAACX,SAAD,CAAvF,CAAf,EAAoH;AAClH;AACAU,QAAAA,WAAW,CAACtB,KAAZ,CAAkBwB,IAAlB,CAAuBnB,IAAvB;AACAiB,QAAAA,WAAW,CAAChB,KAAZ,IAAqBA,KAAK,GAAGC,UAA7B;AACD,OAJD,MAIO;AACL;AACA,YAAIkB,OAAO,GAAG;AACZzB,UAAAA,KAAK,EAAE,CAACK,IAAD,CADK;AAEZC,UAAAA;AAFY,SAAd;AAIAc,QAAAA,MAAM,CAACI,IAAP,CAAYC,OAAZ;AACD;;AACD,aAAOL,MAAP;AACD,KAnBM,EAmBJ,EAnBI,CAAP;AAoBD,GAtBD;;AAuBA,MAAIM,cAAc,GAAGT,SAAS,CAACN,4BAAD,CAA9B;;AACA,MAAIgB,eAAe,GAAG3B,KAAK,IAAIA,KAAK,CAACmB,MAAN,CAAa,CAACS,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACtB,KAAF,GAAUuB,CAAC,CAACvB,KAAZ,GAAoBsB,CAApB,GAAwBC,CAA/C,CAA/B;;AACA,MAAI,CAACd,gBAAD,IAAqBF,UAAzB,EAAqC;AACnC,WAAOa,cAAP;AACD;;AACD,MAAII,SAAS,GAAGJ,cAAc,CAACxD,MAAf,GAAwB4C,QAAxB,IAAoCa,eAAe,CAACD,cAAD,CAAf,CAAgCpB,KAAhC,GAAwCiB,MAAM,CAACX,SAAD,CAAlG;;AACA,MAAI,CAACkB,SAAL,EAAgB;AACd,WAAOJ,cAAP;AACD;;AACD,MAAIK,MAAM,GAAG,GAAb;;AACA,MAAIC,aAAa,GAAGC,KAAK,IAAI;AAC3B,QAAIC,QAAQ,GAAGlB,IAAI,CAACmB,KAAL,CAAW,CAAX,EAAcF,KAAd,CAAf;AACA,QAAIjC,KAAK,GAAGL,mBAAmB,CAAC;AAC9BG,MAAAA,QAD8B;AAE9BC,MAAAA,KAF8B;AAG9BF,MAAAA,QAAQ,EAAEqC,QAAQ,GAAGH;AAHS,KAAD,CAAnB,CAIT5B,sBAJH;AAKA,QAAIiB,MAAM,GAAGH,SAAS,CAACjB,KAAD,CAAtB;AACA,QAAIoC,YAAY,GAAGhB,MAAM,CAAClD,MAAP,GAAgB4C,QAAhB,IAA4Ba,eAAe,CAACP,MAAD,CAAf,CAAwBd,KAAxB,GAAgCiB,MAAM,CAACX,SAAD,CAArF;AACA,WAAO,CAACwB,YAAD,EAAehB,MAAf,CAAP;AACD,GAVD;;AAWA,MAAIiB,KAAK,GAAG,CAAZ;AACA,MAAIC,GAAG,GAAGtB,IAAI,CAAC9C,MAAL,GAAc,CAAxB;AACA,MAAIqE,UAAU,GAAG,CAAjB;AACA,MAAIC,aAAJ;;AACA,SAAOH,KAAK,IAAIC,GAAT,IAAgBC,UAAU,IAAIvB,IAAI,CAAC9C,MAAL,GAAc,CAAnD,EAAsD;AACpD,QAAIuE,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACN,KAAK,GAAGC,GAAT,IAAgB,CAA3B,CAAb;AACA,QAAIM,IAAI,GAAGH,MAAM,GAAG,CAApB;AACA,QAAI,CAACI,gBAAD,EAAmBzB,MAAnB,IAA6BY,aAAa,CAACY,IAAD,CAA9C;AACA,QAAI,CAACE,kBAAD,IAAuBd,aAAa,CAACS,MAAD,CAAxC;;AACA,QAAI,CAACI,gBAAD,IAAqB,CAACC,kBAA1B,EAA8C;AAC5CT,MAAAA,KAAK,GAAGI,MAAM,GAAG,CAAjB;AACD;;AACD,QAAII,gBAAgB,IAAIC,kBAAxB,EAA4C;AAC1CR,MAAAA,GAAG,GAAGG,MAAM,GAAG,CAAf;AACD;;AACD,QAAI,CAACI,gBAAD,IAAqBC,kBAAzB,EAA6C;AAC3CN,MAAAA,aAAa,GAAGpB,MAAhB;AACA;AACD;;AACDmB,IAAAA,UAAU;AACX,GAzEqG,CA2EtG;AACA;;;AACA,SAAOC,aAAa,IAAId,cAAxB;AACD,CA9ED;;AA+EA,IAAIqB,wBAAwB,GAAGlD,QAAQ,IAAI;AACzC,MAAIG,KAAK,GAAG,CAACb,SAAS,CAACU,QAAD,CAAV,GAAuBA,QAAQ,CAACI,QAAT,GAAoBC,KAApB,CAA0BR,eAA1B,CAAvB,GAAoE,EAAhF;AACA,SAAO,CAAC;AACNM,IAAAA;AADM,GAAD,CAAP;AAGD,CALD;;AAMA,OAAO,IAAIgD,eAAe,GAAGC,KAAK,IAAI;AACpC,MAAI;AACF3C,IAAAA,KADE;AAEFO,IAAAA,UAFE;AAGFhB,IAAAA,QAHE;AAIFE,IAAAA,KAJE;AAKFD,IAAAA,QALE;AAMFgB,IAAAA;AANE,MAOAmC,KAPJ,CADoC,CASpC;;AACA,MAAI,CAAC3C,KAAK,IAAIO,UAAV,KAAyB,CAACvB,MAAM,CAAC4D,KAArC,EAA4C;AAC1C,QAAI/C,sBAAJ,EAA4BI,UAA5B;AACA,QAAI4C,UAAU,GAAGxD,mBAAmB,CAAC;AACnCG,MAAAA,QADmC;AAEnCD,MAAAA,QAFmC;AAGnCE,MAAAA;AAHmC,KAAD,CAApC;;AAKA,QAAIoD,UAAJ,EAAgB;AACd,UAAI;AACFhD,QAAAA,sBAAsB,EAAEiD,GADtB;AAEF7C,QAAAA,UAAU,EAAE8C;AAFV,UAGAF,UAHJ;AAIAhD,MAAAA,sBAAsB,GAAGiD,GAAzB;AACA7C,MAAAA,UAAU,GAAG8C,EAAb;AACD,KAPD,MAOO;AACL,aAAON,wBAAwB,CAAClD,QAAD,CAA/B;AACD;;AACD,WAAOY,qBAAqB,CAAC;AAC3BX,MAAAA,QAD2B;AAE3BD,MAAAA,QAF2B;AAG3BiB,MAAAA,QAH2B;AAI3Bf,MAAAA;AAJ2B,KAAD,EAKzBI,sBALyB,EAKDI,UALC,EAKWD,KALX,EAKkBO,UALlB,CAA5B;AAMD;;AACD,SAAOkC,wBAAwB,CAAClD,QAAD,CAA/B;AACD,CAnCM;AAoCP,IAAIyD,YAAY,GAAG,SAAnB;AACA,OAAO,IAAIC,IAAI,GAAG,aAAatE,UAAU,CAAC,CAACuE,KAAD,EAAQC,GAAR,KAAgB;AACxD,MAAI;AACAC,IAAAA,CAAC,EAAEC,MAAM,GAAG,CADZ;AAEAC,IAAAA,CAAC,EAAEC,MAAM,GAAG,CAFZ;AAGAC,IAAAA,UAAU,GAAG,KAHb;AAIA;AACAC,IAAAA,SAAS,GAAG,QALZ;AAMAlD,IAAAA,UAAU,GAAG,KANb;AAOAmD,IAAAA,UAAU,GAAG,OAPb;AAQA;AACAC,IAAAA,cAAc,GAAG,KATjB;AAUAC,IAAAA,IAAI,GAAGZ;AAVP,MAWEE,KAXN;AAAA,MAYEW,KAAK,GAAG3F,wBAAwB,CAACgF,KAAD,EAAQ/F,SAAR,CAZlC;;AAaA,MAAI2G,YAAY,GAAGpF,OAAO,CAAC,MAAM;AAC/B,WAAOgE,eAAe,CAAC;AACrBlD,MAAAA,QAAQ,EAAEqE,KAAK,CAACrE,QADK;AAErBD,MAAAA,QAAQ,EAAEsE,KAAK,CAACtE,QAFK;AAGrBiB,MAAAA,QAAQ,EAAEqD,KAAK,CAACrD,QAHK;AAIrBD,MAAAA,UAJqB;AAKrBd,MAAAA,KAAK,EAAEoE,KAAK,CAACpE,KALQ;AAMrBO,MAAAA,KAAK,EAAE6D,KAAK,CAAC7D;AANQ,KAAD,CAAtB;AAQD,GATyB,EASvB,CAAC6D,KAAK,CAACrE,QAAP,EAAiBqE,KAAK,CAACtE,QAAvB,EAAiCsE,KAAK,CAACrD,QAAvC,EAAiDD,UAAjD,EAA6DsD,KAAK,CAACpE,KAAnE,EAA0EoE,KAAK,CAAC7D,KAAhF,CATuB,CAA1B;;AAUA,MAAI;AACA+D,IAAAA,EADA;AAEAC,IAAAA,EAFA;AAGAC,IAAAA,KAHA;AAIAC,IAAAA,SAJA;AAKA1E,IAAAA;AALA,MAMEqE,KANN;AAAA,MAOEM,SAAS,GAAGjG,wBAAwB,CAAC2F,KAAD,EAAQzG,UAAR,CAPtC;;AAQA,MAAI,CAAC2B,UAAU,CAACsE,MAAD,CAAX,IAAuB,CAACtE,UAAU,CAACwE,MAAD,CAAtC,EAAgD;AAC9C,WAAO,IAAP;AACD;;AACD,MAAIH,CAAC,GAAGC,MAAM,IAAIvE,QAAQ,CAACiF,EAAD,CAAR,GAAeA,EAAf,GAAoB,CAAxB,CAAd;AACA,MAAIT,CAAC,GAAGC,MAAM,IAAIzE,QAAQ,CAACkF,EAAD,CAAR,GAAeA,EAAf,GAAoB,CAAxB,CAAd;AACA,MAAII,OAAJ;;AACA,UAAQT,cAAR;AACE,SAAK,OAAL;AACES,MAAAA,OAAO,GAAGjF,aAAa,CAAC,QAAQkF,MAAR,CAAeZ,SAAf,EAA0B,GAA1B,CAAD,CAAvB;AACA;;AACF,SAAK,QAAL;AACEW,MAAAA,OAAO,GAAGjF,aAAa,CAAC,QAAQkF,MAAR,CAAe,CAACP,YAAY,CAAClG,MAAb,GAAsB,CAAvB,IAA4B,CAA3C,EAA8C,MAA9C,EAAsDyG,MAAtD,CAA6Db,UAA7D,EAAyE,MAAzE,EAAiFa,MAAjF,CAAwFZ,SAAxF,EAAmG,QAAnG,CAAD,CAAvB;AACA;;AACF;AACEW,MAAAA,OAAO,GAAGjF,aAAa,CAAC,QAAQkF,MAAR,CAAeP,YAAY,CAAClG,MAAb,GAAsB,CAArC,EAAwC,MAAxC,EAAgDyG,MAAhD,CAAuDb,UAAvD,EAAmE,GAAnE,CAAD,CAAvB;AACA;AATJ;;AAWA,MAAIc,UAAU,GAAG,EAAjB;;AACA,MAAI/D,UAAJ,EAAgB;AACd,QAAID,SAAS,GAAGwD,YAAY,CAAC,CAAD,CAAZ,CAAgB9D,KAAhC;AACA,QAAI;AACFA,MAAAA;AADE,QAEA6D,KAFJ;AAGAS,IAAAA,UAAU,CAACpD,IAAX,CAAgB,SAASmD,MAAT,CAAgBvF,QAAQ,CAACkB,KAAD,CAAR,GAAkBA,KAAK,GAAGM,SAA1B,GAAsC,CAAtD,EAAyD,GAAzD,CAAhB;AACD;;AACD,MAAI2D,KAAJ,EAAW;AACTK,IAAAA,UAAU,CAACpD,IAAX,CAAgB,UAAUmD,MAAV,CAAiBJ,KAAjB,EAAwB,IAAxB,EAA8BI,MAA9B,CAAqCjB,CAArC,EAAwC,IAAxC,EAA8CiB,MAA9C,CAAqDf,CAArD,EAAwD,GAAxD,CAAhB;AACD;;AACD,MAAIgB,UAAU,CAAC1G,MAAf,EAAuB;AACrBuG,IAAAA,SAAS,CAACI,SAAV,GAAsBD,UAAU,CAACE,IAAX,CAAgB,GAAhB,CAAtB;AACD;;AACD,SAAO,aAAa/F,KAAK,CAACgG,aAAN,CAAoB,MAApB,EAA4BpH,QAAQ,CAAC,EAAD,EAAK4B,WAAW,CAACkF,SAAD,EAAY,IAAZ,CAAhB,EAAmC;AACzFhB,IAAAA,GAAG,EAAEA,GADoF;AAEzFC,IAAAA,CAAC,EAAEA,CAFsF;AAGzFE,IAAAA,CAAC,EAAEA,CAHsF;AAIzFY,IAAAA,SAAS,EAAEtF,IAAI,CAAC,eAAD,EAAkBsF,SAAlB,CAJ0E;AAKzFR,IAAAA,UAAU,EAAEA,UAL6E;AAMzFE,IAAAA,IAAI,EAAEA,IAAI,CAACc,QAAL,CAAc,KAAd,IAAuB1B,YAAvB,GAAsCY;AAN6C,GAAnC,CAApC,EAOhBE,YAAY,CAAChE,GAAb,CAAiB,CAAC6E,IAAD,EAAOhD,KAAP,KAAiB;AACpC,QAAIjC,KAAK,GAAGiF,IAAI,CAACjF,KAAL,CAAW8E,IAAX,CAAgBhF,QAAQ,GAAG,EAAH,GAAQ,GAAhC,CAAZ;AACA;AACE;AACA;AACA;AACAf,MAAAA,KAAK,CAACgG,aAAN,CAAoB,OAApB,EAA6B;AAC3BrB,QAAAA,CAAC,EAAEA,CADwB;AAE3BY,QAAAA,EAAE,EAAErC,KAAK,KAAK,CAAV,GAAcyC,OAAd,GAAwBZ,UAFD;AAG3BoB,QAAAA,GAAG,EAAE,GAAGP,MAAH,CAAU3E,KAAV,EAAiB,GAAjB,EAAsB2E,MAAtB,CAA6B1C,KAA7B;AAHsB,OAA7B,EAIGjC,KAJH;AAJF;AAUD,GAZG,CAPgB,CAApB;AAoBD,CAnFwC,CAAlC;AAoFPuD,IAAI,CAAC4B,WAAL,GAAmB,MAAnB","sourcesContent":["var _excluded = [\"x\", \"y\", \"lineHeight\", \"capHeight\", \"scaleToFit\", \"textAnchor\", \"verticalAnchor\", \"fill\"],\n  _excluded2 = [\"dx\", \"dy\", \"angle\", \"className\", \"breakAll\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\nimport * as React from 'react';\nimport { useMemo, forwardRef } from 'react';\nimport { clsx } from 'clsx';\nimport { isNullish, isNumber, isNumOrStr } from '../util/DataUtils';\nimport { Global } from '../util/Global';\nimport { filterProps } from '../util/ReactUtils';\nimport { getStringSize } from '../util/DOMUtils';\nimport { reduceCSSCalc } from '../util/ReduceCSSCalc';\nvar BREAKING_SPACES = /[ \\f\\n\\r\\t\\v\\u2028\\u2029]+/;\nvar calculateWordWidths = _ref => {\n  var {\n    children,\n    breakAll,\n    style\n  } = _ref;\n  try {\n    var words = [];\n    if (!isNullish(children)) {\n      if (breakAll) {\n        words = children.toString().split('');\n      } else {\n        words = children.toString().split(BREAKING_SPACES);\n      }\n    }\n    var wordsWithComputedWidth = words.map(word => ({\n      word,\n      width: getStringSize(word, style).width\n    }));\n    var spaceWidth = breakAll ? 0 : getStringSize('\\u00A0', style).width;\n    return {\n      wordsWithComputedWidth,\n      spaceWidth\n    };\n  } catch (_unused) {\n    return null;\n  }\n};\nvar calculateWordsByLines = (_ref2, initialWordsWithComputedWith, spaceWidth, lineWidth, scaleToFit) => {\n  var {\n    maxLines,\n    children,\n    style,\n    breakAll\n  } = _ref2;\n  var shouldLimitLines = isNumber(maxLines);\n  var text = children;\n  var calculate = function calculate() {\n    var words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return words.reduce((result, _ref3) => {\n      var {\n        word,\n        width\n      } = _ref3;\n      var currentLine = result[result.length - 1];\n      if (currentLine && (lineWidth == null || scaleToFit || currentLine.width + width + spaceWidth < Number(lineWidth))) {\n        // Word can be added to an existing line\n        currentLine.words.push(word);\n        currentLine.width += width + spaceWidth;\n      } else {\n        // Add first word to line or word is too long to scaleToFit on existing line\n        var newLine = {\n          words: [word],\n          width\n        };\n        result.push(newLine);\n      }\n      return result;\n    }, []);\n  };\n  var originalResult = calculate(initialWordsWithComputedWith);\n  var findLongestLine = words => words.reduce((a, b) => a.width > b.width ? a : b);\n  if (!shouldLimitLines || scaleToFit) {\n    return originalResult;\n  }\n  var overflows = originalResult.length > maxLines || findLongestLine(originalResult).width > Number(lineWidth);\n  if (!overflows) {\n    return originalResult;\n  }\n  var suffix = 'â€¦';\n  var checkOverflow = index => {\n    var tempText = text.slice(0, index);\n    var words = calculateWordWidths({\n      breakAll,\n      style,\n      children: tempText + suffix\n    }).wordsWithComputedWidth;\n    var result = calculate(words);\n    var doesOverflow = result.length > maxLines || findLongestLine(result).width > Number(lineWidth);\n    return [doesOverflow, result];\n  };\n  var start = 0;\n  var end = text.length - 1;\n  var iterations = 0;\n  var trimmedResult;\n  while (start <= end && iterations <= text.length - 1) {\n    var middle = Math.floor((start + end) / 2);\n    var prev = middle - 1;\n    var [doesPrevOverflow, result] = checkOverflow(prev);\n    var [doesMiddleOverflow] = checkOverflow(middle);\n    if (!doesPrevOverflow && !doesMiddleOverflow) {\n      start = middle + 1;\n    }\n    if (doesPrevOverflow && doesMiddleOverflow) {\n      end = middle - 1;\n    }\n    if (!doesPrevOverflow && doesMiddleOverflow) {\n      trimmedResult = result;\n      break;\n    }\n    iterations++;\n  }\n\n  // Fallback to originalResult (result without trimming) if we cannot find the\n  // where to trim.  This should not happen :tm:\n  return trimmedResult || originalResult;\n};\nvar getWordsWithoutCalculate = children => {\n  var words = !isNullish(children) ? children.toString().split(BREAKING_SPACES) : [];\n  return [{\n    words\n  }];\n};\nexport var getWordsByLines = _ref4 => {\n  var {\n    width,\n    scaleToFit,\n    children,\n    style,\n    breakAll,\n    maxLines\n  } = _ref4;\n  // Only perform calculations if using features that require them (multiline, scaleToFit)\n  if ((width || scaleToFit) && !Global.isSsr) {\n    var wordsWithComputedWidth, spaceWidth;\n    var wordWidths = calculateWordWidths({\n      breakAll,\n      children,\n      style\n    });\n    if (wordWidths) {\n      var {\n        wordsWithComputedWidth: wcw,\n        spaceWidth: sw\n      } = wordWidths;\n      wordsWithComputedWidth = wcw;\n      spaceWidth = sw;\n    } else {\n      return getWordsWithoutCalculate(children);\n    }\n    return calculateWordsByLines({\n      breakAll,\n      children,\n      maxLines,\n      style\n    }, wordsWithComputedWidth, spaceWidth, width, scaleToFit);\n  }\n  return getWordsWithoutCalculate(children);\n};\nvar DEFAULT_FILL = '#808080';\nexport var Text = /*#__PURE__*/forwardRef((_ref5, ref) => {\n  var {\n      x: propsX = 0,\n      y: propsY = 0,\n      lineHeight = '1em',\n      // Magic number from d3\n      capHeight = '0.71em',\n      scaleToFit = false,\n      textAnchor = 'start',\n      // Maintain compat with existing charts / default SVG behavior\n      verticalAnchor = 'end',\n      fill = DEFAULT_FILL\n    } = _ref5,\n    props = _objectWithoutProperties(_ref5, _excluded);\n  var wordsByLines = useMemo(() => {\n    return getWordsByLines({\n      breakAll: props.breakAll,\n      children: props.children,\n      maxLines: props.maxLines,\n      scaleToFit,\n      style: props.style,\n      width: props.width\n    });\n  }, [props.breakAll, props.children, props.maxLines, scaleToFit, props.style, props.width]);\n  var {\n      dx,\n      dy,\n      angle,\n      className,\n      breakAll\n    } = props,\n    textProps = _objectWithoutProperties(props, _excluded2);\n  if (!isNumOrStr(propsX) || !isNumOrStr(propsY)) {\n    return null;\n  }\n  var x = propsX + (isNumber(dx) ? dx : 0);\n  var y = propsY + (isNumber(dy) ? dy : 0);\n  var startDy;\n  switch (verticalAnchor) {\n    case 'start':\n      startDy = reduceCSSCalc(\"calc(\".concat(capHeight, \")\"));\n      break;\n    case 'middle':\n      startDy = reduceCSSCalc(\"calc(\".concat((wordsByLines.length - 1) / 2, \" * -\").concat(lineHeight, \" + (\").concat(capHeight, \" / 2))\"));\n      break;\n    default:\n      startDy = reduceCSSCalc(\"calc(\".concat(wordsByLines.length - 1, \" * -\").concat(lineHeight, \")\"));\n      break;\n  }\n  var transforms = [];\n  if (scaleToFit) {\n    var lineWidth = wordsByLines[0].width;\n    var {\n      width\n    } = props;\n    transforms.push(\"scale(\".concat(isNumber(width) ? width / lineWidth : 1, \")\"));\n  }\n  if (angle) {\n    transforms.push(\"rotate(\".concat(angle, \", \").concat(x, \", \").concat(y, \")\"));\n  }\n  if (transforms.length) {\n    textProps.transform = transforms.join(' ');\n  }\n  return /*#__PURE__*/React.createElement(\"text\", _extends({}, filterProps(textProps, true), {\n    ref: ref,\n    x: x,\n    y: y,\n    className: clsx('recharts-text', className),\n    textAnchor: textAnchor,\n    fill: fill.includes('url') ? DEFAULT_FILL : fill\n  }), wordsByLines.map((line, index) => {\n    var words = line.words.join(breakAll ? '' : ' ');\n    return (\n      /*#__PURE__*/\n      // duplicate words will cause duplicate keys\n      // eslint-disable-next-line react/no-array-index-key\n      React.createElement(\"tspan\", {\n        x: x,\n        dy: index === 0 ? startDy : lineHeight,\n        key: \"\".concat(words, \"-\").concat(index)\n      }, words)\n    );\n  }));\n});\nText.displayName = 'Text';"]},"metadata":{},"sourceType":"module"}