{"ast":null,"code":"import { useCallback, useState } from 'react';\nvar EPS = 1;\n/**\n * TODO this documentation does not reflect what this hook is doing, update it.\n * Stores the `offsetHeight`, `offsetLeft`, `offsetTop`, and `offsetWidth` of a DOM element.\n */\n\n/**\n * Use this to listen to element layout changes.\n *\n * Very useful for reading actual sizes of DOM elements relative to the viewport.\n *\n * @param extraDependencies use this to trigger new DOM dimensions read when any of these change. Good for things like payload and label, that will re-render something down in the children array, but you want to read the layout box of a parent.\n * @returns [lastElementOffset, updateElementOffset] most recent value, and setter. Pass the setter to a DOM element ref like this: `<div ref={updateElementOffset}>`\n */\n\nexport function useElementOffset() {\n  var extraDependencies = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var [lastBoundingBox, setLastBoundingBox] = useState({\n    height: 0,\n    left: 0,\n    top: 0,\n    width: 0\n  });\n  var updateBoundingBox = useCallback(node => {\n    if (node != null) {\n      var rect = node.getBoundingClientRect();\n      var box = {\n        height: rect.height,\n        left: rect.left,\n        top: rect.top,\n        width: rect.width\n      };\n\n      if (Math.abs(box.height - lastBoundingBox.height) > EPS || Math.abs(box.left - lastBoundingBox.left) > EPS || Math.abs(box.top - lastBoundingBox.top) > EPS || Math.abs(box.width - lastBoundingBox.width) > EPS) {\n        setLastBoundingBox({\n          height: box.height,\n          left: box.left,\n          top: box.top,\n          width: box.width\n        });\n      }\n    }\n  }, [lastBoundingBox.width, lastBoundingBox.height, lastBoundingBox.top, lastBoundingBox.left, ...extraDependencies]);\n  return [lastBoundingBox, updateBoundingBox];\n}","map":{"version":3,"sources":["/Users/emiliamamedova/charts/flightStats/node_modules/recharts/es6/util/useElementOffset.js"],"names":["useCallback","useState","EPS","useElementOffset","extraDependencies","arguments","length","undefined","lastBoundingBox","setLastBoundingBox","height","left","top","width","updateBoundingBox","node","rect","getBoundingClientRect","box","Math","abs"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,IAAIC,GAAG,GAAG,CAAV;AAEA;;;;;AAKA;;;;;;;;;AAQA,OAAO,SAASC,gBAAT,GAA4B;AACjC,MAAIC,iBAAiB,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA5F;AACA,MAAI,CAACG,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC;AACnDS,IAAAA,MAAM,EAAE,CAD2C;AAEnDC,IAAAA,IAAI,EAAE,CAF6C;AAGnDC,IAAAA,GAAG,EAAE,CAH8C;AAInDC,IAAAA,KAAK,EAAE;AAJ4C,GAAD,CAApD;AAMA,MAAIC,iBAAiB,GAAGd,WAAW,CAACe,IAAI,IAAI;AAC1C,QAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB,UAAIC,IAAI,GAAGD,IAAI,CAACE,qBAAL,EAAX;AACA,UAAIC,GAAG,GAAG;AACRR,QAAAA,MAAM,EAAEM,IAAI,CAACN,MADL;AAERC,QAAAA,IAAI,EAAEK,IAAI,CAACL,IAFH;AAGRC,QAAAA,GAAG,EAAEI,IAAI,CAACJ,GAHF;AAIRC,QAAAA,KAAK,EAAEG,IAAI,CAACH;AAJJ,OAAV;;AAMA,UAAIM,IAAI,CAACC,GAAL,CAASF,GAAG,CAACR,MAAJ,GAAaF,eAAe,CAACE,MAAtC,IAAgDR,GAAhD,IAAuDiB,IAAI,CAACC,GAAL,CAASF,GAAG,CAACP,IAAJ,GAAWH,eAAe,CAACG,IAApC,IAA4CT,GAAnG,IAA0GiB,IAAI,CAACC,GAAL,CAASF,GAAG,CAACN,GAAJ,GAAUJ,eAAe,CAACI,GAAnC,IAA0CV,GAApJ,IAA2JiB,IAAI,CAACC,GAAL,CAASF,GAAG,CAACL,KAAJ,GAAYL,eAAe,CAACK,KAArC,IAA8CX,GAA7M,EAAkN;AAChNO,QAAAA,kBAAkB,CAAC;AACjBC,UAAAA,MAAM,EAAEQ,GAAG,CAACR,MADK;AAEjBC,UAAAA,IAAI,EAAEO,GAAG,CAACP,IAFO;AAGjBC,UAAAA,GAAG,EAAEM,GAAG,CAACN,GAHQ;AAIjBC,UAAAA,KAAK,EAAEK,GAAG,CAACL;AAJM,SAAD,CAAlB;AAMD;AACF;AACF,GAlBkC,EAkBhC,CAACL,eAAe,CAACK,KAAjB,EAAwBL,eAAe,CAACE,MAAxC,EAAgDF,eAAe,CAACI,GAAhE,EAAqEJ,eAAe,CAACG,IAArF,EAA2F,GAAGP,iBAA9F,CAlBgC,CAAnC;AAmBA,SAAO,CAACI,eAAD,EAAkBM,iBAAlB,CAAP;AACD","sourcesContent":["import { useCallback, useState } from 'react';\nvar EPS = 1;\n\n/**\n * TODO this documentation does not reflect what this hook is doing, update it.\n * Stores the `offsetHeight`, `offsetLeft`, `offsetTop`, and `offsetWidth` of a DOM element.\n */\n\n/**\n * Use this to listen to element layout changes.\n *\n * Very useful for reading actual sizes of DOM elements relative to the viewport.\n *\n * @param extraDependencies use this to trigger new DOM dimensions read when any of these change. Good for things like payload and label, that will re-render something down in the children array, but you want to read the layout box of a parent.\n * @returns [lastElementOffset, updateElementOffset] most recent value, and setter. Pass the setter to a DOM element ref like this: `<div ref={updateElementOffset}>`\n */\nexport function useElementOffset() {\n  var extraDependencies = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var [lastBoundingBox, setLastBoundingBox] = useState({\n    height: 0,\n    left: 0,\n    top: 0,\n    width: 0\n  });\n  var updateBoundingBox = useCallback(node => {\n    if (node != null) {\n      var rect = node.getBoundingClientRect();\n      var box = {\n        height: rect.height,\n        left: rect.left,\n        top: rect.top,\n        width: rect.width\n      };\n      if (Math.abs(box.height - lastBoundingBox.height) > EPS || Math.abs(box.left - lastBoundingBox.left) > EPS || Math.abs(box.top - lastBoundingBox.top) > EPS || Math.abs(box.width - lastBoundingBox.width) > EPS) {\n        setLastBoundingBox({\n          height: box.height,\n          left: box.left,\n          top: box.top,\n          width: box.width\n        });\n      }\n    }\n  }, [lastBoundingBox.width, lastBoundingBox.height, lastBoundingBox.top, lastBoundingBox.left, ...extraDependencies]);\n  return [lastBoundingBox, updateBoundingBox];\n}"]},"metadata":{},"sourceType":"module"}