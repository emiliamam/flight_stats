{"ast":null,"code":"var _jsxFileName = \"/Users/emiliamamedova/charts/project_corona_tracker/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nconst Chart = ({\n  data: {\n    confirmed,\n    recovered,\n    deaths\n  },\n  country\n}) => {\n  const [view, setView] = useState('airlines'); // 'airlines' или 'routes'\n\n  const [airports, setAirports] = useState([]);\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      const response = await fetch('/airports.json');\n      const data = await response.json();\n      setAirports(data);\n    };\n\n    fetchMyAPI();\n  }, []); // Подсчёт количества аэропортов по часовым поясам (пример для view = 'airlines')\n\n  const timezoneCounts = airports.reduce((acc, airport) => {\n    acc[airport.Timezone] = (acc[airport.Timezone] || 0) + 1;\n    return acc;\n  }, {});\n  const labels = Object.keys(timezoneCounts);\n  const counts = Object.values(timezoneCounts);\n  const dataForAirlines = {\n    labels,\n    datasets: [{\n      label: 'Количество аэропортов',\n      backgroundColor: 'rgba(54, 162, 235, 0.6)',\n      data: counts\n    }]\n  }; // Тут можно добавить данные для 'routes' — пока заглушка\n\n  const dataForRoutes = {\n    labels: ['Направление 1', 'Направление 2', 'Направление 3'],\n    datasets: [{\n      label: 'Количество рейсов',\n      backgroundColor: 'rgba(255, 99, 132, 0.6)',\n      data: [10, 20, 15]\n    }]\n  };\n  const options = {\n    plugins: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: view === 'airlines' ? 'Количество аэропортов по часовым поясам' : 'Количество рейсов по направлениям',\n        font: {\n          size: 18\n        }\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        ticks: {\n          stepSize: 1\n        },\n        title: {\n          display: true,\n          text: view === 'airlines' ? 'Количество' : 'Рейсы'\n        }\n      },\n      x: {\n        title: {\n          display: true,\n          text: view === 'airlines' ? 'Часовой пояс' : 'Направление'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      margin: '20px auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginBottom: 20,\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: {\n      marginRight: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    value: \"airlines\",\n    checked: view === 'airlines',\n    onChange: () => setView('airlines'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }), \"\\u0410\\u0432\\u0438\\u0430\\u043A\\u043E\\u043C\\u043F\\u0430\\u043D\\u0438\\u0438\"), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    value: \"routes\",\n    checked: view === 'routes',\n    onChange: () => setView('routes'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }), \"\\u041D\\u0430\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u044F\")), /*#__PURE__*/React.createElement(Bar, {\n    data: view === 'airlines' ? dataForAirlines : dataForRoutes,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Chart;","map":{"version":3,"sources":["/Users/emiliamamedova/charts/project_corona_tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","Bar","Chart","data","confirmed","recovered","deaths","country","view","setView","airports","setAirports","fetchMyAPI","response","fetch","json","timezoneCounts","reduce","acc","airport","Timezone","labels","Object","keys","counts","values","dataForAirlines","datasets","label","backgroundColor","dataForRoutes","options","plugins","legend","display","title","text","font","size","scales","y","beginAtZero","ticks","stepSize","x","width","margin","marginBottom","textAlign","marginRight"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,iBAApB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA;AAAxB,GAAR;AAA0CC,EAAAA;AAA1C,CAAD,KAAyD;AACrE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,UAAD,CAAhC,CADqE,CACvB;;AAC9C,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,UAAU,GAAG,YAAY;AAC7B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAD,CAA5B;AACA,YAAMX,IAAI,GAAG,MAAMU,QAAQ,CAACE,IAAT,EAAnB;AACAJ,MAAAA,WAAW,CAACR,IAAD,CAAX;AACD,KAJD;;AAMAS,IAAAA,UAAU;AACX,GARQ,EAQN,EARM,CAAT,CAJqE,CAcrE;;AACA,QAAMI,cAAc,GAAGN,QAAQ,CAACO,MAAT,CAAgB,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACvDD,IAAAA,GAAG,CAACC,OAAO,CAACC,QAAT,CAAH,GAAwB,CAACF,GAAG,CAACC,OAAO,CAACC,QAAT,CAAH,IAAyB,CAA1B,IAA+B,CAAvD;AACA,WAAOF,GAAP;AACD,GAHsB,EAGpB,EAHoB,CAAvB;AAKA,QAAMG,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYP,cAAZ,CAAf;AACA,QAAMQ,MAAM,GAAGF,MAAM,CAACG,MAAP,CAAcT,cAAd,CAAf;AAEA,QAAMU,eAAe,GAAG;AACtBL,IAAAA,MADsB;AAEtBM,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,uBADT;AAEEC,MAAAA,eAAe,EAAE,yBAFnB;AAGE1B,MAAAA,IAAI,EAAEqB;AAHR,KADQ;AAFY,GAAxB,CAvBqE,CAkCrE;;AACA,QAAMM,aAAa,GAAG;AACpBT,IAAAA,MAAM,EAAE,CAAC,eAAD,EAAkB,eAAlB,EAAmC,eAAnC,CADY;AAEpBM,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,mBADT;AAEEC,MAAAA,eAAe,EAAE,yBAFnB;AAGE1B,MAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT;AAHR,KADQ;AAFU,GAAtB;AAWA,QAAM4B,OAAO,GAAG;AACdC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OADD;AAEPC,MAAAA,KAAK,EAAE;AACLD,QAAAA,OAAO,EAAE,IADJ;AAELE,QAAAA,IAAI,EAAE5B,IAAI,KAAK,UAAT,GAAsB,yCAAtB,GAAkE,mCAFnE;AAGL6B,QAAAA,IAAI,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR;AAHD;AAFA,KADK;AASdC,IAAAA,MAAM,EAAE;AACNC,MAAAA,CAAC,EAAE;AACDC,QAAAA,WAAW,EAAE,IADZ;AAEDC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAFN;AAGDR,QAAAA,KAAK,EAAE;AAAED,UAAAA,OAAO,EAAE,IAAX;AAAiBE,UAAAA,IAAI,EAAE5B,IAAI,KAAK,UAAT,GAAsB,YAAtB,GAAqC;AAA5D;AAHN,OADG;AAMNoC,MAAAA,CAAC,EAAE;AACDT,QAAAA,KAAK,EAAE;AAAED,UAAAA,OAAO,EAAE,IAAX;AAAiBE,UAAAA,IAAI,EAAE5B,IAAI,KAAK,UAAT,GAAsB,cAAtB,GAAuC;AAA9D;AADN;AANG;AATM,GAAhB;AAqBA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEqC,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,YAAY,EAAE,EAAhB;AAAoBC,MAAAA,SAAS,EAAE;AAA/B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,KAAK,EAAE;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAC,UAFR;AAGE,IAAA,OAAO,EAAEzC,IAAI,KAAK,UAHpB;AAIE,IAAA,QAAQ,EAAE,MAAMC,OAAO,CAAC,UAAD,CAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,6EADF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAC,QAFR;AAGE,IAAA,OAAO,EAAED,IAAI,KAAK,QAHpB;AAIE,IAAA,QAAQ,EAAE,MAAMC,OAAO,CAAC,QAAD,CAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,uEAVF,CAFF,eAwBE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAED,IAAI,KAAK,UAAT,GAAsBkB,eAAtB,GAAwCI,aAAnD;AAAkE,IAAA,OAAO,EAAEC,OAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxBF,CADF;AA4BD,CA/FD;;AAiGA,eAAe7B,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [view, setView] = useState('airlines'); // 'airlines' или 'routes'\n  const [airports, setAirports] = useState([]);\n\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      const response = await fetch('/airports.json');\n      const data = await response.json();\n      setAirports(data);\n    };\n\n    fetchMyAPI();\n  }, []);\n\n  // Подсчёт количества аэропортов по часовым поясам (пример для view = 'airlines')\n  const timezoneCounts = airports.reduce((acc, airport) => {\n    acc[airport.Timezone] = (acc[airport.Timezone] || 0) + 1;\n    return acc;\n  }, {});\n\n  const labels = Object.keys(timezoneCounts);\n  const counts = Object.values(timezoneCounts);\n\n  const dataForAirlines = {\n    labels,\n    datasets: [\n      {\n        label: 'Количество аэропортов',\n        backgroundColor: 'rgba(54, 162, 235, 0.6)',\n        data: counts,\n      },\n    ],\n  };\n\n  // Тут можно добавить данные для 'routes' — пока заглушка\n  const dataForRoutes = {\n    labels: ['Направление 1', 'Направление 2', 'Направление 3'],\n    datasets: [\n      {\n        label: 'Количество рейсов',\n        backgroundColor: 'rgba(255, 99, 132, 0.6)',\n        data: [10, 20, 15],\n      },\n    ],\n  };\n\n  const options = {\n    plugins: {\n      legend: { display: false },\n      title: {\n        display: true,\n        text: view === 'airlines' ? 'Количество аэропортов по часовым поясам' : 'Количество рейсов по направлениям',\n        font: { size: 18 },\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        ticks: { stepSize: 1 },\n        title: { display: true, text: view === 'airlines' ? 'Количество' : 'Рейсы' },\n      },\n      x: {\n        title: { display: true, text: view === 'airlines' ? 'Часовой пояс' : 'Направление' },\n      },\n    },\n  };\n\n  return (\n    <div style={{ width: '100%', margin: '20px auto' }}>\n      {/* Переключатель */}\n      <div style={{ marginBottom: 20, textAlign: 'center' }}>\n        <label style={{ marginRight: 15 }}>\n          <input\n            type=\"radio\"\n            value=\"airlines\"\n            checked={view === 'airlines'}\n            onChange={() => setView('airlines')}\n          />\n          Авиакомпании\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            value=\"routes\"\n            checked={view === 'routes'}\n            onChange={() => setView('routes')}\n          />\n          Направления\n        </label>\n      </div>\n\n      {/* График */}\n      <Bar data={view === 'airlines' ? dataForAirlines : dataForRoutes} options={options} />\n    </div>\n  );\n};\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}