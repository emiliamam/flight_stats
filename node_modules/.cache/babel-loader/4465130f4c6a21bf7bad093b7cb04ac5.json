{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n/**\n * These are chart options that users can choose - which means they can also\n * choose to change them which should trigger a re-render.\n */\n\nexport var initialState = {\n  accessibilityLayer: true,\n  barCategoryGap: '10%',\n  barGap: 4,\n  barSize: undefined,\n  className: undefined,\n  maxBarSize: undefined,\n  stackOffset: 'none',\n  syncId: undefined,\n  syncMethod: 'index'\n};\nvar rootPropsSlice = createSlice({\n  name: 'rootProps',\n  initialState,\n  reducers: {\n    updateOptions: (state, action) => {\n      var _action$payload$barGa;\n\n      state.accessibilityLayer = action.payload.accessibilityLayer;\n      state.barCategoryGap = action.payload.barCategoryGap;\n      state.barGap = (_action$payload$barGa = action.payload.barGap) !== null && _action$payload$barGa !== void 0 ? _action$payload$barGa : initialState.barGap;\n      state.barSize = action.payload.barSize;\n      state.maxBarSize = action.payload.maxBarSize;\n      state.stackOffset = action.payload.stackOffset;\n      state.syncId = action.payload.syncId;\n      state.syncMethod = action.payload.syncMethod;\n      state.className = action.payload.className;\n    }\n  }\n});\nexport var rootPropsReducer = rootPropsSlice.reducer;\nexport var {\n  updateOptions\n} = rootPropsSlice.actions;","map":{"version":3,"sources":["/Users/emiliamamedova/charts/flightStats/node_modules/recharts/es6/state/rootPropsSlice.js"],"names":["createSlice","initialState","accessibilityLayer","barCategoryGap","barGap","barSize","undefined","className","maxBarSize","stackOffset","syncId","syncMethod","rootPropsSlice","name","reducers","updateOptions","state","action","_action$payload$barGa","payload","rootPropsReducer","reducer","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA;;;;;AAKA,OAAO,IAAIC,YAAY,GAAG;AACxBC,EAAAA,kBAAkB,EAAE,IADI;AAExBC,EAAAA,cAAc,EAAE,KAFQ;AAGxBC,EAAAA,MAAM,EAAE,CAHgB;AAIxBC,EAAAA,OAAO,EAAEC,SAJe;AAKxBC,EAAAA,SAAS,EAAED,SALa;AAMxBE,EAAAA,UAAU,EAAEF,SANY;AAOxBG,EAAAA,WAAW,EAAE,MAPW;AAQxBC,EAAAA,MAAM,EAAEJ,SARgB;AASxBK,EAAAA,UAAU,EAAE;AATY,CAAnB;AAWP,IAAIC,cAAc,GAAGZ,WAAW,CAAC;AAC/Ba,EAAAA,IAAI,EAAE,WADyB;AAE/BZ,EAAAA,YAF+B;AAG/Ba,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAIC,qBAAJ;;AACAF,MAAAA,KAAK,CAACd,kBAAN,GAA2Be,MAAM,CAACE,OAAP,CAAejB,kBAA1C;AACAc,MAAAA,KAAK,CAACb,cAAN,GAAuBc,MAAM,CAACE,OAAP,CAAehB,cAAtC;AACAa,MAAAA,KAAK,CAACZ,MAAN,GAAe,CAACc,qBAAqB,GAAGD,MAAM,CAACE,OAAP,CAAef,MAAxC,MAAoD,IAApD,IAA4Dc,qBAAqB,KAAK,KAAK,CAA3F,GAA+FA,qBAA/F,GAAuHjB,YAAY,CAACG,MAAnJ;AACAY,MAAAA,KAAK,CAACX,OAAN,GAAgBY,MAAM,CAACE,OAAP,CAAed,OAA/B;AACAW,MAAAA,KAAK,CAACR,UAAN,GAAmBS,MAAM,CAACE,OAAP,CAAeX,UAAlC;AACAQ,MAAAA,KAAK,CAACP,WAAN,GAAoBQ,MAAM,CAACE,OAAP,CAAeV,WAAnC;AACAO,MAAAA,KAAK,CAACN,MAAN,GAAeO,MAAM,CAACE,OAAP,CAAeT,MAA9B;AACAM,MAAAA,KAAK,CAACL,UAAN,GAAmBM,MAAM,CAACE,OAAP,CAAeR,UAAlC;AACAK,MAAAA,KAAK,CAACT,SAAN,GAAkBU,MAAM,CAACE,OAAP,CAAeZ,SAAjC;AACD;AAZO;AAHqB,CAAD,CAAhC;AAkBA,OAAO,IAAIa,gBAAgB,GAAGR,cAAc,CAACS,OAAtC;AACP,OAAO,IAAI;AACTN,EAAAA;AADS,IAEPH,cAAc,CAACU,OAFZ","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n/**\n * These are chart options that users can choose - which means they can also\n * choose to change them which should trigger a re-render.\n */\n\nexport var initialState = {\n  accessibilityLayer: true,\n  barCategoryGap: '10%',\n  barGap: 4,\n  barSize: undefined,\n  className: undefined,\n  maxBarSize: undefined,\n  stackOffset: 'none',\n  syncId: undefined,\n  syncMethod: 'index'\n};\nvar rootPropsSlice = createSlice({\n  name: 'rootProps',\n  initialState,\n  reducers: {\n    updateOptions: (state, action) => {\n      var _action$payload$barGa;\n      state.accessibilityLayer = action.payload.accessibilityLayer;\n      state.barCategoryGap = action.payload.barCategoryGap;\n      state.barGap = (_action$payload$barGa = action.payload.barGap) !== null && _action$payload$barGa !== void 0 ? _action$payload$barGa : initialState.barGap;\n      state.barSize = action.payload.barSize;\n      state.maxBarSize = action.payload.maxBarSize;\n      state.stackOffset = action.payload.stackOffset;\n      state.syncId = action.payload.syncId;\n      state.syncMethod = action.payload.syncMethod;\n      state.className = action.payload.className;\n    }\n  }\n});\nexport var rootPropsReducer = rootPropsSlice.reducer;\nexport var {\n  updateOptions\n} = rootPropsSlice.actions;"]},"metadata":{},"sourceType":"module"}